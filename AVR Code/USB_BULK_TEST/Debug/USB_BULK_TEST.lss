
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000288c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  0000288c  00002920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b96  008020b2  008020b2  000029d2  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029d2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000490  00000000  00000000  00002a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a25e  00000000  00000000  00002e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b61  00000000  00000000  0000d0f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000088a1  00000000  00000000  0000ec57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009a8  00000000  00000000  000174f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002ee03  00000000  00000000  00017ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e3e  00000000  00000000  00046ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000390  00000000  00000000  00048ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b6b4  00000000  00000000  00048e78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2c c1       	rjmp	.+600    	; 0x25a <__ctors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3a c1       	rjmp	.+628    	; 0x292 <__bad_interrupt>
      1e:	00 00       	nop
      20:	38 c1       	rjmp	.+624    	; 0x292 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	26 c1       	rjmp	.+588    	; 0x292 <__bad_interrupt>
      46:	00 00       	nop
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1a c1       	rjmp	.+564    	; 0x292 <__bad_interrupt>
      5e:	00 00       	nop
      60:	18 c1       	rjmp	.+560    	; 0x292 <__bad_interrupt>
      62:	00 00       	nop
      64:	16 c1       	rjmp	.+556    	; 0x292 <__bad_interrupt>
      66:	00 00       	nop
      68:	14 c1       	rjmp	.+552    	; 0x292 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	08 c1       	rjmp	.+528    	; 0x292 <__bad_interrupt>
      82:	00 00       	nop
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fa c0       	rjmp	.+500    	; 0x292 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f4 c0       	rjmp	.+488    	; 0x292 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ea c0       	rjmp	.+468    	; 0x292 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d6 c0       	rjmp	.+428    	; 0x292 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	d4 c0       	rjmp	.+424    	; 0x292 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d2 c0       	rjmp	.+420    	; 0x292 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d0 c0       	rjmp	.+416    	; 0x292 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ce c0       	rjmp	.+412    	; 0x292 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	cc c0       	rjmp	.+408    	; 0x292 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ca c0       	rjmp	.+404    	; 0x292 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c8 c0       	rjmp	.+400    	; 0x292 <__bad_interrupt>
     102:	00 00       	nop
     104:	c6 c0       	rjmp	.+396    	; 0x292 <__bad_interrupt>
     106:	00 00       	nop
     108:	c4 c0       	rjmp	.+392    	; 0x292 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c2 c0       	rjmp	.+388    	; 0x292 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c0 c0       	rjmp	.+384    	; 0x292 <__bad_interrupt>
     112:	00 00       	nop
     114:	be c0       	rjmp	.+380    	; 0x292 <__bad_interrupt>
     116:	00 00       	nop
     118:	bc c0       	rjmp	.+376    	; 0x292 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ba c0       	rjmp	.+372    	; 0x292 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b8 c0       	rjmp	.+368    	; 0x292 <__bad_interrupt>
     122:	00 00       	nop
     124:	b6 c0       	rjmp	.+364    	; 0x292 <__bad_interrupt>
     126:	00 00       	nop
     128:	b4 c0       	rjmp	.+360    	; 0x292 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	b2 c0       	rjmp	.+356    	; 0x292 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b0 c0       	rjmp	.+352    	; 0x292 <__bad_interrupt>
     132:	00 00       	nop
     134:	ae c0       	rjmp	.+348    	; 0x292 <__bad_interrupt>
     136:	00 00       	nop
     138:	ac c0       	rjmp	.+344    	; 0x292 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	aa c0       	rjmp	.+340    	; 0x292 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a8 c0       	rjmp	.+336    	; 0x292 <__bad_interrupt>
     142:	00 00       	nop
     144:	a6 c0       	rjmp	.+332    	; 0x292 <__bad_interrupt>
     146:	00 00       	nop
     148:	a4 c0       	rjmp	.+328    	; 0x292 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	39 c6       	rjmp	.+3186   	; 0xdc0 <__vector_83>
     14e:	00 00       	nop
     150:	a0 c0       	rjmp	.+320    	; 0x292 <__bad_interrupt>
     152:	00 00       	nop
     154:	9e c0       	rjmp	.+316    	; 0x292 <__bad_interrupt>
     156:	00 00       	nop
     158:	9c c0       	rjmp	.+312    	; 0x292 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	9a c0       	rjmp	.+308    	; 0x292 <__bad_interrupt>
     15e:	00 00       	nop
     160:	98 c0       	rjmp	.+304    	; 0x292 <__bad_interrupt>
     162:	00 00       	nop
     164:	96 c0       	rjmp	.+300    	; 0x292 <__bad_interrupt>
     166:	00 00       	nop
     168:	94 c0       	rjmp	.+296    	; 0x292 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	92 c0       	rjmp	.+292    	; 0x292 <__bad_interrupt>
     16e:	00 00       	nop
     170:	90 c0       	rjmp	.+288    	; 0x292 <__bad_interrupt>
     172:	00 00       	nop
     174:	8e c0       	rjmp	.+284    	; 0x292 <__bad_interrupt>
     176:	00 00       	nop
     178:	8c c0       	rjmp	.+280    	; 0x292 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	8a c0       	rjmp	.+276    	; 0x292 <__bad_interrupt>
     17e:	00 00       	nop
     180:	88 c0       	rjmp	.+272    	; 0x292 <__bad_interrupt>
     182:	00 00       	nop
     184:	86 c0       	rjmp	.+268    	; 0x292 <__bad_interrupt>
     186:	00 00       	nop
     188:	84 c0       	rjmp	.+264    	; 0x292 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	82 c0       	rjmp	.+260    	; 0x292 <__bad_interrupt>
     18e:	00 00       	nop
     190:	80 c0       	rjmp	.+256    	; 0x292 <__bad_interrupt>
     192:	00 00       	nop
     194:	7e c0       	rjmp	.+252    	; 0x292 <__bad_interrupt>
     196:	00 00       	nop
     198:	7c c0       	rjmp	.+248    	; 0x292 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	7a c0       	rjmp	.+244    	; 0x292 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	78 c0       	rjmp	.+240    	; 0x292 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	76 c0       	rjmp	.+236    	; 0x292 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	74 c0       	rjmp	.+232    	; 0x292 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	72 c0       	rjmp	.+228    	; 0x292 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	70 c0       	rjmp	.+224    	; 0x292 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	6e c0       	rjmp	.+220    	; 0x292 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	6c c0       	rjmp	.+216    	; 0x292 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	6a c0       	rjmp	.+212    	; 0x292 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	68 c0       	rjmp	.+208    	; 0x292 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	66 c0       	rjmp	.+204    	; 0x292 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	64 c0       	rjmp	.+200    	; 0x292 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	62 c0       	rjmp	.+196    	; 0x292 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	60 c0       	rjmp	.+192    	; 0x292 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	5e c0       	rjmp	.+188    	; 0x292 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	5c c0       	rjmp	.+184    	; 0x292 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	5a c0       	rjmp	.+180    	; 0x292 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	58 c0       	rjmp	.+176    	; 0x292 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	56 c0       	rjmp	.+172    	; 0x292 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	54 c0       	rjmp	.+168    	; 0x292 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	52 c0       	rjmp	.+164    	; 0x292 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	50 c0       	rjmp	.+160    	; 0x292 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__vector_125>
     1f8:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__vector_126>
     1fc:	93 01       	movw	r18, r6
     1fe:	95 01       	movw	r18, r10
     200:	97 01       	movw	r18, r14
     202:	99 01       	movw	r18, r18
     204:	9b 01       	movw	r18, r22
     206:	a0 01       	movw	r20, r0
     208:	9d 01       	movw	r18, r26
     20a:	9f 01       	movw	r18, r30
     20c:	e0 09       	sbc	r30, r0
     20e:	e2 09       	sbc	r30, r2
     210:	20 0a       	sbc	r2, r16
     212:	62 0a       	sbc	r6, r18
     214:	6b 0a       	sbc	r6, r27
     216:	71 0a       	sbc	r7, r17
     218:	c4 0a       	sbc	r12, r20
     21a:	ca 0a       	sbc	r12, r26
     21c:	10 0a       	sbc	r1, r16
     21e:	12 0a       	sbc	r1, r18
     220:	14 0a       	sbc	r1, r20
     222:	16 0a       	sbc	r1, r22
     224:	18 0a       	sbc	r1, r24
     226:	1a 0a       	sbc	r1, r26
     228:	1c 0a       	sbc	r1, r28
     22a:	1e 0a       	sbc	r1, r30
     22c:	52 0a       	sbc	r5, r18
     22e:	54 0a       	sbc	r5, r20
     230:	56 0a       	sbc	r5, r22
     232:	58 0a       	sbc	r5, r24
     234:	5a 0a       	sbc	r5, r26
     236:	5c 0a       	sbc	r5, r28
     238:	5e 0a       	sbc	r5, r30
     23a:	60 0a       	sbc	r6, r16
     23c:	7e 0a       	sbc	r7, r30
     23e:	89 0a       	sbc	r8, r25
     240:	93 0a       	sbc	r9, r19
     242:	a1 0a       	sbc	r10, r17
     244:	a3 0a       	sbc	r10, r19
     246:	a5 0a       	sbc	r10, r21
     248:	af 0a       	sbc	r10, r31
     24a:	b9 0a       	sbc	r11, r25
     24c:	8d 0e       	add	r8, r29
     24e:	7b 0e       	add	r7, r27
     250:	7e 0e       	add	r7, r30
     252:	81 0e       	add	r8, r17
     254:	84 0e       	add	r8, r20
     256:	87 0e       	add	r8, r23
     258:	8a 0e       	add	r8, r26

0000025a <__ctors_end>:
     25a:	11 24       	eor	r1, r1
     25c:	1f be       	out	0x3f, r1	; 63
     25e:	cf ef       	ldi	r28, 0xFF	; 255
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df e2       	ldi	r29, 0x2F	; 47
     264:	de bf       	out	0x3e, r29	; 62

00000266 <__do_copy_data>:
     266:	10 e2       	ldi	r17, 0x20	; 32
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e2       	ldi	r27, 0x20	; 32
     26c:	ec e8       	ldi	r30, 0x8C	; 140
     26e:	f8 e2       	ldi	r31, 0x28	; 40
     270:	02 c0       	rjmp	.+4      	; 0x276 <__do_copy_data+0x10>
     272:	05 90       	lpm	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	a2 3b       	cpi	r26, 0xB2	; 178
     278:	b1 07       	cpc	r27, r17
     27a:	d9 f7       	brne	.-10     	; 0x272 <__do_copy_data+0xc>

0000027c <__do_clear_bss>:
     27c:	2c e2       	ldi	r18, 0x2C	; 44
     27e:	a2 eb       	ldi	r26, 0xB2	; 178
     280:	b0 e2       	ldi	r27, 0x20	; 32
     282:	01 c0       	rjmp	.+2      	; 0x286 <.do_clear_bss_start>

00000284 <.do_clear_bss_loop>:
     284:	1d 92       	st	X+, r1

00000286 <.do_clear_bss_start>:
     286:	a8 34       	cpi	r26, 0x48	; 72
     288:	b2 07       	cpc	r27, r18
     28a:	e1 f7       	brne	.-8      	; 0x284 <.do_clear_bss_loop>
     28c:	1c d0       	rcall	.+56     	; 0x2c6 <main>
     28e:	0c 94 44 14 	jmp	0x2888	; 0x2888 <_exit>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     294:	e0 e8       	ldi	r30, 0x80	; 128
     296:	f6 e0       	ldi	r31, 0x06	; 6
     298:	8f e0       	ldi	r24, 0x0F	; 15
     29a:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     29c:	85 e0       	ldi	r24, 0x05	; 5
     29e:	84 83       	std	Z+4, r24	; 0x04
     2a0:	08 95       	ret

000002a2 <board_init>:
     2a2:	08 95       	ret

000002a4 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[!b1_state * PACKET_SIZE], PACKET_SIZE, iso_callback);
     2a4:	80 91 b4 20 	lds	r24, 0x20B4
     2a8:	81 11       	cpse	r24, r1
     2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <iso_callback+0xe>
     2ac:	8e ee       	ldi	r24, 0xEE	; 238
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <iso_callback+0x12>
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	42 e5       	ldi	r20, 0x52	; 82
     2b8:	51 e0       	ldi	r21, 0x01	; 1
     2ba:	6e ee       	ldi	r22, 0xEE	; 238
     2bc:	72 e0       	ldi	r23, 0x02	; 2
     2be:	8a 59       	subi	r24, 0x9A	; 154
     2c0:	99 4d       	sbci	r25, 0xD9	; 217
     2c2:	ff c6       	rjmp	.+3582   	; 0x10c2 <udi_vendor_iso_in_run>
     2c4:	08 95       	ret

000002c6 <main>:
volatile char PSU_target = 0;

volatile unsigned char test_byte = 123;

int main(void){
	irq_initialize_vectors();
     2c6:	87 e0       	ldi	r24, 0x07	; 7
     2c8:	e0 ea       	ldi	r30, 0xA0	; 160
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
     2ce:	78 94       	sei
	sysclk_init();
     2d0:	10 d6       	rcall	.+3104   	; 0xef2 <sysclk_init>
	board_init();
     2d2:	e7 df       	rcall	.-50     	; 0x2a2 <board_init>
	udc_start();
     2d4:	f0 d7       	rcall	.+4064   	; 0x12b6 <udc_start>
	tiny_dac_setup();
     2d6:	ac d0       	rcall	.+344    	; 0x430 <tiny_dac_setup>
	tiny_dma_setup();
     2d8:	cf d0       	rcall	.+414    	; 0x478 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	77 d0       	rcall	.+238    	; 0x3ce <tiny_adc_setup>
	tiny_adc_pid_setup();
     2e0:	63 d0       	rcall	.+198    	; 0x3a8 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     2e2:	8c e0       	ldi	r24, 0x0C	; 12
     2e4:	57 d0       	rcall	.+174    	; 0x394 <tiny_adc_ch1setup>
	tiny_timer_setup();
     2e6:	31 d5       	rcall	.+2658   	; 0xd4a <tiny_timer_setup>
	tiny_uart_setup();
     2e8:	df d5       	rcall	.+3006   	; 0xea8 <tiny_uart_setup>
	tiny_spi_setup();
     2ea:	f6 d5       	rcall	.+3052   	; 0xed8 <tiny_spi_setup>
	tiny_dig_setup();
     2ec:	d3 df       	rcall	.-90     	; 0x294 <tiny_dig_setup>
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
     30a:	f1 cf       	rjmp	.-30     	; 0x2ee <main+0x28>

0000030c <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     30c:	08 95       	ret

0000030e <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     30e:	08 95       	ret

00000310 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	switch(global_mode){
     310:	80 91 00 20 	lds	r24, 0x2000
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	88 30       	cpi	r24, 0x08	; 8
     318:	91 05       	cpc	r25, r1
     31a:	90 f4       	brcc	.+36     	; 0x340 <main_sof_action+0x30>
     31c:	fc 01       	movw	r30, r24
     31e:	e2 50       	subi	r30, 0x02	; 2
     320:	ff 4f       	sbci	r31, 0xFF	; 255
     322:	0c 94 35 14 	jmp	0x286a	; 0x286a <__tablejump2__>
		case 0:
			tiny_dma_loop_mode_0();
     326:	0b d1       	rcall	.+534    	; 0x53e <tiny_dma_loop_mode_0>
			break;
     328:	0b c0       	rjmp	.+22     	; 0x340 <main_sof_action+0x30>
		case 1:
			tiny_dma_loop_mode_1();
     32a:	88 d1       	rcall	.+784    	; 0x63c <tiny_dma_loop_mode_1>
			break;
     32c:	09 c0       	rjmp	.+18     	; 0x340 <main_sof_action+0x30>
		case 2:
			tiny_dma_loop_mode_2();
     32e:	27 d2       	rcall	.+1102   	; 0x77e <tiny_dma_loop_mode_2>
			break;
     330:	07 c0       	rjmp	.+14     	; 0x340 <main_sof_action+0x30>
		case 3:
			tiny_dma_loop_mode_3();
     332:	e3 d2       	rcall	.+1478   	; 0x8fa <tiny_dma_loop_mode_3>
			break;
     334:	05 c0       	rjmp	.+10     	; 0x340 <main_sof_action+0x30>
		case 4:
			tiny_dma_loop_mode_4();
     336:	78 d3       	rcall	.+1776   	; 0xa28 <tiny_dma_loop_mode_4>
			break;
     338:	03 c0       	rjmp	.+6      	; 0x340 <main_sof_action+0x30>
		case 6:
			tiny_dma_loop_mode_6();
     33a:	60 d4       	rcall	.+2240   	; 0xbfc <tiny_dma_loop_mode_6>
			break;
     33c:	01 c0       	rjmp	.+2      	; 0x340 <main_sof_action+0x30>
		case 7:
			tiny_dma_loop_mode_7();
     33e:	d6 d4       	rcall	.+2476   	; 0xcec <tiny_dma_loop_mode_7>
		break;
		default:
			break;
	}
		b1_state = !b1_state;
     340:	90 91 b4 20 	lds	r25, 0x20B4
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	91 11       	cpse	r25, r1
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	80 93 b4 20 	sts	0x20B4, r24
     34e:	08 95       	ret

00000350 <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 b5 20 	sts	0x20B5, r24
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     356:	42 e5       	ldi	r20, 0x52	; 82
     358:	51 e0       	ldi	r21, 0x01	; 1
     35a:	6e ee       	ldi	r22, 0xEE	; 238
     35c:	72 e0       	ldi	r23, 0x02	; 2
     35e:	86 e6       	ldi	r24, 0x66	; 102
     360:	96 e2       	ldi	r25, 0x26	; 38
     362:	af d6       	rcall	.+3422   	; 0x10c2 <udi_vendor_iso_in_run>
	return true;
}
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	08 95       	ret

00000368 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     368:	10 92 b5 20 	sts	0x20B5, r1
     36c:	08 95       	ret

0000036e <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	08 95       	ret

00000372 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	08 95       	ret

00000376 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     376:	e0 e0       	ldi	r30, 0x00	; 0
     378:	f2 e0       	ldi	r31, 0x02	; 2
     37a:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     37c:	98 2f       	mov	r25, r24
     37e:	9c 71       	andi	r25, 0x1C	; 28
     380:	93 68       	ori	r25, 0x83	; 131
     382:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     384:	88 1f       	adc	r24, r24
     386:	88 27       	eor	r24, r24
     388:	88 1f       	adc	r24, r24
     38a:	88 0f       	add	r24, r24
     38c:	81 a3       	std	Z+33, r24	; 0x21
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     38e:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     390:	16 a2       	std	Z+38, r1	; 0x26
     392:	08 95       	ret

00000394 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     394:	e0 e0       	ldi	r30, 0x00	; 0
     396:	f2 e0       	ldi	r31, 0x02	; 2
     398:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     39a:	83 68       	ori	r24, 0x83	; 131
     39c:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     39e:	80 e1       	ldi	r24, 0x10	; 16
     3a0:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     3a2:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     3a4:	16 aa       	std	Z+54, r1	; 0x36
     3a6:	08 95       	ret

000003a8 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     3a8:	e0 e0       	ldi	r30, 0x00	; 0
     3aa:	f2 e0       	ldi	r31, 0x02	; 2
     3ac:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     3ae:	83 e8       	ldi	r24, 0x83	; 131
     3b0:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     3b2:	8f e2       	ldi	r24, 0x2F	; 47
     3b4:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     3b6:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     3b8:	16 a6       	std	Z+46, r1	; 0x2e
     3ba:	08 95       	ret

000003bc <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	90 93 ca 01 	sts	0x01CA, r25
	result = pgm_read_byte(index);
     3c2:	e8 2f       	mov	r30, r24
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     3c8:	10 92 ca 01 	sts	0x01CA, r1

	return( result );
     3cc:	08 95       	ret

000003ce <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     3d2:	e0 e7       	ldi	r30, 0x70	; 112
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	91 81       	ldd	r25, Z+1	; 0x01
     3d8:	9d 7f       	andi	r25, 0xFD	; 253
     3da:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     3dc:	10 92 00 02 	sts	0x0200, r1
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     3e0:	62 30       	cpi	r22, 0x02	; 2
     3e2:	11 f4       	brne	.+4      	; 0x3e8 <tiny_adc_setup+0x1a>
     3e4:	9e e1       	ldi	r25, 0x1E	; 30
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <tiny_adc_setup+0x1c>
     3e8:	9c e1       	ldi	r25, 0x1C	; 28
     3ea:	e0 e0       	ldi	r30, 0x00	; 0
     3ec:	f2 e0       	ldi	r31, 0x02	; 2
     3ee:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     3f0:	90 e4       	ldi	r25, 0x40	; 64
     3f2:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     3f4:	88 23       	and	r24, r24
     3f6:	11 f0       	breq	.+4      	; 0x3fc <tiny_adc_setup+0x2e>
     3f8:	80 ec       	ldi	r24, 0xC0	; 192
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <tiny_adc_setup+0x30>
     3fc:	80 e4       	ldi	r24, 0x40	; 64
     3fe:	e0 e0       	ldi	r30, 0x00	; 0
     400:	f2 e0       	ldi	r31, 0x02	; 2
     402:	83 83       	std	Z+3, r24	; 0x03
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     404:	61 30       	cpi	r22, 0x01	; 1
     406:	11 f4       	brne	.+4      	; 0x40c <tiny_adc_setup+0x3e>
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	01 c0       	rjmp	.+2      	; 0x40e <tiny_adc_setup+0x40>
     40c:	83 e0       	ldi	r24, 0x03	; 3
     40e:	c0 e0       	ldi	r28, 0x00	; 0
     410:	d2 e0       	ldi	r29, 0x02	; 2
     412:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     414:	80 e2       	ldi	r24, 0x20	; 32
     416:	d2 df       	rcall	.-92     	; 0x3bc <ReadCalibrationByte>
     418:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     41a:	81 e2       	ldi	r24, 0x21	; 33
     41c:	cf df       	rcall	.-98     	; 0x3bc <ReadCalibrationByte>
     41e:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     420:	18 8e       	std	Y+24, r1	; 0x18
     422:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     428:	bf df       	rcall	.-130    	; 0x3a8 <tiny_adc_pid_setup>
		
	return;
}
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     434:	e0 e7       	ldi	r30, 0x70	; 112
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	82 81       	ldd	r24, Z+2	; 0x02
     43a:	8b 7f       	andi	r24, 0xFB	; 251
     43c:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     43e:	c0 e2       	ldi	r28, 0x20	; 32
     440:	d3 e0       	ldi	r29, 0x03	; 3
     442:	8d e0       	ldi	r24, 0x0D	; 13
     444:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     446:	80 e4       	ldi	r24, 0x40	; 64
     448:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     44a:	89 e0       	ldi	r24, 0x09	; 9
     44c:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     44e:	83 e3       	ldi	r24, 0x33	; 51
     450:	b5 df       	rcall	.-150    	; 0x3bc <ReadCalibrationByte>
     452:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     454:	82 e3       	ldi	r24, 0x32	; 50
     456:	b2 df       	rcall	.-156    	; 0x3bc <ReadCalibrationByte>
     458:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     45a:	87 e3       	ldi	r24, 0x37	; 55
     45c:	af df       	rcall	.-162    	; 0x3bc <ReadCalibrationByte>
     45e:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     460:	86 e3       	ldi	r24, 0x36	; 54
     462:	ac df       	rcall	.-168    	; 0x3bc <ReadCalibrationByte>
     464:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     466:	e0 e2       	ldi	r30, 0x20	; 32
     468:	f6 e0       	ldi	r31, 0x06	; 6
     46a:	80 81       	ld	r24, Z
     46c:	83 60       	ori	r24, 0x03	; 3
     46e:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     470:	14 82       	std	Z+4, r1	; 0x04
	
	

     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <tiny_dma_setup>:
#include "globals.h"


void tiny_dma_setup(void){
	//Turn on DMA
	PR.PRGEN &=0b111111110; //Turn on DMA clk
     478:	e0 e7       	ldi	r30, 0x70	; 112
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	80 81       	ld	r24, Z
     47e:	8e 7f       	andi	r24, 0xFE	; 254
     480:	80 83       	st	Z, r24
	DMA.CTRL = DMA_ENABLE_bm | DMA_PRIMODE_RR0123_gc;
     482:	80 e8       	ldi	r24, 0x80	; 128
     484:	80 93 00 01 	sts	0x0100, r24
     488:	08 95       	ret

0000048a <tiny_dma_flush>:
}
void tiny_dma_flush(void){
	DMA.CH0.CTRLA = 0x00;
     48a:	e0 e0       	ldi	r30, 0x00	; 0
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     490:	80 e4       	ldi	r24, 0x40	; 64
     492:	80 8b       	std	Z+16, r24	; 0x10

	DMA.CH1.CTRLA = 0x00;
     494:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     496:	80 a3       	std	Z+32, r24	; 0x20
	
	DMA.CH2.CTRLA = 0x00;
     498:	10 aa       	std	Z+48, r1	; 0x30
	DMA.CH2.CTRLA = DMA_CH_RESET_bm;
     49a:	80 ab       	std	Z+48, r24	; 0x30
	
	DMA.CH3.CTRLA = 0x00;
     49c:	e0 e4       	ldi	r30, 0x40	; 64
     49e:	f1 e0       	ldi	r31, 0x01	; 1
     4a0:	10 82       	st	Z, r1
	DMA.CH3.CTRLA = DMA_CH_RESET_bm;
     4a2:	80 83       	st	Z, r24
	
	b1_state = 0;
     4a4:	10 92 b4 20 	sts	0x20B4, r1
	b2_state = 0;
     4a8:	10 92 b3 20 	sts	0x20B3, r1
     4ac:	08 95       	ret

000004ae <tiny_dma_set_mode_0>:
}
void tiny_dma_set_mode_0(void){
	
	global_mode = 0;
     4ae:	10 92 00 20 	sts	0x2000, r1
	
	tiny_dma_flush();
     4b2:	eb df       	rcall	.-42     	; 0x48a <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     4b4:	e0 e0       	ldi	r30, 0x00	; 0
     4b6:	f1 e0       	ldi	r31, 0x01	; 1
     4b8:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     4ba:	44 e2       	ldi	r20, 0x24	; 36
     4bc:	40 ab       	std	Z+48, r20	; 0x30
	DMA.CH2.CTRLB = 0x00; //No interrupt for DacBuf!!
     4be:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     4c0:	39 e5       	ldi	r19, 0x59	; 89
     4c2:	32 ab       	std	Z+50, r19	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = auxDacBufLen;
     4c8:	80 91 02 20 	lds	r24, 0x2002
     4cc:	90 91 03 20 	lds	r25, 0x2003
     4d0:	84 ab       	std	Z+52, r24	; 0x34
     4d2:	95 ab       	std	Z+53, r25	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     4d4:	86 e6       	ldi	r24, 0x66	; 102
     4d6:	94 e2       	ldi	r25, 0x24	; 36
     4d8:	80 af       	std	Z+56, r24	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     4da:	91 af       	std	Z+57, r25	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     4dc:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     4de:	8b e3       	ldi	r24, 0x3B	; 59
     4e0:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     4e2:	23 e0       	ldi	r18, 0x03	; 3
     4e4:	20 93 3d 01 	sts	0x013D, r18
	DMA.CH2.DESTADDR2 = 0x00;
     4e8:	10 92 3e 01 	sts	0x013E, r1
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     4ec:	80 a9       	ldd	r24, Z+48	; 0x30
     4ee:	80 68       	ori	r24, 0x80	; 128
     4f0:	80 ab       	std	Z+48, r24	; 0x30
		
	DMA.CH3.REPCNT = 0; //Repeat forever!
     4f2:	10 92 46 01 	sts	0x0146, r1
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     4f6:	e0 e4       	ldi	r30, 0x40	; 64
     4f8:	f1 e0       	ldi	r31, 0x01	; 1
     4fa:	40 83       	st	Z, r20
	DMA.CH3.CTRLB = 0x00; //Hi interrupt on block complete
     4fc:	10 92 41 01 	sts	0x0141, r1
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     500:	30 93 42 01 	sts	0x0142, r19
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     504:	20 93 43 01 	sts	0x0143, r18
	DMA.CH3.TRFCNT = dacBuf_len;
     508:	80 91 04 20 	lds	r24, 0x2004
     50c:	90 91 05 20 	lds	r25, 0x2005
     510:	80 93 44 01 	sts	0x0144, r24
     514:	90 93 45 01 	sts	0x0145, r25

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     518:	86 e5       	ldi	r24, 0x56	; 86
     51a:	92 e2       	ldi	r25, 0x22	; 34
     51c:	80 93 48 01 	sts	0x0148, r24
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     520:	90 93 49 01 	sts	0x0149, r25
	DMA.CH3.SRCADDR2 = 0x00;
     524:	10 92 4a 01 	sts	0x014A, r1
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     528:	89 e3       	ldi	r24, 0x39	; 57
     52a:	80 93 4c 01 	sts	0x014C, r24
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     52e:	20 93 4d 01 	sts	0x014D, r18
	DMA.CH3.DESTADDR2 = 0x00;
     532:	10 92 4e 01 	sts	0x014E, r1
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     536:	80 81       	ld	r24, Z
     538:	80 68       	ori	r24, 0x80	; 128
     53a:	80 83       	st	Z, r24
     53c:	08 95       	ret

0000053e <tiny_dma_loop_mode_0>:
}

void tiny_dma_loop_mode_0(void){
	DMA.CH0.CTRLA = 0x00;
     53e:	e0 e0       	ldi	r30, 0x00	; 0
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     544:	80 e4       	ldi	r24, 0x40	; 64
     546:	80 8b       	std	Z+16, r24	; 0x10
	
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     548:	84 e0       	ldi	r24, 0x04	; 4
     54a:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CH0.CTRLB = 0x00; //No interrupt!
     54c:	11 8a       	std	Z+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     54e:	81 e9       	ldi	r24, 0x91	; 145
     550:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     552:	80 e1       	ldi	r24, 0x10	; 16
     554:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     556:	87 e7       	ldi	r24, 0x77	; 119
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	84 8b       	std	Z+20, r24	; 0x14
     55c:	95 8b       	std	Z+21, r25	; 0x15
	
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     55e:	84 e2       	ldi	r24, 0x24	; 36
     560:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     566:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     568:	40 91 b4 20 	lds	r20, 0x20B4
     56c:	8e ee       	ldi	r24, 0xEE	; 238
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	48 9f       	mul	r20, r24
     572:	90 01       	movw	r18, r0
     574:	49 9f       	mul	r20, r25
     576:	30 0d       	add	r19, r0
     578:	11 24       	eor	r1, r1
     57a:	2a 59       	subi	r18, 0x9A	; 154
     57c:	39 4d       	sbci	r19, 0xD9	; 217
     57e:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     580:	40 91 b4 20 	lds	r20, 0x20B4
     584:	48 9f       	mul	r20, r24
     586:	90 01       	movw	r18, r0
     588:	49 9f       	mul	r20, r25
     58a:	30 0d       	add	r19, r0
     58c:	11 24       	eor	r1, r1
     58e:	c9 01       	movw	r24, r18
     590:	8a 59       	subi	r24, 0x9A	; 154
     592:	99 4d       	sbci	r25, 0xD9	; 217
     594:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     596:	16 8e       	std	Z+30, r1	; 0x1e
	
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     598:	80 89       	ldd	r24, Z+16	; 0x10
     59a:	80 68       	ori	r24, 0x80	; 128
     59c:	80 8b       	std	Z+16, r24	; 0x10
     59e:	08 95       	ret

000005a0 <tiny_dma_set_mode_1>:
}

void tiny_dma_set_mode_1(void){
	
	global_mode = 1;
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	80 93 00 20 	sts	0x2000, r24
	
	tiny_dma_flush();
     5a6:	71 df       	rcall	.-286    	; 0x48a <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH2.CTRLA = 0x00;
     5a8:	e0 e0       	ldi	r30, 0x00	; 0
     5aa:	f1 e0       	ldi	r31, 0x01	; 1
     5ac:	10 aa       	std	Z+48, r1	; 0x30
	DMA.CH2.CTRLA = DMA_CH_RESET_bm;
     5ae:	80 e4       	ldi	r24, 0x40	; 64
     5b0:	80 ab       	std	Z+48, r24	; 0x30
		
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     5b2:	84 e0       	ldi	r24, 0x04	; 4
     5b4:	80 ab       	std	Z+48, r24	; 0x30
	DMA.CH2.CTRLB = 0x00;  //No int
     5b6:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     5b8:	12 aa       	std	Z+50, r1	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     5ba:	8b e4       	ldi	r24, 0x4B	; 75
     5bc:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = 0;
     5be:	14 aa       	std	Z+52, r1	; 0x34
     5c0:	15 aa       	std	Z+53, r1	; 0x35
	DMA.CH2.REPCNT = 0;
     5c2:	16 aa       	std	Z+54, r1	; 0x36
		
	DMA.CH2.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e2       	ldi	r25, 0x20	; 32
     5c8:	80 af       	std	Z+56, r24	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     5ca:	91 af       	std	Z+57, r25	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     5cc:	12 ae       	std	Z+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     5ce:	80 ea       	ldi	r24, 0xA0	; 160
     5d0:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     5d2:	88 e0       	ldi	r24, 0x08	; 8
     5d4:	80 93 3d 01 	sts	0x013D, r24
	DMA.CH2.DESTADDR2 = 0x00;
     5d8:	10 92 3e 01 	sts	0x013E, r1
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     5dc:	80 a9       	ldd	r24, Z+48	; 0x30
     5de:	80 6a       	ori	r24, 0xA0	; 160
     5e0:	80 ab       	std	Z+48, r24	; 0x30
		
	USARTC0.DATA = 0x55;
     5e2:	85 e5       	ldi	r24, 0x55	; 85
     5e4:	80 93 a0 08 	sts	0x08A0, r24

	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     5e8:	10 92 46 01 	sts	0x0146, r1
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     5ec:	e0 e4       	ldi	r30, 0x40	; 64
     5ee:	f1 e0       	ldi	r31, 0x01	; 1
     5f0:	84 e2       	ldi	r24, 0x24	; 36
     5f2:	80 83       	st	Z, r24
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     5f4:	10 92 41 01 	sts	0x0141, r1
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     5f8:	89 e5       	ldi	r24, 0x59	; 89
     5fa:	80 93 42 01 	sts	0x0142, r24
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	80 93 43 01 	sts	0x0143, r24
	DMA.CH3.TRFCNT = auxDacBufLen;
     604:	80 91 02 20 	lds	r24, 0x2002
     608:	90 91 03 20 	lds	r25, 0x2003
     60c:	80 93 44 01 	sts	0x0144, r24
     610:	90 93 45 01 	sts	0x0145, r25

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     614:	86 e6       	ldi	r24, 0x66	; 102
     616:	94 e2       	ldi	r25, 0x24	; 36
     618:	80 93 48 01 	sts	0x0148, r24
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     61c:	90 93 49 01 	sts	0x0149, r25
	DMA.CH3.SRCADDR2 = 0x00;
     620:	10 92 4a 01 	sts	0x014A, r1
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     624:	8b e3       	ldi	r24, 0x3B	; 59
     626:	80 93 4c 01 	sts	0x014C, r24
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	80 93 4d 01 	sts	0x014D, r24
	DMA.CH3.DESTADDR2 = 0x00;
     630:	10 92 4e 01 	sts	0x014E, r1
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     634:	80 81       	ld	r24, Z
     636:	80 68       	ori	r24, 0x80	; 128
     638:	80 83       	st	Z, r24
     63a:	08 95       	ret

0000063c <tiny_dma_loop_mode_1>:
	
}

void tiny_dma_loop_mode_1(void){
	DMA.CH0.CTRLA = 0x00;
     63c:	e0 e0       	ldi	r30, 0x00	; 0
     63e:	f1 e0       	ldi	r31, 0x01	; 1
     640:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     642:	a0 e4       	ldi	r26, 0x40	; 64
     644:	a0 8b       	std	Z+16, r26	; 0x10
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     646:	74 e0       	ldi	r23, 0x04	; 4
     648:	70 8b       	std	Z+16, r23	; 0x10
	DMA.CH0.CTRLB = 0x00; //No interrupt!
     64a:	11 8a       	std	Z+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     64c:	61 e9       	ldi	r22, 0x91	; 145
     64e:	62 8b       	std	Z+18, r22	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     650:	80 e1       	ldi	r24, 0x10	; 16
     652:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     654:	27 e7       	ldi	r18, 0x77	; 119
     656:	31 e0       	ldi	r19, 0x01	; 1
     658:	24 8b       	std	Z+20, r18	; 0x14
     65a:	35 8b       	std	Z+21, r19	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     65c:	84 e2       	ldi	r24, 0x24	; 36
     65e:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     664:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     666:	b0 91 b4 20 	lds	r27, 0x20B4
     66a:	8e ee       	ldi	r24, 0xEE	; 238
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	b8 9f       	mul	r27, r24
     670:	a0 01       	movw	r20, r0
     672:	b9 9f       	mul	r27, r25
     674:	50 0d       	add	r21, r0
     676:	11 24       	eor	r1, r1
     678:	4a 59       	subi	r20, 0x9A	; 154
     67a:	59 4d       	sbci	r21, 0xD9	; 217
     67c:	44 8f       	std	Z+28, r20	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     67e:	b0 91 b4 20 	lds	r27, 0x20B4
     682:	b8 9f       	mul	r27, r24
     684:	a0 01       	movw	r20, r0
     686:	b9 9f       	mul	r27, r25
     688:	50 0d       	add	r21, r0
     68a:	11 24       	eor	r1, r1
     68c:	4a 59       	subi	r20, 0x9A	; 154
     68e:	59 4d       	sbci	r21, 0xD9	; 217
     690:	55 8f       	std	Z+29, r21	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     692:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     694:	40 89       	ldd	r20, Z+16	; 0x10
     696:	40 68       	ori	r20, 0x80	; 128
     698:	40 8b       	std	Z+16, r20	; 0x10
	
	DMA.CH1.CTRLA = 0x00;
     69a:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     69c:	a0 a3       	std	Z+32, r26	; 0x20
		
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     69e:	70 a3       	std	Z+32, r23	; 0x20
	DMA.CH1.CTRLB = 0x00; //No interrupt
     6a0:	11 a2       	std	Z+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     6a2:	62 a3       	std	Z+34, r22	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     6a4:	4b e4       	ldi	r20, 0x4B	; 75
     6a6:	43 a3       	std	Z+35, r20	; 0x23
	DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     6a8:	24 a3       	std	Z+36, r18	; 0x24
     6aa:	35 a3       	std	Z+37, r19	; 0x25
		
	DMA.CH1.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF; //Source address is ADC
     6ac:	20 ea       	ldi	r18, 0xA0	; 160
     6ae:	20 a7       	std	Z+40, r18	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     6b0:	28 e0       	ldi	r18, 0x08	; 8
     6b2:	21 a7       	std	Z+41, r18	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     6b4:	12 a6       	std	Z+42, r1	; 0x2a
		
	DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     6b6:	40 91 b4 20 	lds	r20, 0x20B4
     6ba:	48 9f       	mul	r20, r24
     6bc:	90 01       	movw	r18, r0
     6be:	49 9f       	mul	r20, r25
     6c0:	30 0d       	add	r19, r0
     6c2:	11 24       	eor	r1, r1
     6c4:	23 52       	subi	r18, 0x23	; 35
     6c6:	38 4d       	sbci	r19, 0xD8	; 216
     6c8:	24 a7       	std	Z+44, r18	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     6ca:	40 91 b4 20 	lds	r20, 0x20B4
     6ce:	48 9f       	mul	r20, r24
     6d0:	90 01       	movw	r18, r0
     6d2:	49 9f       	mul	r20, r25
     6d4:	30 0d       	add	r19, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	c9 01       	movw	r24, r18
     6da:	83 52       	subi	r24, 0x23	; 35
     6dc:	98 4d       	sbci	r25, 0xD8	; 216
     6de:	95 a7       	std	Z+45, r25	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     6e0:	16 a6       	std	Z+46, r1	; 0x2e
		
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     6e2:	80 a1       	ldd	r24, Z+32	; 0x20
     6e4:	80 68       	ori	r24, 0x80	; 128
     6e6:	80 a3       	std	Z+32, r24	; 0x20
     6e8:	08 95       	ret

000006ea <tiny_dma_set_mode_2>:
}

void tiny_dma_set_mode_2(void){
     6ea:	cf 93       	push	r28
	
	global_mode = 2;
     6ec:	c2 e0       	ldi	r28, 0x02	; 2
     6ee:	c0 93 00 20 	sts	0x2000, r28
	
	tiny_dma_flush();
     6f2:	cb de       	rcall	.-618    	; 0x48a <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     6f4:	e0 e0       	ldi	r30, 0x00	; 0
     6f6:	f1 e0       	ldi	r31, 0x01	; 1
     6f8:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     6fa:	44 e2       	ldi	r20, 0x24	; 36
     6fc:	40 ab       	std	Z+48, r20	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     6fe:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     700:	39 e5       	ldi	r19, 0x59	; 89
     702:	32 ab       	std	Z+50, r19	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     704:	23 e0       	ldi	r18, 0x03	; 3
     706:	23 ab       	std	Z+51, r18	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     708:	80 91 04 20 	lds	r24, 0x2004
     70c:	90 91 05 20 	lds	r25, 0x2005
     710:	84 ab       	std	Z+52, r24	; 0x34
     712:	95 ab       	std	Z+53, r25	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     714:	86 e5       	ldi	r24, 0x56	; 86
     716:	92 e2       	ldi	r25, 0x22	; 34
     718:	80 af       	std	Z+56, r24	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     71a:	91 af       	std	Z+57, r25	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     71c:	12 ae       	std	Z+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     71e:	89 e3       	ldi	r24, 0x39	; 57
     720:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     722:	20 93 3d 01 	sts	0x013D, r18
	DMA.CH2.DESTADDR2 = 0x00;
     726:	10 92 3e 01 	sts	0x013E, r1
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     72a:	80 a9       	ldd	r24, Z+48	; 0x30
     72c:	80 68       	ori	r24, 0x80	; 128
     72e:	80 ab       	std	Z+48, r24	; 0x30

	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     730:	10 92 46 01 	sts	0x0146, r1
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     734:	e0 e4       	ldi	r30, 0x40	; 64
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	40 83       	st	Z, r20
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     73a:	10 92 41 01 	sts	0x0141, r1
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     73e:	30 93 42 01 	sts	0x0142, r19
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     742:	c0 93 43 01 	sts	0x0143, r28
	DMA.CH3.TRFCNT = auxDacBufLen;
     746:	80 91 02 20 	lds	r24, 0x2002
     74a:	90 91 03 20 	lds	r25, 0x2003
     74e:	80 93 44 01 	sts	0x0144, r24
     752:	90 93 45 01 	sts	0x0145, r25

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     756:	86 e6       	ldi	r24, 0x66	; 102
     758:	94 e2       	ldi	r25, 0x24	; 36
     75a:	80 93 48 01 	sts	0x0148, r24
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     75e:	90 93 49 01 	sts	0x0149, r25
	DMA.CH3.SRCADDR2 = 0x00;
     762:	10 92 4a 01 	sts	0x014A, r1
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     766:	8b e3       	ldi	r24, 0x3B	; 59
     768:	80 93 4c 01 	sts	0x014C, r24
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     76c:	20 93 4d 01 	sts	0x014D, r18
	DMA.CH3.DESTADDR2 = 0x00;
     770:	10 92 4e 01 	sts	0x014E, r1
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     774:	80 81       	ld	r24, Z
     776:	80 68       	ori	r24, 0x80	; 128
     778:	80 83       	st	Z, r24
	
}
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <tiny_dma_loop_mode_2>:

void tiny_dma_loop_mode_2(void){
     77e:	cf 93       	push	r28
	DMA.CH0.CTRLA = 0x00;
     780:	e0 e0       	ldi	r30, 0x00	; 0
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     786:	b0 e4       	ldi	r27, 0x40	; 64
     788:	b0 8b       	std	Z+16, r27	; 0x10
	
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     78a:	a4 e0       	ldi	r26, 0x04	; 4
     78c:	a0 8b       	std	Z+16, r26	; 0x10
	DMA.CH0.CTRLB = 0x00; //No interrupt!
     78e:	11 8a       	std	Z+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     790:	71 e9       	ldi	r23, 0x91	; 145
     792:	72 8b       	std	Z+18, r23	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     794:	80 e1       	ldi	r24, 0x10	; 16
     796:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     798:	27 e7       	ldi	r18, 0x77	; 119
     79a:	31 e0       	ldi	r19, 0x01	; 1
     79c:	24 8b       	std	Z+20, r18	; 0x14
     79e:	35 8b       	std	Z+21, r19	; 0x15
	
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     7a0:	84 e2       	ldi	r24, 0x24	; 36
     7a2:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     7a4:	62 e0       	ldi	r22, 0x02	; 2
     7a6:	61 8f       	std	Z+25, r22	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     7a8:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     7aa:	c0 91 b4 20 	lds	r28, 0x20B4
     7ae:	8e ee       	ldi	r24, 0xEE	; 238
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	c8 9f       	mul	r28, r24
     7b4:	a0 01       	movw	r20, r0
     7b6:	c9 9f       	mul	r28, r25
     7b8:	50 0d       	add	r21, r0
     7ba:	11 24       	eor	r1, r1
     7bc:	4a 59       	subi	r20, 0x9A	; 154
     7be:	59 4d       	sbci	r21, 0xD9	; 217
     7c0:	44 8f       	std	Z+28, r20	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     7c2:	c0 91 b4 20 	lds	r28, 0x20B4
     7c6:	c8 9f       	mul	r28, r24
     7c8:	a0 01       	movw	r20, r0
     7ca:	c9 9f       	mul	r28, r25
     7cc:	50 0d       	add	r21, r0
     7ce:	11 24       	eor	r1, r1
     7d0:	4a 59       	subi	r20, 0x9A	; 154
     7d2:	59 4d       	sbci	r21, 0xD9	; 217
     7d4:	55 8f       	std	Z+29, r21	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     7d6:	16 8e       	std	Z+30, r1	; 0x1e
	
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     7d8:	40 89       	ldd	r20, Z+16	; 0x10
     7da:	40 68       	ori	r20, 0x80	; 128
     7dc:	40 8b       	std	Z+16, r20	; 0x10
	
	DMA.CH1.CTRLA = 0x00;
     7de:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     7e0:	b0 a3       	std	Z+32, r27	; 0x20
		
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     7e2:	a0 a3       	std	Z+32, r26	; 0x20
	DMA.CH1.CTRLB = 0x00; //No interrupt!
     7e4:	11 a2       	std	Z+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     7e6:	72 a3       	std	Z+34, r23	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH2_gc;	//Triggered from ADCA channel 0
     7e8:	42 e1       	ldi	r20, 0x12	; 18
     7ea:	43 a3       	std	Z+35, r20	; 0x23
	DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     7ec:	24 a3       	std	Z+36, r18	; 0x24
     7ee:	35 a3       	std	Z+37, r19	; 0x25
		
	DMA.CH1.SRCADDR0 = (( (uint16_t) &ADCA.CH2.RESL) >> 0) & 0xFF; //Source address is ADC
     7f0:	24 e3       	ldi	r18, 0x34	; 52
     7f2:	20 a7       	std	Z+40, r18	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &ADCA.CH2.RESL) >> 8) & 0xFF;
     7f4:	61 a7       	std	Z+41, r22	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     7f6:	12 a6       	std	Z+42, r1	; 0x2a
		
	DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     7f8:	40 91 b4 20 	lds	r20, 0x20B4
     7fc:	48 9f       	mul	r20, r24
     7fe:	90 01       	movw	r18, r0
     800:	49 9f       	mul	r20, r25
     802:	30 0d       	add	r19, r0
     804:	11 24       	eor	r1, r1
     806:	23 52       	subi	r18, 0x23	; 35
     808:	38 4d       	sbci	r19, 0xD8	; 216
     80a:	24 a7       	std	Z+44, r18	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     80c:	40 91 b4 20 	lds	r20, 0x20B4
     810:	48 9f       	mul	r20, r24
     812:	90 01       	movw	r18, r0
     814:	49 9f       	mul	r20, r25
     816:	30 0d       	add	r19, r0
     818:	11 24       	eor	r1, r1
     81a:	c9 01       	movw	r24, r18
     81c:	83 52       	subi	r24, 0x23	; 35
     81e:	98 4d       	sbci	r25, 0xD8	; 216
     820:	95 a7       	std	Z+45, r25	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     822:	16 a6       	std	Z+46, r1	; 0x2e
		
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     824:	80 a1       	ldd	r24, Z+32	; 0x20
     826:	80 68       	ori	r24, 0x80	; 128
     828:	80 a3       	std	Z+32, r24	; 0x20
}
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <tiny_dma_set_mode_3>:



void tiny_dma_set_mode_3(void){
     82e:	cf 93       	push	r28
	
	global_mode = 3;
     830:	c3 e0       	ldi	r28, 0x03	; 3
     832:	c0 93 00 20 	sts	0x2000, r28
		
	tiny_dma_flush();	
     836:	29 de       	rcall	.-942    	; 0x48a <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH1.CTRLA = 0x00;
     838:	e0 e0       	ldi	r30, 0x00	; 0
     83a:	f1 e0       	ldi	r31, 0x01	; 1
     83c:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     83e:	80 e4       	ldi	r24, 0x40	; 64
     840:	80 a3       	std	Z+32, r24	; 0x20
	
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     842:	84 e0       	ldi	r24, 0x04	; 4
     844:	80 a3       	std	Z+32, r24	; 0x20
	DMA.CH1.CTRLB = 0x00;  //No int
     846:	11 a2       	std	Z+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     848:	12 a2       	std	Z+34, r1	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     84a:	8b e4       	ldi	r24, 0x4B	; 75
     84c:	83 a3       	std	Z+35, r24	; 0x23
	DMA.CH1.TRFCNT = 0;
     84e:	14 a2       	std	Z+36, r1	; 0x24
     850:	15 a2       	std	Z+37, r1	; 0x25
	DMA.CH1.REPCNT = 0;
     852:	16 a2       	std	Z+38, r1	; 0x26
	
	DMA.CH1.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e2       	ldi	r25, 0x20	; 32
     858:	80 a7       	std	Z+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     85a:	91 a7       	std	Z+41, r25	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     85c:	12 a6       	std	Z+42, r1	; 0x2a
	
	DMA.CH1.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     85e:	80 ea       	ldi	r24, 0xA0	; 160
     860:	84 a7       	std	Z+44, r24	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     862:	88 e0       	ldi	r24, 0x08	; 8
     864:	85 a7       	std	Z+45, r24	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     866:	16 a6       	std	Z+46, r1	; 0x2e
	
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     868:	80 a1       	ldd	r24, Z+32	; 0x20
     86a:	80 6a       	ori	r24, 0xA0	; 160
     86c:	80 a3       	std	Z+32, r24	; 0x20
	
	USARTC0.DATA = 0x55;
     86e:	85 e5       	ldi	r24, 0x55	; 85
     870:	80 93 a0 08 	sts	0x08A0, r24
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     874:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     876:	34 e2       	ldi	r19, 0x24	; 36
     878:	30 ab       	std	Z+48, r19	; 0x30
	DMA.CH2.CTRLB = 0x00; //No interrupt for DacBuf!!
     87a:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     87c:	29 e5       	ldi	r18, 0x59	; 89
     87e:	22 ab       	std	Z+50, r18	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = auxDacBufLen;
     884:	80 91 02 20 	lds	r24, 0x2002
     888:	90 91 03 20 	lds	r25, 0x2003
     88c:	84 ab       	std	Z+52, r24	; 0x34
     88e:	95 ab       	std	Z+53, r25	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     890:	86 e6       	ldi	r24, 0x66	; 102
     892:	94 e2       	ldi	r25, 0x24	; 36
     894:	80 af       	std	Z+56, r24	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     896:	91 af       	std	Z+57, r25	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     898:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     89a:	8b e3       	ldi	r24, 0x3B	; 59
     89c:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     89e:	c0 93 3d 01 	sts	0x013D, r28
	DMA.CH2.DESTADDR2 = 0x00;
     8a2:	10 92 3e 01 	sts	0x013E, r1
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     8a6:	80 a9       	ldd	r24, Z+48	; 0x30
     8a8:	80 68       	ori	r24, 0x80	; 128
     8aa:	80 ab       	std	Z+48, r24	; 0x30
	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     8ac:	10 92 46 01 	sts	0x0146, r1
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     8b0:	e0 e4       	ldi	r30, 0x40	; 64
     8b2:	f1 e0       	ldi	r31, 0x01	; 1
     8b4:	30 83       	st	Z, r19
	DMA.CH3.CTRLB = 0x00; //Hi interrupt on block complete
     8b6:	10 92 41 01 	sts	0x0141, r1
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     8ba:	20 93 42 01 	sts	0x0142, r18
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     8be:	c0 93 43 01 	sts	0x0143, r28
	DMA.CH3.TRFCNT = dacBuf_len;
     8c2:	80 91 04 20 	lds	r24, 0x2004
     8c6:	90 91 05 20 	lds	r25, 0x2005
     8ca:	80 93 44 01 	sts	0x0144, r24
     8ce:	90 93 45 01 	sts	0x0145, r25

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     8d2:	86 e5       	ldi	r24, 0x56	; 86
     8d4:	92 e2       	ldi	r25, 0x22	; 34
     8d6:	80 93 48 01 	sts	0x0148, r24
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     8da:	90 93 49 01 	sts	0x0149, r25
	DMA.CH3.SRCADDR2 = 0x00;
     8de:	10 92 4a 01 	sts	0x014A, r1
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     8e2:	89 e3       	ldi	r24, 0x39	; 57
     8e4:	80 93 4c 01 	sts	0x014C, r24
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     8e8:	c0 93 4d 01 	sts	0x014D, r28
	DMA.CH3.DESTADDR2 = 0x00;
     8ec:	10 92 4e 01 	sts	0x014E, r1
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     8f0:	80 81       	ld	r24, Z
     8f2:	80 68       	ori	r24, 0x80	; 128
     8f4:	80 83       	st	Z, r24

}
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <tiny_dma_loop_mode_3>:

void tiny_dma_loop_mode_3(void){
	//Actual data being transferred
	DMA.CH0.CTRLA = 0x00;
     8fa:	e0 e0       	ldi	r30, 0x00	; 0
     8fc:	f1 e0       	ldi	r31, 0x01	; 1
     8fe:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     900:	80 e4       	ldi	r24, 0x40	; 64
     902:	80 8b       	std	Z+16, r24	; 0x10
	
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     904:	84 e0       	ldi	r24, 0x04	; 4
     906:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CH0.CTRLB = 0x00; //No interrupt
     908:	11 8a       	std	Z+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     90a:	81 e9       	ldi	r24, 0x91	; 145
     90c:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     90e:	8b e4       	ldi	r24, 0x4B	; 75
     910:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     912:	87 e7       	ldi	r24, 0x77	; 119
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	84 8b       	std	Z+20, r24	; 0x14
     918:	95 8b       	std	Z+21, r25	; 0x15
	
	DMA.CH0.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF; //Source address is ADC
     91a:	80 ea       	ldi	r24, 0xA0	; 160
     91c:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     91e:	88 e0       	ldi	r24, 0x08	; 8
     920:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     922:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state*PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     924:	40 91 b4 20 	lds	r20, 0x20B4
     928:	8e ee       	ldi	r24, 0xEE	; 238
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	48 9f       	mul	r20, r24
     92e:	90 01       	movw	r18, r0
     930:	49 9f       	mul	r20, r25
     932:	30 0d       	add	r19, r0
     934:	11 24       	eor	r1, r1
     936:	2a 59       	subi	r18, 0x9A	; 154
     938:	39 4d       	sbci	r19, 0xD9	; 217
     93a:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state*PACKET_SIZE]) >> 8) & 0xFF;
     93c:	40 91 b4 20 	lds	r20, 0x20B4
     940:	48 9f       	mul	r20, r24
     942:	90 01       	movw	r18, r0
     944:	49 9f       	mul	r20, r25
     946:	30 0d       	add	r19, r0
     948:	11 24       	eor	r1, r1
     94a:	c9 01       	movw	r24, r18
     94c:	8a 59       	subi	r24, 0x9A	; 154
     94e:	99 4d       	sbci	r25, 0xD9	; 217
     950:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     952:	16 8e       	std	Z+30, r1	; 0x1e
	
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     954:	80 89       	ldd	r24, Z+16	; 0x10
     956:	80 68       	ori	r24, 0x80	; 128
     958:	80 8b       	std	Z+16, r24	; 0x10
     95a:	08 95       	ret

0000095c <tiny_dma_set_mode_4>:
}

void tiny_dma_set_mode_4(void){
     95c:	cf 93       	push	r28
	
	global_mode = 4;
     95e:	c4 e0       	ldi	r28, 0x04	; 4
     960:	c0 93 00 20 	sts	0x2000, r28
	
	tiny_dma_flush();
     964:	92 dd       	rcall	.-1244   	; 0x48a <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH1.CTRLA = 0x00;
     966:	e0 e0       	ldi	r30, 0x00	; 0
     968:	f1 e0       	ldi	r31, 0x01	; 1
     96a:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     96c:	80 e4       	ldi	r24, 0x40	; 64
     96e:	80 a3       	std	Z+32, r24	; 0x20
	
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     970:	c0 a3       	std	Z+32, r28	; 0x20
	DMA.CH1.CTRLB = 0x00;  //No int
     972:	11 a2       	std	Z+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     974:	12 a2       	std	Z+34, r1	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     976:	8b e4       	ldi	r24, 0x4B	; 75
     978:	83 a3       	std	Z+35, r24	; 0x23
	DMA.CH1.TRFCNT = 0;
     97a:	14 a2       	std	Z+36, r1	; 0x24
     97c:	15 a2       	std	Z+37, r1	; 0x25
	DMA.CH1.REPCNT = 0;
     97e:	16 a2       	std	Z+38, r1	; 0x26
	
	DMA.CH1.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e2       	ldi	r25, 0x20	; 32
     984:	80 a7       	std	Z+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     986:	91 a7       	std	Z+41, r25	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     988:	12 a6       	std	Z+42, r1	; 0x2a
	
	DMA.CH1.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     98a:	80 ea       	ldi	r24, 0xA0	; 160
     98c:	84 a7       	std	Z+44, r24	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     98e:	88 e0       	ldi	r24, 0x08	; 8
     990:	85 a7       	std	Z+45, r24	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     992:	16 a6       	std	Z+46, r1	; 0x2e
	
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     994:	80 a1       	ldd	r24, Z+32	; 0x20
     996:	80 6a       	ori	r24, 0xA0	; 160
     998:	80 a3       	std	Z+32, r24	; 0x20
	
	USARTC0.DATA = 0x55;
     99a:	85 e5       	ldi	r24, 0x55	; 85
     99c:	80 93 a0 08 	sts	0x08A0, r24
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     9a0:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     9a2:	44 e2       	ldi	r20, 0x24	; 36
     9a4:	40 ab       	std	Z+48, r20	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     9a6:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     9a8:	39 e5       	ldi	r19, 0x59	; 89
     9aa:	32 ab       	std	Z+50, r19	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     9ac:	23 e0       	ldi	r18, 0x03	; 3
     9ae:	23 ab       	std	Z+51, r18	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     9b0:	80 91 04 20 	lds	r24, 0x2004
     9b4:	90 91 05 20 	lds	r25, 0x2005
     9b8:	84 ab       	std	Z+52, r24	; 0x34
     9ba:	95 ab       	std	Z+53, r25	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     9bc:	86 e5       	ldi	r24, 0x56	; 86
     9be:	92 e2       	ldi	r25, 0x22	; 34
     9c0:	80 af       	std	Z+56, r24	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     9c2:	91 af       	std	Z+57, r25	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     9c4:	12 ae       	std	Z+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     9c6:	89 e3       	ldi	r24, 0x39	; 57
     9c8:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     9ca:	20 93 3d 01 	sts	0x013D, r18
	DMA.CH2.DESTADDR2 = 0x00;
     9ce:	10 92 3e 01 	sts	0x013E, r1
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     9d2:	80 a9       	ldd	r24, Z+48	; 0x30
     9d4:	80 68       	ori	r24, 0x80	; 128
     9d6:	80 ab       	std	Z+48, r24	; 0x30

			
	DMA.CH3.REPCNT = 0; //Repeat forever!
     9d8:	10 92 46 01 	sts	0x0146, r1
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     9dc:	e0 e4       	ldi	r30, 0x40	; 64
     9de:	f1 e0       	ldi	r31, 0x01	; 1
     9e0:	40 83       	st	Z, r20
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     9e2:	10 92 41 01 	sts	0x0141, r1
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     9e6:	30 93 42 01 	sts	0x0142, r19
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	80 93 43 01 	sts	0x0143, r24
	DMA.CH3.TRFCNT = auxDacBufLen;
     9f0:	80 91 02 20 	lds	r24, 0x2002
     9f4:	90 91 03 20 	lds	r25, 0x2003
     9f8:	80 93 44 01 	sts	0x0144, r24
     9fc:	90 93 45 01 	sts	0x0145, r25

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     a00:	86 e6       	ldi	r24, 0x66	; 102
     a02:	94 e2       	ldi	r25, 0x24	; 36
     a04:	80 93 48 01 	sts	0x0148, r24
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     a08:	90 93 49 01 	sts	0x0149, r25
	DMA.CH3.SRCADDR2 = 0x00;
     a0c:	10 92 4a 01 	sts	0x014A, r1
		
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     a10:	8b e3       	ldi	r24, 0x3B	; 59
     a12:	80 93 4c 01 	sts	0x014C, r24
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     a16:	20 93 4d 01 	sts	0x014D, r18
	DMA.CH3.DESTADDR2 = 0x00;
     a1a:	10 92 4e 01 	sts	0x014E, r1
		
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     a1e:	80 81       	ld	r24, Z
     a20:	80 68       	ori	r24, 0x80	; 128
     a22:	80 83       	st	Z, r24
}
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <tiny_dma_loop_mode_4>:

void tiny_dma_loop_mode_4(void){
     a28:	cf 93       	push	r28
	//Actual data being transferred
	DMA.CH0.CTRLA = 0x00;
     a2a:	e0 e0       	ldi	r30, 0x00	; 0
     a2c:	f1 e0       	ldi	r31, 0x01	; 1
     a2e:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     a30:	b0 e4       	ldi	r27, 0x40	; 64
     a32:	b0 8b       	std	Z+16, r27	; 0x10
	
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     a34:	a4 e0       	ldi	r26, 0x04	; 4
     a36:	a0 8b       	std	Z+16, r26	; 0x10
	DMA.CH0.CTRLB = 0x00; //No interrupt
     a38:	11 8a       	std	Z+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     a3a:	71 e9       	ldi	r23, 0x91	; 145
     a3c:	72 8b       	std	Z+18, r23	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     a3e:	8b e4       	ldi	r24, 0x4B	; 75
     a40:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     a42:	27 e7       	ldi	r18, 0x77	; 119
     a44:	31 e0       	ldi	r19, 0x01	; 1
     a46:	24 8b       	std	Z+20, r18	; 0x14
     a48:	35 8b       	std	Z+21, r19	; 0x15
	
	DMA.CH0.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF; //Source address is ADC
     a4a:	80 ea       	ldi	r24, 0xA0	; 160
     a4c:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     a4e:	68 e0       	ldi	r22, 0x08	; 8
     a50:	61 8f       	std	Z+25, r22	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     a52:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state*PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     a54:	c0 91 b4 20 	lds	r28, 0x20B4
     a58:	8e ee       	ldi	r24, 0xEE	; 238
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	c8 9f       	mul	r28, r24
     a5e:	a0 01       	movw	r20, r0
     a60:	c9 9f       	mul	r28, r25
     a62:	50 0d       	add	r21, r0
     a64:	11 24       	eor	r1, r1
     a66:	4a 59       	subi	r20, 0x9A	; 154
     a68:	59 4d       	sbci	r21, 0xD9	; 217
     a6a:	44 8f       	std	Z+28, r20	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state*PACKET_SIZE]) >> 8) & 0xFF;
     a6c:	c0 91 b4 20 	lds	r28, 0x20B4
     a70:	c8 9f       	mul	r28, r24
     a72:	a0 01       	movw	r20, r0
     a74:	c9 9f       	mul	r28, r25
     a76:	50 0d       	add	r21, r0
     a78:	11 24       	eor	r1, r1
     a7a:	4a 59       	subi	r20, 0x9A	; 154
     a7c:	59 4d       	sbci	r21, 0xD9	; 217
     a7e:	55 8f       	std	Z+29, r21	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     a80:	16 8e       	std	Z+30, r1	; 0x1e
	
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     a82:	40 89       	ldd	r20, Z+16	; 0x10
     a84:	40 68       	ori	r20, 0x80	; 128
     a86:	40 8b       	std	Z+16, r20	; 0x10
	
	DMA.CH2.CTRLA = 0x00;
     a88:	10 aa       	std	Z+48, r1	; 0x30
	DMA.CH2.CTRLA = DMA_CH_RESET_bm;
     a8a:	b0 ab       	std	Z+48, r27	; 0x30
		
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     a8c:	a0 ab       	std	Z+48, r26	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     a8e:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     a90:	72 ab       	std	Z+50, r23	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_SPIC_gc;
     a92:	4a e4       	ldi	r20, 0x4A	; 74
     a94:	43 ab       	std	Z+51, r20	; 0x33
	DMA.CH2.TRFCNT = HALFPACKET_SIZE;
     a96:	24 ab       	std	Z+52, r18	; 0x34
     a98:	35 ab       	std	Z+53, r19	; 0x35
		
	DMA.CH2.SRCADDR0 = (( (uint16_t) &SPIC.DATA) >> 0) & 0xFF; //Source address is ADC
     a9a:	23 ec       	ldi	r18, 0xC3	; 195
     a9c:	20 af       	std	Z+56, r18	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &SPIC.DATA) >> 8) & 0xFF;
     a9e:	61 af       	std	Z+57, r22	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     aa0:	12 ae       	std	Z+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     aa2:	40 91 b4 20 	lds	r20, 0x20B4
     aa6:	48 9f       	mul	r20, r24
     aa8:	90 01       	movw	r18, r0
     aaa:	49 9f       	mul	r20, r25
     aac:	30 0d       	add	r19, r0
     aae:	11 24       	eor	r1, r1
     ab0:	23 52       	subi	r18, 0x23	; 35
     ab2:	38 4d       	sbci	r19, 0xD8	; 216
     ab4:	24 af       	std	Z+60, r18	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     ab6:	40 91 b4 20 	lds	r20, 0x20B4
     aba:	48 9f       	mul	r20, r24
     abc:	90 01       	movw	r18, r0
     abe:	49 9f       	mul	r20, r25
     ac0:	30 0d       	add	r19, r0
     ac2:	11 24       	eor	r1, r1
     ac4:	c9 01       	movw	r24, r18
     ac6:	83 52       	subi	r24, 0x23	; 35
     ac8:	98 4d       	sbci	r25, 0xD8	; 216
     aca:	90 93 3d 01 	sts	0x013D, r25
	DMA.CH2.DESTADDR2 = 0x00;
     ace:	10 92 3e 01 	sts	0x013E, r1
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ad2:	80 a9       	ldd	r24, Z+48	; 0x30
     ad4:	80 68       	ori	r24, 0x80	; 128
     ad6:	80 ab       	std	Z+48, r24	; 0x30
}
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret

00000adc <tiny_dma_set_mode_5>:
	
	
void tiny_dma_set_mode_5(void){
	global_mode = 5;
     adc:	85 e0       	ldi	r24, 0x05	; 5
     ade:	80 93 00 20 	sts	0x2000, r24
		
	tiny_dma_flush();
     ae2:	d3 dc       	rcall	.-1626   	; 0x48a <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     ae4:	e0 e0       	ldi	r30, 0x00	; 0
     ae6:	f1 e0       	ldi	r31, 0x01	; 1
     ae8:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     aea:	54 e2       	ldi	r21, 0x24	; 36
     aec:	50 ab       	std	Z+48, r21	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     aee:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     af0:	49 e5       	ldi	r20, 0x59	; 89
     af2:	42 ab       	std	Z+50, r20	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     af4:	23 e0       	ldi	r18, 0x03	; 3
     af6:	23 ab       	std	Z+51, r18	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     af8:	80 91 04 20 	lds	r24, 0x2004
     afc:	90 91 05 20 	lds	r25, 0x2005
     b00:	84 ab       	std	Z+52, r24	; 0x34
     b02:	95 ab       	std	Z+53, r25	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     b04:	86 e5       	ldi	r24, 0x56	; 86
     b06:	92 e2       	ldi	r25, 0x22	; 34
     b08:	80 af       	std	Z+56, r24	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     b0a:	91 af       	std	Z+57, r25	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     b0c:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     b0e:	39 e3       	ldi	r19, 0x39	; 57
     b10:	34 af       	std	Z+60, r19	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     b12:	20 93 3d 01 	sts	0x013D, r18
	DMA.CH2.DESTADDR2 = 0x00;
     b16:	10 92 3e 01 	sts	0x013E, r1
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     b1a:	80 a9       	ldd	r24, Z+48	; 0x30
     b1c:	80 68       	ori	r24, 0x80	; 128
     b1e:	80 ab       	std	Z+48, r24	; 0x30
		
	DMA.CH3.REPCNT = 0; //Repeat forever!
     b20:	10 92 46 01 	sts	0x0146, r1
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     b24:	e0 e4       	ldi	r30, 0x40	; 64
     b26:	f1 e0       	ldi	r31, 0x01	; 1
     b28:	50 83       	st	Z, r21
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     b2a:	10 92 41 01 	sts	0x0141, r1
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     b2e:	40 93 42 01 	sts	0x0142, r20
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     b32:	20 93 43 01 	sts	0x0143, r18
	DMA.CH3.TRFCNT = dacBuf_len;
     b36:	80 91 04 20 	lds	r24, 0x2004
     b3a:	90 91 05 20 	lds	r25, 0x2005
     b3e:	80 93 44 01 	sts	0x0144, r24
     b42:	90 93 45 01 	sts	0x0145, r25

	DMA.CH3.SRCADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF; //Source address is dacbuf
     b46:	86 e6       	ldi	r24, 0x66	; 102
     b48:	96 e2       	ldi	r25, 0x26	; 38
     b4a:	80 93 48 01 	sts	0x0148, r24
	DMA.CH3.SRCADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     b4e:	90 93 49 01 	sts	0x0149, r25
	DMA.CH3.SRCADDR2 = 0x00;
     b52:	10 92 4a 01 	sts	0x014A, r1
		
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     b56:	30 93 4c 01 	sts	0x014C, r19
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     b5a:	20 93 4d 01 	sts	0x014D, r18
	DMA.CH3.DESTADDR2 = 0x00;
     b5e:	10 92 4e 01 	sts	0x014E, r1
		
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	80 83       	st	Z, r24
     b68:	08 95       	ret

00000b6a <tiny_dma_set_mode_6>:
}

void tiny_dma_set_mode_6(void){
	
	global_mode = 6;
     b6a:	86 e0       	ldi	r24, 0x06	; 6
     b6c:	80 93 00 20 	sts	0x2000, r24
	
	tiny_dma_flush();
     b70:	8c dc       	rcall	.-1768   	; 0x48a <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     b72:	e0 e0       	ldi	r30, 0x00	; 0
     b74:	f1 e0       	ldi	r31, 0x01	; 1
     b76:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     b78:	44 e2       	ldi	r20, 0x24	; 36
     b7a:	40 ab       	std	Z+48, r20	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     b7c:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     b7e:	39 e5       	ldi	r19, 0x59	; 89
     b80:	32 ab       	std	Z+50, r19	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     b82:	23 e0       	ldi	r18, 0x03	; 3
     b84:	23 ab       	std	Z+51, r18	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     b86:	80 91 04 20 	lds	r24, 0x2004
     b8a:	90 91 05 20 	lds	r25, 0x2005
     b8e:	84 ab       	std	Z+52, r24	; 0x34
     b90:	95 ab       	std	Z+53, r25	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     b92:	86 e5       	ldi	r24, 0x56	; 86
     b94:	92 e2       	ldi	r25, 0x22	; 34
     b96:	80 af       	std	Z+56, r24	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     b98:	91 af       	std	Z+57, r25	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     b9a:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     b9c:	89 e3       	ldi	r24, 0x39	; 57
     b9e:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     ba0:	20 93 3d 01 	sts	0x013D, r18
	DMA.CH2.DESTADDR2 = 0x00;
     ba4:	10 92 3e 01 	sts	0x013E, r1
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ba8:	80 a9       	ldd	r24, Z+48	; 0x30
     baa:	80 68       	ori	r24, 0x80	; 128
     bac:	80 ab       	std	Z+48, r24	; 0x30
	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     bae:	10 92 46 01 	sts	0x0146, r1
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     bb2:	e0 e4       	ldi	r30, 0x40	; 64
     bb4:	f1 e0       	ldi	r31, 0x01	; 1
     bb6:	40 83       	st	Z, r20
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     bb8:	10 92 41 01 	sts	0x0141, r1
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     bbc:	30 93 42 01 	sts	0x0142, r19
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	80 93 43 01 	sts	0x0143, r24
	DMA.CH3.TRFCNT = auxDacBufLen;
     bc6:	80 91 02 20 	lds	r24, 0x2002
     bca:	90 91 03 20 	lds	r25, 0x2003
     bce:	80 93 44 01 	sts	0x0144, r24
     bd2:	90 93 45 01 	sts	0x0145, r25

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     bd6:	86 e6       	ldi	r24, 0x66	; 102
     bd8:	94 e2       	ldi	r25, 0x24	; 36
     bda:	80 93 48 01 	sts	0x0148, r24
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     bde:	90 93 49 01 	sts	0x0149, r25
	DMA.CH3.SRCADDR2 = 0x00;
     be2:	10 92 4a 01 	sts	0x014A, r1
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     be6:	8b e3       	ldi	r24, 0x3B	; 59
     be8:	80 93 4c 01 	sts	0x014C, r24
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     bec:	20 93 4d 01 	sts	0x014D, r18
	DMA.CH3.DESTADDR2 = 0x00;
     bf0:	10 92 4e 01 	sts	0x014E, r1
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     bf4:	80 81       	ld	r24, Z
     bf6:	80 68       	ori	r24, 0x80	; 128
     bf8:	80 83       	st	Z, r24
     bfa:	08 95       	ret

00000bfc <tiny_dma_loop_mode_6>:
	
}

void tiny_dma_loop_mode_6(void){
	DMA.CH0.CTRLA = 0x00;
     bfc:	e0 e0       	ldi	r30, 0x00	; 0
     bfe:	f1 e0       	ldi	r31, 0x01	; 1
     c00:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     c02:	80 e4       	ldi	r24, 0x40	; 64
     c04:	80 8b       	std	Z+16, r24	; 0x10
	
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CH0.CTRLB = 0x00; //No interrupt!
     c0a:	11 8a       	std	Z+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     c0c:	81 e9       	ldi	r24, 0x91	; 145
     c0e:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     c10:	80 e1       	ldi	r24, 0x10	; 16
     c12:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = PACKET_SIZE;
     c14:	8e ee       	ldi	r24, 0xEE	; 238
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	84 8b       	std	Z+20, r24	; 0x14
     c1a:	95 8b       	std	Z+21, r25	; 0x15
	
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     c1c:	24 e2       	ldi	r18, 0x24	; 36
     c1e:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     c20:	22 e0       	ldi	r18, 0x02	; 2
     c22:	21 8f       	std	Z+25, r18	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     c24:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     c26:	40 91 b4 20 	lds	r20, 0x20B4
     c2a:	48 9f       	mul	r20, r24
     c2c:	90 01       	movw	r18, r0
     c2e:	49 9f       	mul	r20, r25
     c30:	30 0d       	add	r19, r0
     c32:	11 24       	eor	r1, r1
     c34:	2a 59       	subi	r18, 0x9A	; 154
     c36:	39 4d       	sbci	r19, 0xD9	; 217
     c38:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     c3a:	40 91 b4 20 	lds	r20, 0x20B4
     c3e:	48 9f       	mul	r20, r24
     c40:	90 01       	movw	r18, r0
     c42:	49 9f       	mul	r20, r25
     c44:	30 0d       	add	r19, r0
     c46:	11 24       	eor	r1, r1
     c48:	c9 01       	movw	r24, r18
     c4a:	8a 59       	subi	r24, 0x9A	; 154
     c4c:	99 4d       	sbci	r25, 0xD9	; 217
     c4e:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     c50:	16 8e       	std	Z+30, r1	; 0x1e
	
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     c52:	80 89       	ldd	r24, Z+16	; 0x10
     c54:	80 68       	ori	r24, 0x80	; 128
     c56:	80 8b       	std	Z+16, r24	; 0x10
     c58:	08 95       	ret

00000c5a <tiny_dma_set_mode_7>:
}

void tiny_dma_set_mode_7(void){
		
		global_mode = 7;
     c5a:	87 e0       	ldi	r24, 0x07	; 7
     c5c:	80 93 00 20 	sts	0x2000, r24
		
		tiny_dma_flush();
     c60:	14 dc       	rcall	.-2008   	; 0x48a <tiny_dma_flush>
		
		DMA.CH2.REPCNT = 0; //Repeat forever!
     c62:	e0 e0       	ldi	r30, 0x00	; 0
     c64:	f1 e0       	ldi	r31, 0x01	; 1
     c66:	16 aa       	std	Z+54, r1	; 0x36
		DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     c68:	44 e2       	ldi	r20, 0x24	; 36
     c6a:	40 ab       	std	Z+48, r20	; 0x30
		DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     c6c:	11 aa       	std	Z+49, r1	; 0x31
		DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     c6e:	39 e5       	ldi	r19, 0x59	; 89
     c70:	32 ab       	std	Z+50, r19	; 0x32
		DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     c72:	23 e0       	ldi	r18, 0x03	; 3
     c74:	23 ab       	std	Z+51, r18	; 0x33
		DMA.CH2.TRFCNT = dacBuf_len;
     c76:	80 91 04 20 	lds	r24, 0x2004
     c7a:	90 91 05 20 	lds	r25, 0x2005
     c7e:	84 ab       	std	Z+52, r24	; 0x34
     c80:	95 ab       	std	Z+53, r25	; 0x35

		DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     c82:	86 e5       	ldi	r24, 0x56	; 86
     c84:	92 e2       	ldi	r25, 0x22	; 34
     c86:	80 af       	std	Z+56, r24	; 0x38
		DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     c88:	91 af       	std	Z+57, r25	; 0x39
		DMA.CH2.SRCADDR2 = 0x00;
     c8a:	12 ae       	std	Z+58, r1	; 0x3a
			
		DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     c8c:	89 e3       	ldi	r24, 0x39	; 57
     c8e:	84 af       	std	Z+60, r24	; 0x3c
		DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     c90:	20 93 3d 01 	sts	0x013D, r18
		DMA.CH2.DESTADDR2 = 0x00;
     c94:	10 92 3e 01 	sts	0x013E, r1
			
		//Must enable last for REPCNT won't work!
		DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     c98:	80 a9       	ldd	r24, Z+48	; 0x30
     c9a:	80 68       	ori	r24, 0x80	; 128
     c9c:	80 ab       	std	Z+48, r24	; 0x30
		
		DMA.CH3.REPCNT = 0; //Repeat forever!
     c9e:	10 92 46 01 	sts	0x0146, r1
		DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     ca2:	e0 e4       	ldi	r30, 0x40	; 64
     ca4:	f1 e0       	ldi	r31, 0x01	; 1
     ca6:	40 83       	st	Z, r20
		DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     ca8:	10 92 41 01 	sts	0x0141, r1
		DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     cac:	30 93 42 01 	sts	0x0142, r19
		DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	80 93 43 01 	sts	0x0143, r24
		DMA.CH3.TRFCNT = auxDacBufLen;
     cb6:	80 91 02 20 	lds	r24, 0x2002
     cba:	90 91 03 20 	lds	r25, 0x2003
     cbe:	80 93 44 01 	sts	0x0144, r24
     cc2:	90 93 45 01 	sts	0x0145, r25

		DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     cc6:	86 e6       	ldi	r24, 0x66	; 102
     cc8:	94 e2       	ldi	r25, 0x24	; 36
     cca:	80 93 48 01 	sts	0x0148, r24
		DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     cce:	90 93 49 01 	sts	0x0149, r25
		DMA.CH3.SRCADDR2 = 0x00;
     cd2:	10 92 4a 01 	sts	0x014A, r1
		
		DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     cd6:	8b e3       	ldi	r24, 0x3B	; 59
     cd8:	80 93 4c 01 	sts	0x014C, r24
		DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     cdc:	20 93 4d 01 	sts	0x014D, r18
		DMA.CH3.DESTADDR2 = 0x00;
     ce0:	10 92 4e 01 	sts	0x014E, r1
		
		//Must enable last for REPCNT won't work!
		DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     ce4:	80 81       	ld	r24, Z
     ce6:	80 68       	ori	r24, 0x80	; 128
     ce8:	80 83       	st	Z, r24
     cea:	08 95       	ret

00000cec <tiny_dma_loop_mode_7>:
}

void tiny_dma_loop_mode_7(void){
	
		DMA.CH0.CTRLA = 0x00;
     cec:	e0 e0       	ldi	r30, 0x00	; 0
     cee:	f1 e0       	ldi	r31, 0x01	; 1
     cf0:	10 8a       	std	Z+16, r1	; 0x10
		DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     cf2:	80 e4       	ldi	r24, 0x40	; 64
     cf4:	80 8b       	std	Z+16, r24	; 0x10
		
		DMA.CH0.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     cf6:	85 e0       	ldi	r24, 0x05	; 5
     cf8:	80 8b       	std	Z+16, r24	; 0x10
		DMA.CH0.CTRLB = 0x00; //No interrupt!
     cfa:	11 8a       	std	Z+17, r1	; 0x11
		DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     cfc:	81 e9       	ldi	r24, 0x91	; 145
     cfe:	82 8b       	std	Z+18, r24	; 0x12
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     d00:	80 e1       	ldi	r24, 0x10	; 16
     d02:	83 8b       	std	Z+19, r24	; 0x13
		DMA.CH0.TRFCNT = PACKET_SIZE;
     d04:	8e ee       	ldi	r24, 0xEE	; 238
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	84 8b       	std	Z+20, r24	; 0x14
     d0a:	95 8b       	std	Z+21, r25	; 0x15
		
		DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     d0c:	24 e2       	ldi	r18, 0x24	; 36
     d0e:	20 8f       	std	Z+24, r18	; 0x18
		DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     d10:	22 e0       	ldi	r18, 0x02	; 2
     d12:	21 8f       	std	Z+25, r18	; 0x19
		DMA.CH0.SRCADDR2 = 0x00;
     d14:	12 8e       	std	Z+26, r1	; 0x1a
		
		DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     d16:	40 91 b4 20 	lds	r20, 0x20B4
     d1a:	48 9f       	mul	r20, r24
     d1c:	90 01       	movw	r18, r0
     d1e:	49 9f       	mul	r20, r25
     d20:	30 0d       	add	r19, r0
     d22:	11 24       	eor	r1, r1
     d24:	2a 59       	subi	r18, 0x9A	; 154
     d26:	39 4d       	sbci	r19, 0xD9	; 217
     d28:	24 8f       	std	Z+28, r18	; 0x1c
		DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     d2a:	40 91 b4 20 	lds	r20, 0x20B4
     d2e:	48 9f       	mul	r20, r24
     d30:	90 01       	movw	r18, r0
     d32:	49 9f       	mul	r20, r25
     d34:	30 0d       	add	r19, r0
     d36:	11 24       	eor	r1, r1
     d38:	c9 01       	movw	r24, r18
     d3a:	8a 59       	subi	r24, 0x9A	; 154
     d3c:	99 4d       	sbci	r25, 0xD9	; 217
     d3e:	95 8f       	std	Z+29, r25	; 0x1d
		DMA.CH0.DESTADDR2 = 0x00;
     d40:	16 8e       	std	Z+30, r1	; 0x1e
		
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d42:	80 89       	ldd	r24, Z+16	; 0x10
     d44:	80 68       	ori	r24, 0x80	; 128
     d46:	80 8b       	std	Z+16, r24	; 0x10
     d48:	08 95       	ret

00000d4a <tiny_timer_setup>:
#define PSU_PER 3000
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
     d4a:	e0 e7       	ldi	r30, 0x70	; 112
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	83 81       	ldd	r24, Z+3	; 0x03
     d50:	8c 7f       	andi	r24, 0xFC	; 252
     d52:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
     d54:	84 81       	ldd	r24, Z+4	; 0x04
     d56:	8c 7f       	andi	r24, 0xFC	; 252
     d58:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
     d5a:	80 81       	ld	r24, Z
     d5c:	8d 7f       	andi	r24, 0xFD	; 253
     d5e:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
     d60:	e0 e8       	ldi	r30, 0x80	; 128
     d62:	f1 e0       	ldi	r31, 0x01	; 1
     d64:	80 ec       	ldi	r24, 0xC0	; 192
     d66:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
     d68:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
     d6a:	88 ec       	ldi	r24, 0xC8	; 200
     d6c:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
     d6e:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     d70:	e0 e0       	ldi	r30, 0x00	; 0
     d72:	f8 e0       	ldi	r31, 0x08	; 8
     d74:	34 e0       	ldi	r19, 0x04	; 4
     d76:	30 83       	st	Z, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     d78:	23 e0       	ldi	r18, 0x03	; 3
     d7a:	21 83       	std	Z+1, r18	; 0x01
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
     d7c:	14 82       	std	Z+4, r1	; 0x04
		TC_DAC.PER = 469;
     d7e:	85 ed       	ldi	r24, 0xD5	; 213
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	86 a3       	std	Z+38, r24	; 0x26
     d84:	97 a3       	std	Z+39, r25	; 0x27
		TC_DAC.INTCTRLA = 0x00;
     d86:	16 82       	std	Z+6, r1	; 0x06
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     d88:	e0 e4       	ldi	r30, 0x40	; 64
     d8a:	f8 e0       	ldi	r31, 0x08	; 8
     d8c:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     d8e:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
     d90:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
     d92:	86 a3       	std	Z+38, r24	; 0x26
     d94:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
     d96:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
     d98:	e0 e6       	ldi	r30, 0x60	; 96
     d9a:	f6 e0       	ldi	r31, 0x06	; 6
     d9c:	80 81       	ld	r24, Z
     d9e:	80 61       	ori	r24, 0x10	; 16
     da0:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
     da2:	e0 e4       	ldi	r30, 0x40	; 64
     da4:	f9 e0       	ldi	r31, 0x09	; 9
     da6:	83 e1       	ldi	r24, 0x13	; 19
     da8:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
     daa:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_LO_gc;
     dac:	21 e0       	ldi	r18, 0x01	; 1
     dae:	26 83       	std	Z+6, r18	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
     db0:	88 eb       	ldi	r24, 0xB8	; 184
     db2:	9b e0       	ldi	r25, 0x0B	; 11
     db4:	86 a3       	std	Z+38, r24	; 0x26
     db6:	97 a3       	std	Z+39, r25	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
     db8:	10 a6       	std	Z+40, r1	; 0x28
     dba:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
     dbc:	20 83       	st	Z, r18
     dbe:	08 95       	ret

00000dc0 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	8f 93       	push	r24
     dd2:	9f 93       	push	r25
     dd4:	ef 93       	push	r30
     dd6:	ff 93       	push	r31
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	1f 92       	push	r1
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	if (global_mode == 7){
     de2:	80 91 00 20 	lds	r24, 0x2000
     de6:	87 30       	cpi	r24, 0x07	; 7
     de8:	31 f4       	brne	.+12     	; 0xdf6 <__vector_83+0x36>
		nothing = ADCA.CH1.RESL;
     dea:	e0 e0       	ldi	r30, 0x00	; 0
     dec:	f2 e0       	ldi	r31, 0x02	; 2
     dee:	84 a5       	ldd	r24, Z+44	; 0x2c
     df0:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
     df2:	85 a5       	ldd	r24, Z+45	; 0x2d
     df4:	03 c0       	rjmp	.+6      	; 0xdfc <__vector_83+0x3c>
	}
	else{
		tempvar = ADCA.CH1.RESL;
     df6:	e0 e0       	ldi	r30, 0x00	; 0
     df8:	f2 e0       	ldi	r31, 0x02	; 2
     dfa:	84 a5       	ldd	r24, Z+44	; 0x2c
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
     dfc:	20 91 b2 20 	lds	r18, 0x20B2
     e00:	28 1b       	sub	r18, r24
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
     e02:	e0 e4       	ldi	r30, 0x40	; 64
     e04:	f9 e0       	ldi	r31, 0x09	; 9
     e06:	80 a5       	ldd	r24, Z+40	; 0x28
     e08:	91 a5       	ldd	r25, Z+41	; 0x29
     e0a:	31 e0       	ldi	r19, 0x01	; 1
     e0c:	22 30       	cpi	r18, 0x02	; 2
     e0e:	0c f4       	brge	.+2      	; 0xe12 <__vector_83+0x52>
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	33 23       	and	r19, r19
     e14:	c9 f0       	breq	.+50     	; 0xe48 <__vector_83+0x88>
     e16:	31 e0       	ldi	r19, 0x01	; 1
     e18:	82 3b       	cpi	r24, 0xB2	; 178
     e1a:	9b 40       	sbci	r25, 0x0B	; 11
     e1c:	08 f0       	brcs	.+2      	; 0xe20 <__vector_83+0x60>
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	33 23       	and	r19, r19
     e22:	91 f0       	breq	.+36     	; 0xe48 <__vector_83+0x88>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
     e24:	e0 e4       	ldi	r30, 0x40	; 64
     e26:	f9 e0       	ldi	r31, 0x09	; 9
     e28:	80 a5       	ldd	r24, Z+40	; 0x28
     e2a:	91 a5       	ldd	r25, Z+41	; 0x29
     e2c:	29 30       	cpi	r18, 0x09	; 9
     e2e:	1c f0       	brlt	.+6      	; 0xe36 <__vector_83+0x76>
     e30:	26 e0       	ldi	r18, 0x06	; 6
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <__vector_83+0x7a>
     e36:	21 e0       	ldi	r18, 0x01	; 1
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	82 0f       	add	r24, r18
     e3c:	93 1f       	adc	r25, r19
     e3e:	e0 e4       	ldi	r30, 0x40	; 64
     e40:	f9 e0       	ldi	r31, 0x09	; 9
     e42:	80 af       	std	Z+56, r24	; 0x38
     e44:	91 af       	std	Z+57, r25	; 0x39
     e46:	21 c0       	rjmp	.+66     	; 0xe8a <__vector_83+0xca>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
     e48:	e0 e4       	ldi	r30, 0x40	; 64
     e4a:	f9 e0       	ldi	r31, 0x09	; 9
     e4c:	80 a5       	ldd	r24, Z+40	; 0x28
     e4e:	91 a5       	ldd	r25, Z+41	; 0x29
     e50:	31 e0       	ldi	r19, 0x01	; 1
     e52:	2f 3f       	cpi	r18, 0xFF	; 255
     e54:	0c f0       	brlt	.+2      	; 0xe58 <__vector_83+0x98>
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	33 23       	and	r19, r19
     e5a:	b9 f0       	breq	.+46     	; 0xe8a <__vector_83+0xca>
     e5c:	31 e0       	ldi	r19, 0x01	; 1
     e5e:	07 97       	sbiw	r24, 0x07	; 7
     e60:	08 f4       	brcc	.+2      	; 0xe64 <__vector_83+0xa4>
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	33 23       	and	r19, r19
     e66:	89 f0       	breq	.+34     	; 0xe8a <__vector_83+0xca>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
     e68:	e0 e4       	ldi	r30, 0x40	; 64
     e6a:	f9 e0       	ldi	r31, 0x09	; 9
     e6c:	80 a5       	ldd	r24, Z+40	; 0x28
     e6e:	91 a5       	ldd	r25, Z+41	; 0x29
     e70:	28 3f       	cpi	r18, 0xF8	; 248
     e72:	1c f4       	brge	.+6      	; 0xe7a <__vector_83+0xba>
     e74:	26 e0       	ldi	r18, 0x06	; 6
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <__vector_83+0xbe>
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	82 1b       	sub	r24, r18
     e80:	93 0b       	sbc	r25, r19
     e82:	e0 e4       	ldi	r30, 0x40	; 64
     e84:	f9 e0       	ldi	r31, 0x09	; 9
     e86:	80 af       	std	Z+56, r24	; 0x38
     e88:	91 af       	std	Z+57, r25	; 0x39
	}
     e8a:	0f 90       	pop	r0
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
     ea8:	e0 e7       	ldi	r30, 0x70	; 112
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	83 81       	ldd	r24, Z+3	; 0x03
     eae:	8f 7e       	andi	r24, 0xEF	; 239
     eb0:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
     eb2:	e0 e4       	ldi	r30, 0x40	; 64
     eb4:	f6 e0       	ldi	r31, 0x06	; 6
     eb6:	80 81       	ld	r24, Z
     eb8:	8a 6a       	ori	r24, 0xAA	; 170
     eba:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
     ec0:	88 e5       	ldi	r24, 0x58	; 88
     ec2:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	#ifndef VERO
		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
     ec4:	e0 ea       	ldi	r30, 0xA0	; 160
     ec6:	f8 e0       	ldi	r31, 0x08	; 8
     ec8:	84 ec       	ldi	r24, 0xC4	; 196
     eca:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
     ed0:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     ed2:	88 e1       	ldi	r24, 0x18	; 24
     ed4:	84 83       	std	Z+4, r24	; 0x04
     ed6:	08 95       	ret

00000ed8 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
     ed8:	e0 e7       	ldi	r30, 0x70	; 112
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	83 81       	ldd	r24, Z+3	; 0x03
     ede:	87 7f       	andi	r24, 0xF7	; 247
     ee0:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
     ee2:	80 e4       	ldi	r24, 0x40	; 64
     ee4:	80 93 c0 08 	sts	0x08C0, r24
	#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;  //Pin5 if not swapped
     ee8:	88 e5       	ldi	r24, 0x58	; 88
     eea:	e0 e4       	ldi	r30, 0x40	; 64
     eec:	f6 e0       	ldi	r31, 0x06	; 6
     eee:	85 8b       	std	Z+21, r24	; 0x15
     ef0:	08 95       	ret

00000ef2 <sysclk_init>:
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <sysclk_init+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <sysclk_init+0x8>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	80 93 70 00 	sts	0x0070, r24
     f04:	80 93 71 00 	sts	0x0071, r24
     f08:	80 93 72 00 	sts	0x0072, r24
     f0c:	80 93 73 00 	sts	0x0073, r24
     f10:	80 93 74 00 	sts	0x0074, r24
     f14:	80 93 75 00 	sts	0x0075, r24
     f18:	80 93 76 00 	sts	0x0076, r24
     f1c:	64 e0       	ldi	r22, 0x04	; 4
     f1e:	81 e4       	ldi	r24, 0x41	; 65
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	e4 d5       	rcall	.+3016   	; 0x1aec <ccp_write_io>
     f24:	6c e1       	ldi	r22, 0x1C	; 28
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	e6 d5       	rcall	.+3020   	; 0x1af8 <nvm_read_byte>
     f2c:	8a 83       	std	Y+2, r24	; 0x02
     f2e:	6d e1       	ldi	r22, 0x1D	; 29
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	e1 d5       	rcall	.+3010   	; 0x1af8 <nvm_read_byte>
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	21 f4       	brne	.+8      	; 0xf48 <sysclk_init+0x56>
     f40:	80 e4       	ldi	r24, 0x40	; 64
     f42:	93 e2       	ldi	r25, 0x23	; 35
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	8b 83       	std	Y+3, r24	; 0x03
     f4e:	9c 83       	std	Y+4, r25	; 0x04
     f50:	e0 e6       	ldi	r30, 0x60	; 96
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	82 83       	std	Z+2, r24	; 0x02
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	83 83       	std	Z+3, r24	; 0x03
     f5a:	8f b7       	in	r24, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	e0 e5       	ldi	r30, 0x50	; 80
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	90 81       	ld	r25, Z
     f64:	92 60       	ori	r25, 0x02	; 2
     f66:	90 83       	st	Z, r25
     f68:	8f bf       	out	0x3f, r24	; 63
     f6a:	81 81       	ldd	r24, Z+1	; 0x01
     f6c:	81 ff       	sbrs	r24, 1
     f6e:	fd cf       	rjmp	.-6      	; 0xf6a <sysclk_init+0x78>
     f70:	8f b7       	in	r24, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	a0 e5       	ldi	r26, 0x50	; 80
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	16 96       	adiw	r26, 0x06	; 6
     f7a:	9c 91       	ld	r25, X
     f7c:	16 97       	sbiw	r26, 0x06	; 6
     f7e:	99 7f       	andi	r25, 0xF9	; 249
     f80:	16 96       	adiw	r26, 0x06	; 6
     f82:	9c 93       	st	X, r25
     f84:	16 97       	sbiw	r26, 0x06	; 6
     f86:	e0 e6       	ldi	r30, 0x60	; 96
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	90 e8       	ldi	r25, 0x80	; 128
     f8c:	95 83       	std	Z+5, r25	; 0x05
     f8e:	9b eb       	ldi	r25, 0xBB	; 187
     f90:	96 83       	std	Z+6, r25	; 0x06
     f92:	16 96       	adiw	r26, 0x06	; 6
     f94:	9c 91       	ld	r25, X
     f96:	16 97       	sbiw	r26, 0x06	; 6
     f98:	94 60       	ori	r25, 0x04	; 4
     f9a:	16 96       	adiw	r26, 0x06	; 6
     f9c:	9c 93       	st	X, r25
     f9e:	90 81       	ld	r25, Z
     fa0:	91 60       	ori	r25, 0x01	; 1
     fa2:	90 83       	st	Z, r25
     fa4:	8f bf       	out	0x3f, r24	; 63
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	80 e4       	ldi	r24, 0x40	; 64
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9f d5       	rcall	.+2878   	; 0x1aec <ccp_write_io>
     fae:	8f b7       	in	r24, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	e0 e5       	ldi	r30, 0x50	; 80
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	90 81       	ld	r25, Z
     fb8:	9e 7f       	andi	r25, 0xFE	; 254
     fba:	90 83       	st	Z, r25
     fbc:	8f bf       	out	0x3f, r24	; 63
     fbe:	24 96       	adiw	r28, 0x04	; 4
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <sysclk_enable_module>:
     fca:	9f b7       	in	r25, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	e8 2f       	mov	r30, r24
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	e0 59       	subi	r30, 0x90	; 144
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	60 95       	com	r22
     fd8:	80 81       	ld	r24, Z
     fda:	68 23       	and	r22, r24
     fdc:	60 83       	st	Z, r22
     fde:	9f bf       	out	0x3f, r25	; 63
     fe0:	08 95       	ret

00000fe2 <sysclk_enable_usb>:
     fe2:	86 30       	cpi	r24, 0x06	; 6
     fe4:	11 f4       	brne	.+4      	; 0xfea <sysclk_enable_usb+0x8>
     fe6:	68 e1       	ldi	r22, 0x18	; 24
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <sysclk_enable_usb+0xa>
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	e0 e5       	ldi	r30, 0x50	; 80
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	81 81       	ldd	r24, Z+1	; 0x01
     ff2:	81 fd       	sbrc	r24, 1
     ff4:	24 c0       	rjmp	.+72     	; 0x103e <sysclk_enable_usb+0x5c>
     ff6:	8f b7       	in	r24, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	90 81       	ld	r25, Z
     ffc:	92 60       	ori	r25, 0x02	; 2
     ffe:	90 83       	st	Z, r25
    1000:	8f bf       	out	0x3f, r24	; 63
    1002:	81 81       	ldd	r24, Z+1	; 0x01
    1004:	81 ff       	sbrs	r24, 1
    1006:	fd cf       	rjmp	.-6      	; 0x1002 <sysclk_enable_usb+0x20>
    1008:	8f b7       	in	r24, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	a0 e5       	ldi	r26, 0x50	; 80
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	16 96       	adiw	r26, 0x06	; 6
    1012:	9c 91       	ld	r25, X
    1014:	16 97       	sbiw	r26, 0x06	; 6
    1016:	99 7f       	andi	r25, 0xF9	; 249
    1018:	16 96       	adiw	r26, 0x06	; 6
    101a:	9c 93       	st	X, r25
    101c:	16 97       	sbiw	r26, 0x06	; 6
    101e:	e0 e6       	ldi	r30, 0x60	; 96
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	90 e8       	ldi	r25, 0x80	; 128
    1024:	95 83       	std	Z+5, r25	; 0x05
    1026:	9b eb       	ldi	r25, 0xBB	; 187
    1028:	96 83       	std	Z+6, r25	; 0x06
    102a:	16 96       	adiw	r26, 0x06	; 6
    102c:	9c 91       	ld	r25, X
    102e:	16 97       	sbiw	r26, 0x06	; 6
    1030:	94 60       	ori	r25, 0x04	; 4
    1032:	16 96       	adiw	r26, 0x06	; 6
    1034:	9c 93       	st	X, r25
    1036:	90 81       	ld	r25, Z
    1038:	91 60       	ori	r25, 0x01	; 1
    103a:	90 83       	st	Z, r25
    103c:	8f bf       	out	0x3f, r24	; 63
    103e:	63 60       	ori	r22, 0x03	; 3
    1040:	84 e4       	ldi	r24, 0x44	; 68
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	53 d5       	rcall	.+2726   	; 0x1aec <ccp_write_io>
    1046:	60 e4       	ldi	r22, 0x40	; 64
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	bf cf       	rjmp	.-130    	; 0xfca <sysclk_enable_module>
    104c:	08 95       	ret

0000104e <udi_vendor_getsetting>:
    104e:	80 91 b6 20 	lds	r24, 0x20B6
    1052:	08 95       	ret

00001054 <udi_vendor_enable>:
    1054:	2b d1       	rcall	.+598    	; 0x12ac <udc_get_interface_desc>
    1056:	fc 01       	movw	r30, r24
    1058:	83 81       	ldd	r24, Z+3	; 0x03
    105a:	80 93 b6 20 	sts	0x20B6, r24
    105e:	81 11       	cpse	r24, r1
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <udi_vendor_enable+0x12>
    1062:	76 c9       	rjmp	.-3348   	; 0x350 <main_vendor_enable>
    1064:	08 95       	ret
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	08 95       	ret

0000106a <udi_vendor_disable>:
    106a:	80 91 b6 20 	lds	r24, 0x20B6
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	09 f4       	brne	.+2      	; 0x1074 <udi_vendor_disable+0xa>
    1072:	7a c9       	rjmp	.-3340   	; 0x368 <main_vendor_disable>
    1074:	08 95       	ret

00001076 <udi_vendor_setup>:
    1076:	80 91 56 24 	lds	r24, 0x2456
    107a:	88 23       	and	r24, r24
    107c:	4c f4       	brge	.+18     	; 0x1090 <udi_vendor_setup+0x1a>
    107e:	80 76       	andi	r24, 0x60	; 96
    1080:	80 34       	cpi	r24, 0x40	; 64
    1082:	a9 f4       	brne	.+42     	; 0x10ae <udi_vendor_setup+0x38>
    1084:	80 91 57 24 	lds	r24, 0x2457
    1088:	81 11       	cpse	r24, r1
    108a:	13 c0       	rjmp	.+38     	; 0x10b2 <udi_vendor_setup+0x3c>
    108c:	72 c9       	rjmp	.-3356   	; 0x372 <main_setup_in_received>
    108e:	08 95       	ret
    1090:	80 76       	andi	r24, 0x60	; 96
    1092:	80 34       	cpi	r24, 0x40	; 64
    1094:	81 f4       	brne	.+32     	; 0x10b6 <udi_vendor_setup+0x40>
    1096:	80 91 57 24 	lds	r24, 0x2457
    109a:	81 11       	cpse	r24, r1
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <udi_vendor_setup+0x44>
    109e:	80 91 5c 24 	lds	r24, 0x245C
    10a2:	90 91 5d 24 	lds	r25, 0x245D
    10a6:	89 2b       	or	r24, r25
    10a8:	51 f0       	breq	.+20     	; 0x10be <udi_vendor_setup+0x48>
    10aa:	61 c9       	rjmp	.-3390   	; 0x36e <main_setup_out_received>
    10ac:	08 95       	ret
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	08 95       	ret
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	08 95       	ret
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	08 95       	ret
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	08 95       	ret
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	08 95       	ret

000010c2 <udi_vendor_iso_in_run>:
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	9b 01       	movw	r18, r22
    10c8:	8a 01       	movw	r16, r20
    10ca:	ac 01       	movw	r20, r24
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	83 e8       	ldi	r24, 0x83	; 131
    10d0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <udd_ep_run>
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret

000010da <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    10da:	e0 91 bb 20 	lds	r30, 0x20BB
    10de:	f0 91 bc 20 	lds	r31, 0x20BC
    10e2:	01 90       	ld	r0, Z+
    10e4:	f0 81       	ld	r31, Z
    10e6:	e0 2d       	mov	r30, r0
    10e8:	22 81       	ldd	r18, Z+2	; 0x02
    10ea:	33 81       	ldd	r19, Z+3	; 0x03
    10ec:	2e 0f       	add	r18, r30
    10ee:	3f 1f       	adc	r19, r31
    10f0:	fc 01       	movw	r30, r24
    10f2:	40 81       	ld	r20, Z
    10f4:	e4 0f       	add	r30, r20
    10f6:	f1 1d       	adc	r31, r1
    10f8:	e2 17       	cp	r30, r18
    10fa:	f3 07       	cpc	r31, r19
    10fc:	a0 f4       	brcc	.+40     	; 0x1126 <udc_next_desc_in_iface+0x4c>
    10fe:	81 81       	ldd	r24, Z+1	; 0x01
    1100:	84 30       	cpi	r24, 0x04	; 4
    1102:	a1 f0       	breq	.+40     	; 0x112c <udc_next_desc_in_iface+0x52>
    1104:	86 13       	cpse	r24, r22
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <udc_next_desc_in_iface+0x3a>
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <udc_next_desc_in_iface+0x58>
    110a:	81 81       	ldd	r24, Z+1	; 0x01
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	a1 f0       	breq	.+40     	; 0x1138 <udc_next_desc_in_iface+0x5e>
    1110:	86 17       	cp	r24, r22
    1112:	a9 f0       	breq	.+42     	; 0x113e <udc_next_desc_in_iface+0x64>
    1114:	80 81       	ld	r24, Z
    1116:	e8 0f       	add	r30, r24
    1118:	f1 1d       	adc	r31, r1
    111a:	e2 17       	cp	r30, r18
    111c:	f3 07       	cpc	r31, r19
    111e:	a8 f3       	brcs	.-22     	; 0x110a <udc_next_desc_in_iface+0x30>
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	08 95       	ret
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	08 95       	ret
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	08 95       	ret
    1132:	8e 2f       	mov	r24, r30
    1134:	9f 2f       	mov	r25, r31
    1136:	08 95       	ret
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	08 95       	ret
    113e:	8e 2f       	mov	r24, r30
    1140:	9f 2f       	mov	r25, r31
    1142:	08 95       	ret

00001144 <udc_valid_address>:
    1144:	80 91 58 24 	lds	r24, 0x2458
    1148:	8f 77       	andi	r24, 0x7F	; 127
    114a:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <udd_set_address>
    114e:	08 95       	ret

00001150 <udc_update_iface_desc>:
    1150:	90 91 be 20 	lds	r25, 0x20BE
    1154:	99 23       	and	r25, r25
    1156:	81 f1       	breq	.+96     	; 0x11b8 <udc_update_iface_desc+0x68>
    1158:	e0 91 bb 20 	lds	r30, 0x20BB
    115c:	f0 91 bc 20 	lds	r31, 0x20BC
    1160:	01 90       	ld	r0, Z+
    1162:	f0 81       	ld	r31, Z
    1164:	e0 2d       	mov	r30, r0
    1166:	94 81       	ldd	r25, Z+4	; 0x04
    1168:	89 17       	cp	r24, r25
    116a:	40 f5       	brcc	.+80     	; 0x11bc <udc_update_iface_desc+0x6c>
    116c:	e0 93 b9 20 	sts	0x20B9, r30
    1170:	f0 93 ba 20 	sts	0x20BA, r31
    1174:	22 81       	ldd	r18, Z+2	; 0x02
    1176:	33 81       	ldd	r19, Z+3	; 0x03
    1178:	2e 0f       	add	r18, r30
    117a:	3f 1f       	adc	r19, r31
    117c:	e2 17       	cp	r30, r18
    117e:	f3 07       	cpc	r31, r19
    1180:	f8 f4       	brcc	.+62     	; 0x11c0 <udc_update_iface_desc+0x70>
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	61 f4       	brne	.+24     	; 0x11a0 <udc_update_iface_desc+0x50>
    1188:	92 81       	ldd	r25, Z+2	; 0x02
    118a:	98 13       	cpse	r25, r24
    118c:	09 c0       	rjmp	.+18     	; 0x11a0 <udc_update_iface_desc+0x50>
    118e:	93 81       	ldd	r25, Z+3	; 0x03
    1190:	96 13       	cpse	r25, r22
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <udc_update_iface_desc+0x50>
    1194:	e0 93 b9 20 	sts	0x20B9, r30
    1198:	f0 93 ba 20 	sts	0x20BA, r31
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	08 95       	ret
    11a0:	90 81       	ld	r25, Z
    11a2:	e9 0f       	add	r30, r25
    11a4:	f1 1d       	adc	r31, r1
    11a6:	e2 17       	cp	r30, r18
    11a8:	f3 07       	cpc	r31, r19
    11aa:	58 f3       	brcs	.-42     	; 0x1182 <udc_update_iface_desc+0x32>
    11ac:	e0 93 b9 20 	sts	0x20B9, r30
    11b0:	f0 93 ba 20 	sts	0x20BA, r31
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	08 95       	ret
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	08 95       	ret
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	08 95       	ret
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	08 95       	ret

000011c4 <udc_iface_disable>:
    11c4:	ff 92       	push	r15
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	c8 2f       	mov	r28, r24
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	be df       	rcall	.-132    	; 0x1150 <udc_update_iface_desc>
    11d4:	f8 2e       	mov	r15, r24
    11d6:	88 23       	and	r24, r24
    11d8:	81 f1       	breq	.+96     	; 0x123a <udc_iface_disable+0x76>
    11da:	a0 91 bb 20 	lds	r26, 0x20BB
    11de:	b0 91 bc 20 	lds	r27, 0x20BC
    11e2:	ec 2f       	mov	r30, r28
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	ee 0f       	add	r30, r30
    11e8:	ff 1f       	adc	r31, r31
    11ea:	12 96       	adiw	r26, 0x02	; 2
    11ec:	2d 91       	ld	r18, X+
    11ee:	3c 91       	ld	r19, X
    11f0:	13 97       	sbiw	r26, 0x03	; 3
    11f2:	e2 0f       	add	r30, r18
    11f4:	f3 1f       	adc	r31, r19
    11f6:	00 81       	ld	r16, Z
    11f8:	11 81       	ldd	r17, Z+1	; 0x01
    11fa:	d8 01       	movw	r26, r16
    11fc:	16 96       	adiw	r26, 0x06	; 6
    11fe:	ed 91       	ld	r30, X+
    1200:	fc 91       	ld	r31, X
    1202:	17 97       	sbiw	r26, 0x07	; 7
    1204:	09 95       	icall
    1206:	68 2f       	mov	r22, r24
    1208:	8c 2f       	mov	r24, r28
    120a:	a2 df       	rcall	.-188    	; 0x1150 <udc_update_iface_desc>
    120c:	f8 2e       	mov	r15, r24
    120e:	88 23       	and	r24, r24
    1210:	a1 f0       	breq	.+40     	; 0x123a <udc_iface_disable+0x76>
    1212:	c0 91 b9 20 	lds	r28, 0x20B9
    1216:	d0 91 ba 20 	lds	r29, 0x20BA
    121a:	65 e0       	ldi	r22, 0x05	; 5
    121c:	ce 01       	movw	r24, r28
    121e:	5d df       	rcall	.-326    	; 0x10da <udc_next_desc_in_iface>
    1220:	ec 01       	movw	r28, r24
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	21 f0       	breq	.+8      	; 0x122e <udc_iface_disable+0x6a>
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	0e 94 3a 12 	call	0x2474	; 0x2474 <udd_ep_free>
    122c:	f6 cf       	rjmp	.-20     	; 0x121a <udc_iface_disable+0x56>
    122e:	d8 01       	movw	r26, r16
    1230:	12 96       	adiw	r26, 0x02	; 2
    1232:	ed 91       	ld	r30, X+
    1234:	fc 91       	ld	r31, X
    1236:	13 97       	sbiw	r26, 0x03	; 3
    1238:	09 95       	icall
    123a:	8f 2d       	mov	r24, r15
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	08 95       	ret

00001248 <udc_iface_enable>:
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	18 2f       	mov	r17, r24
    1250:	7f df       	rcall	.-258    	; 0x1150 <udc_update_iface_desc>
    1252:	88 23       	and	r24, r24
    1254:	39 f1       	breq	.+78     	; 0x12a4 <udc_iface_enable+0x5c>
    1256:	c0 91 b9 20 	lds	r28, 0x20B9
    125a:	d0 91 ba 20 	lds	r29, 0x20BA
    125e:	65 e0       	ldi	r22, 0x05	; 5
    1260:	ce 01       	movw	r24, r28
    1262:	3b df       	rcall	.-394    	; 0x10da <udc_next_desc_in_iface>
    1264:	ec 01       	movw	r28, r24
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	41 f0       	breq	.+16     	; 0x127a <udc_iface_enable+0x32>
    126a:	4c 81       	ldd	r20, Y+4	; 0x04
    126c:	5d 81       	ldd	r21, Y+5	; 0x05
    126e:	6b 81       	ldd	r22, Y+3	; 0x03
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	a5 d7       	rcall	.+3914   	; 0x21be <udd_ep_alloc>
    1274:	81 11       	cpse	r24, r1
    1276:	f3 cf       	rjmp	.-26     	; 0x125e <udc_iface_enable+0x16>
    1278:	15 c0       	rjmp	.+42     	; 0x12a4 <udc_iface_enable+0x5c>
    127a:	a0 91 bb 20 	lds	r26, 0x20BB
    127e:	b0 91 bc 20 	lds	r27, 0x20BC
    1282:	81 2f       	mov	r24, r17
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	12 96       	adiw	r26, 0x02	; 2
    128c:	ed 91       	ld	r30, X+
    128e:	fc 91       	ld	r31, X
    1290:	13 97       	sbiw	r26, 0x03	; 3
    1292:	e8 0f       	add	r30, r24
    1294:	f9 1f       	adc	r31, r25
    1296:	01 90       	ld	r0, Z+
    1298:	f0 81       	ld	r31, Z
    129a:	e0 2d       	mov	r30, r0
    129c:	01 90       	ld	r0, Z+
    129e:	f0 81       	ld	r31, Z
    12a0:	e0 2d       	mov	r30, r0
    12a2:	09 95       	icall
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	08 95       	ret

000012ac <udc_get_interface_desc>:
    12ac:	80 91 b9 20 	lds	r24, 0x20B9
    12b0:	90 91 ba 20 	lds	r25, 0x20BA
    12b4:	08 95       	ret

000012b6 <udc_start>:
    12b6:	ef c6       	rjmp	.+3550   	; 0x2096 <udd_enable>
    12b8:	08 95       	ret

000012ba <udc_reset>:
    12ba:	cf 93       	push	r28
    12bc:	80 91 be 20 	lds	r24, 0x20BE
    12c0:	88 23       	and	r24, r24
    12c2:	c1 f0       	breq	.+48     	; 0x12f4 <udc_reset+0x3a>
    12c4:	e0 91 bb 20 	lds	r30, 0x20BB
    12c8:	f0 91 bc 20 	lds	r31, 0x20BC
    12cc:	01 90       	ld	r0, Z+
    12ce:	f0 81       	ld	r31, Z
    12d0:	e0 2d       	mov	r30, r0
    12d2:	84 81       	ldd	r24, Z+4	; 0x04
    12d4:	88 23       	and	r24, r24
    12d6:	71 f0       	breq	.+28     	; 0x12f4 <udc_reset+0x3a>
    12d8:	c0 e0       	ldi	r28, 0x00	; 0
    12da:	8c 2f       	mov	r24, r28
    12dc:	73 df       	rcall	.-282    	; 0x11c4 <udc_iface_disable>
    12de:	cf 5f       	subi	r28, 0xFF	; 255
    12e0:	e0 91 bb 20 	lds	r30, 0x20BB
    12e4:	f0 91 bc 20 	lds	r31, 0x20BC
    12e8:	01 90       	ld	r0, Z+
    12ea:	f0 81       	ld	r31, Z
    12ec:	e0 2d       	mov	r30, r0
    12ee:	84 81       	ldd	r24, Z+4	; 0x04
    12f0:	c8 17       	cp	r28, r24
    12f2:	98 f3       	brcs	.-26     	; 0x12da <udc_reset+0x20>
    12f4:	10 92 be 20 	sts	0x20BE, r1
    12f8:	10 92 c2 20 	sts	0x20C2, r1
    12fc:	10 92 c3 20 	sts	0x20C3, r1
    1300:	cf 91       	pop	r28
    1302:	08 95       	ret

00001304 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1304:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1306:	80 91 be 20 	lds	r24, 0x20BE
    130a:	88 23       	and	r24, r24
    130c:	41 f1       	breq	.+80     	; 0x135e <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    130e:	e0 91 bb 20 	lds	r30, 0x20BB
    1312:	f0 91 bc 20 	lds	r31, 0x20BC
    1316:	a0 81       	ld	r26, Z
    1318:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    131a:	14 96       	adiw	r26, 0x04	; 4
    131c:	8c 91       	ld	r24, X
    131e:	88 23       	and	r24, r24
    1320:	f1 f0       	breq	.+60     	; 0x135e <udc_sof_notify+0x5a>
    1322:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1324:	8c 2f       	mov	r24, r28
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	02 80       	ldd	r0, Z+2	; 0x02
    132e:	f3 81       	ldd	r31, Z+3	; 0x03
    1330:	e0 2d       	mov	r30, r0
    1332:	e8 0f       	add	r30, r24
    1334:	f9 1f       	adc	r31, r25
    1336:	01 90       	ld	r0, Z+
    1338:	f0 81       	ld	r31, Z
    133a:	e0 2d       	mov	r30, r0
    133c:	00 84       	ldd	r0, Z+8	; 0x08
    133e:	f1 85       	ldd	r31, Z+9	; 0x09
    1340:	e0 2d       	mov	r30, r0
    1342:	30 97       	sbiw	r30, 0x00	; 0
    1344:	09 f0       	breq	.+2      	; 0x1348 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1346:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1348:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    134a:	e0 91 bb 20 	lds	r30, 0x20BB
    134e:	f0 91 bc 20 	lds	r31, 0x20BC
    1352:	a0 81       	ld	r26, Z
    1354:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1356:	14 96       	adiw	r26, 0x04	; 4
    1358:	8c 91       	ld	r24, X
    135a:	c8 17       	cp	r28, r24
    135c:	18 f3       	brcs	.-58     	; 0x1324 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    135e:	cf 91       	pop	r28
    1360:	08 95       	ret

00001362 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    136e:	10 92 60 24 	sts	0x2460, r1
    1372:	10 92 61 24 	sts	0x2461, r1
	udd_g_ctrlreq.callback = NULL;
    1376:	10 92 62 24 	sts	0x2462, r1
    137a:	10 92 63 24 	sts	0x2463, r1
	udd_g_ctrlreq.over_under_run = NULL;
    137e:	10 92 64 24 	sts	0x2464, r1
    1382:	10 92 65 24 	sts	0x2465, r1

	if (Udd_setup_is_in()) {
    1386:	20 91 56 24 	lds	r18, 0x2456
    138a:	22 23       	and	r18, r18
    138c:	3c f4       	brge	.+14     	; 0x139c <udc_process_setup+0x3a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    138e:	80 91 5c 24 	lds	r24, 0x245C
    1392:	90 91 5d 24 	lds	r25, 0x245D
    1396:	89 2b       	or	r24, r25
    1398:	09 f4       	brne	.+2      	; 0x139c <udc_process_setup+0x3a>
    139a:	9b c3       	rjmp	.+1846   	; 0x1ad2 <udc_process_setup+0x770>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    139c:	20 76       	andi	r18, 0x60	; 96
    139e:	20 34       	cpi	r18, 0x40	; 64
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <udc_process_setup+0x42>
    13a2:	08 c1       	rjmp	.+528    	; 0x15b4 <udc_process_setup+0x252>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    13a4:	80 91 57 24 	lds	r24, 0x2457
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	fc 01       	movw	r30, r24
    13ac:	e0 5a       	subi	r30, 0xA0	; 160
    13ae:	f1 09       	sbc	r31, r1
    13b0:	e8 30       	cpi	r30, 0x08	; 8
    13b2:	f1 05       	cpc	r31, r1
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <udc_process_setup+0x56>
    13b6:	f5 c0       	rjmp	.+490    	; 0x15a2 <udc_process_setup+0x240>
    13b8:	ea 5f       	subi	r30, 0xFA	; 250
    13ba:	fe 4f       	sbci	r31, 0xFE	; 254
    13bc:	0c 94 35 14 	jmp	0x286a	; 0x286a <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			asm("nop");
    13c0:	00 00       	nop
    13c2:	8b c3       	rjmp	.+1814   	; 0x1ada <udc_process_setup+0x778>
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    13c4:	e0 e0       	ldi	r30, 0x00	; 0
    13c6:	f8 e0       	ldi	r31, 0x08	; 8
    13c8:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    13ca:	80 91 58 24 	lds	r24, 0x2458
    13ce:	90 91 59 24 	lds	r25, 0x2459
    13d2:	86 ab       	std	Z+54, r24	; 0x36
    13d4:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    13d6:	80 91 5a 24 	lds	r24, 0x245A
    13da:	8f 70       	andi	r24, 0x0F	; 15
    13dc:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    13de:	cc e5       	ldi	r28, 0x5C	; 92
    13e0:	d4 e2       	ldi	r29, 0x24	; 36
    13e2:	68 81       	ld	r22, Y
    13e4:	79 81       	ldd	r23, Y+1	; 0x01
    13e6:	86 e5       	ldi	r24, 0x56	; 86
    13e8:	92 e2       	ldi	r25, 0x22	; 34
    13ea:	e0 d6       	rcall	.+3520   	; 0x21ac <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    13ec:	88 81       	ld	r24, Y
    13ee:	99 81       	ldd	r25, Y+1	; 0x01
    13f0:	20 91 04 20 	lds	r18, 0x2004
    13f4:	30 91 05 20 	lds	r19, 0x2005
    13f8:	82 17       	cp	r24, r18
    13fa:	93 07       	cpc	r25, r19
    13fc:	09 f4       	brne	.+2      	; 0x1400 <udc_process_setup+0x9e>
    13fe:	6d c3       	rjmp	.+1754   	; 0x1ada <udc_process_setup+0x778>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1400:	80 93 04 20 	sts	0x2004, r24
    1404:	90 93 05 20 	sts	0x2005, r25
				switch(global_mode){
    1408:	80 91 00 20 	lds	r24, 0x2000
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	88 30       	cpi	r24, 0x08	; 8
    1410:	91 05       	cpc	r25, r1
    1412:	08 f0       	brcs	.+2      	; 0x1416 <udc_process_setup+0xb4>
    1414:	c8 c0       	rjmp	.+400    	; 0x15a6 <udc_process_setup+0x244>
    1416:	fc 01       	movw	r30, r24
    1418:	e2 5f       	subi	r30, 0xF2	; 242
    141a:	fe 4f       	sbci	r31, 0xFE	; 254
    141c:	0c 94 35 14 	jmp	0x286a	; 0x286a <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1420:	46 d8       	rcall	.-3956   	; 0x4ae <tiny_dma_set_mode_0>
    1422:	5b c3       	rjmp	.+1718   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1424:	bd d8       	rcall	.-3718   	; 0x5a0 <tiny_dma_set_mode_1>
    1426:	59 c3       	rjmp	.+1714   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1428:	60 d9       	rcall	.-3392   	; 0x6ea <tiny_dma_set_mode_2>
    142a:	57 c3       	rjmp	.+1710   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 3:
					tiny_dma_set_mode_3();
    142c:	00 da       	rcall	.-3072   	; 0x82e <tiny_dma_set_mode_3>
    142e:	55 c3       	rjmp	.+1706   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1430:	95 da       	rcall	.-2774   	; 0x95c <tiny_dma_set_mode_4>
    1432:	53 c3       	rjmp	.+1702   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1434:	53 db       	rcall	.-2394   	; 0xadc <tiny_dma_set_mode_5>
    1436:	51 c3       	rjmp	.+1698   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1438:	98 db       	rcall	.-2256   	; 0xb6a <tiny_dma_set_mode_6>
    143a:	4f c3       	rjmp	.+1694   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 7:
					tiny_dma_set_mode_7();
    143c:	0e dc       	rcall	.-2020   	; 0xc5a <tiny_dma_set_mode_7>
    143e:	4d c3       	rjmp	.+1690   	; 0x1ada <udc_process_setup+0x778>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    1440:	e0 e4       	ldi	r30, 0x40	; 64
    1442:	f8 e0       	ldi	r31, 0x08	; 8
    1444:	10 82       	st	Z, r1
			auxDacBufLen = udd_g_ctrlreq.req.wLength;
    1446:	cc e5       	ldi	r28, 0x5C	; 92
    1448:	d4 e2       	ldi	r29, 0x24	; 36
    144a:	68 81       	ld	r22, Y
    144c:	79 81       	ldd	r23, Y+1	; 0x01
    144e:	60 93 02 20 	sts	0x2002, r22
    1452:	70 93 03 20 	sts	0x2003, r23
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1456:	80 91 58 24 	lds	r24, 0x2458
    145a:	90 91 59 24 	lds	r25, 0x2459
    145e:	86 ab       	std	Z+54, r24	; 0x36
    1460:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1462:	80 91 5a 24 	lds	r24, 0x245A
    1466:	8f 70       	andi	r24, 0x0F	; 15
    1468:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    146a:	86 e6       	ldi	r24, 0x66	; 102
    146c:	94 e2       	ldi	r25, 0x24	; 36
    146e:	9e d6       	rcall	.+3388   	; 0x21ac <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1470:	88 81       	ld	r24, Y
    1472:	99 81       	ldd	r25, Y+1	; 0x01
    1474:	20 91 04 20 	lds	r18, 0x2004
    1478:	30 91 05 20 	lds	r19, 0x2005
    147c:	82 17       	cp	r24, r18
    147e:	93 07       	cpc	r25, r19
    1480:	09 f4       	brne	.+2      	; 0x1484 <udc_process_setup+0x122>
    1482:	2b c3       	rjmp	.+1622   	; 0x1ada <udc_process_setup+0x778>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1484:	80 93 04 20 	sts	0x2004, r24
    1488:	90 93 05 20 	sts	0x2005, r25
				switch(global_mode){
    148c:	80 91 00 20 	lds	r24, 0x2000
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	88 30       	cpi	r24, 0x08	; 8
    1494:	91 05       	cpc	r25, r1
    1496:	08 f0       	brcs	.+2      	; 0x149a <udc_process_setup+0x138>
    1498:	88 c0       	rjmp	.+272    	; 0x15aa <udc_process_setup+0x248>
    149a:	fc 01       	movw	r30, r24
    149c:	ea 5e       	subi	r30, 0xEA	; 234
    149e:	fe 4f       	sbci	r31, 0xFE	; 254
    14a0:	0c 94 35 14 	jmp	0x286a	; 0x286a <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    14a4:	04 d8       	rcall	.-4088   	; 0x4ae <tiny_dma_set_mode_0>
    14a6:	19 c3       	rjmp	.+1586   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 1:
					tiny_dma_set_mode_1();
    14a8:	7b d8       	rcall	.-3850   	; 0x5a0 <tiny_dma_set_mode_1>
    14aa:	17 c3       	rjmp	.+1582   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 2:
					tiny_dma_set_mode_2();
    14ac:	1e d9       	rcall	.-3524   	; 0x6ea <tiny_dma_set_mode_2>
    14ae:	15 c3       	rjmp	.+1578   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 3:
					tiny_dma_set_mode_3();
    14b0:	be d9       	rcall	.-3204   	; 0x82e <tiny_dma_set_mode_3>
    14b2:	13 c3       	rjmp	.+1574   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 4:
					tiny_dma_set_mode_4();
    14b4:	53 da       	rcall	.-2906   	; 0x95c <tiny_dma_set_mode_4>
    14b6:	11 c3       	rjmp	.+1570   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 5:
					tiny_dma_set_mode_5();
    14b8:	11 db       	rcall	.-2526   	; 0xadc <tiny_dma_set_mode_5>
    14ba:	0f c3       	rjmp	.+1566   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 6:
					tiny_dma_set_mode_6();
    14bc:	56 db       	rcall	.-2388   	; 0xb6a <tiny_dma_set_mode_6>
    14be:	0d c3       	rjmp	.+1562   	; 0x1ada <udc_process_setup+0x778>
					break;
					case 7:
					tiny_dma_set_mode_7();
    14c0:	cc db       	rcall	.-2152   	; 0xc5a <tiny_dma_set_mode_7>
    14c2:	0b c3       	rjmp	.+1558   	; 0x1ada <udc_process_setup+0x778>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    14c4:	e0 e4       	ldi	r30, 0x40	; 64
    14c6:	f9 e0       	ldi	r31, 0x09	; 9
    14c8:	10 a6       	std	Z+40, r1	; 0x28
    14ca:	11 a6       	std	Z+41, r1	; 0x29
			PSU_target = udd_g_ctrlreq.req.wValue;
    14cc:	80 91 58 24 	lds	r24, 0x2458
    14d0:	80 93 b2 20 	sts	0x20B2, r24
    14d4:	02 c3       	rjmp	.+1540   	; 0x1ada <udc_process_setup+0x778>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    14d6:	80 91 58 24 	lds	r24, 0x2458
    14da:	e0 e2       	ldi	r30, 0x20	; 32
    14dc:	f6 e0       	ldi	r31, 0x06	; 6
    14de:	84 83       	std	Z+4, r24	; 0x04
    14e0:	fc c2       	rjmp	.+1528   	; 0x1ada <udc_process_setup+0x778>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    14e2:	80 91 58 24 	lds	r24, 0x2458
    14e6:	90 91 59 24 	lds	r25, 0x2459
    14ea:	88 30       	cpi	r24, 0x08	; 8
    14ec:	91 05       	cpc	r25, r1
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <udc_process_setup+0x190>
    14f0:	5e c0       	rjmp	.+188    	; 0x15ae <udc_process_setup+0x24c>
    14f2:	fc 01       	movw	r30, r24
    14f4:	e2 5e       	subi	r30, 0xE2	; 226
    14f6:	fe 4f       	sbci	r31, 0xFE	; 254
    14f8:	0c 94 35 14 	jmp	0x286a	; 0x286a <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	0e 94 e7 01 	call	0x3ce	; 0x3ce <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1504:	80 91 5a 24 	lds	r24, 0x245A
    1508:	0e 94 bb 01 	call	0x376	; 0x376 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    150c:	0e 94 57 02 	call	0x4ae	; 0x4ae <tiny_dma_set_mode_0>
    1510:	e4 c2       	rjmp	.+1480   	; 0x1ada <udc_process_setup+0x778>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	0e 94 e7 01 	call	0x3ce	; 0x3ce <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    151a:	80 91 5a 24 	lds	r24, 0x245A
    151e:	0e 94 bb 01 	call	0x376	; 0x376 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    1522:	3e d8       	rcall	.-3972   	; 0x5a0 <tiny_dma_set_mode_1>
    1524:	da c2       	rjmp	.+1460   	; 0x1ada <udc_process_setup+0x778>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1526:	61 e0       	ldi	r22, 0x01	; 1
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    152e:	ca e5       	ldi	r28, 0x5A	; 90
    1530:	d4 e2       	ldi	r29, 0x24	; 36
    1532:	88 81       	ld	r24, Y
    1534:	0e 94 bb 01 	call	0x376	; 0x376 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	0e 94 ca 01 	call	0x394	; 0x394 <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    153e:	d5 d8       	rcall	.-3670   	; 0x6ea <tiny_dma_set_mode_2>
    1540:	cc c2       	rjmp	.+1432   	; 0x1ada <udc_process_setup+0x778>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    1542:	75 d9       	rcall	.-3350   	; 0x82e <tiny_dma_set_mode_3>
    1544:	ca c2       	rjmp	.+1428   	; 0x1ada <udc_process_setup+0x778>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    1546:	0a da       	rcall	.-3052   	; 0x95c <tiny_dma_set_mode_4>
    1548:	c8 c2       	rjmp	.+1424   	; 0x1ada <udc_process_setup+0x778>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1552:	80 91 5a 24 	lds	r24, 0x245A
    1556:	0e 94 bb 01 	call	0x376	; 0x376 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    155a:	c0 da       	rcall	.-2688   	; 0xadc <tiny_dma_set_mode_5>
    155c:	be c2       	rjmp	.+1404   	; 0x1ada <udc_process_setup+0x778>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    155e:	61 e0       	ldi	r22, 0x01	; 1
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	0e 94 e7 01 	call	0x3ce	; 0x3ce <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1566:	80 91 5a 24 	lds	r24, 0x245A
    156a:	0e 94 bb 01 	call	0x376	; 0x376 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    156e:	fd da       	rcall	.-2566   	; 0xb6a <tiny_dma_set_mode_6>
    1570:	b4 c2       	rjmp	.+1384   	; 0x1ada <udc_process_setup+0x778>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1572:	62 e0       	ldi	r22, 0x02	; 2
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	0e 94 e7 01 	call	0x3ce	; 0x3ce <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    157a:	80 91 5a 24 	lds	r24, 0x245A
    157e:	80 68       	ori	r24, 0x80	; 128
    1580:	0e 94 bb 01 	call	0x376	; 0x376 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    1584:	6a db       	rcall	.-2348   	; 0xc5a <tiny_dma_set_mode_7>
    1586:	a9 c2       	rjmp	.+1362   	; 0x1ada <udc_process_setup+0x778>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1588:	80 91 58 24 	lds	r24, 0x2458
    158c:	e0 e8       	ldi	r30, 0x80	; 128
    158e:	f6 e0       	ldi	r31, 0x06	; 6
    1590:	84 83       	std	Z+4, r24	; 0x04
    1592:	a3 c2       	rjmp	.+1350   	; 0x1ada <udc_process_setup+0x778>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1594:	e9 e7       	ldi	r30, 0x79	; 121
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	88 ed       	ldi	r24, 0xD8	; 216
    159c:	f8 94       	cli
    159e:	84 bf       	out	0x34, r24	; 52
    15a0:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    15a2:	00 e0       	ldi	r16, 0x00	; 0
    15a4:	05 c0       	rjmp	.+10     	; 0x15b0 <udc_process_setup+0x24e>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    15a6:	01 e0       	ldi	r16, 0x01	; 1
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <udc_process_setup+0x24e>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    15aa:	01 e0       	ldi	r16, 0x01	; 1
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <udc_process_setup+0x24e>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    15ae:	00 e0       	ldi	r16, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    15b0:	01 11       	cpse	r16, r1
    15b2:	94 c2       	rjmp	.+1320   	; 0x1adc <udc_process_setup+0x77a>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    15b4:	20 91 56 24 	lds	r18, 0x2456
    15b8:	82 2f       	mov	r24, r18
    15ba:	80 76       	andi	r24, 0x60	; 96
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <udc_process_setup+0x25e>
    15be:	0e c2       	rjmp	.+1052   	; 0x19dc <udc_process_setup+0x67a>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    15c0:	22 23       	and	r18, r18
    15c2:	0c f0       	brlt	.+2      	; 0x15c6 <udc_process_setup+0x264>
    15c4:	17 c1       	rjmp	.+558    	; 0x17f4 <udc_process_setup+0x492>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    15c6:	80 91 5c 24 	lds	r24, 0x245C
    15ca:	90 91 5d 24 	lds	r25, 0x245D
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <udc_process_setup+0x272>
    15d2:	04 c2       	rjmp	.+1032   	; 0x19dc <udc_process_setup+0x67a>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    15d4:	2f 71       	andi	r18, 0x1F	; 31
    15d6:	09 f0       	breq	.+2      	; 0x15da <udc_process_setup+0x278>
    15d8:	b1 c0       	rjmp	.+354    	; 0x173c <udc_process_setup+0x3da>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    15da:	30 91 57 24 	lds	r19, 0x2457
    15de:	36 30       	cpi	r19, 0x06	; 6
    15e0:	81 f0       	breq	.+32     	; 0x1602 <udc_process_setup+0x2a0>
    15e2:	38 30       	cpi	r19, 0x08	; 8
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <udc_process_setup+0x286>
    15e6:	9f c0       	rjmp	.+318    	; 0x1726 <udc_process_setup+0x3c4>
    15e8:	31 11       	cpse	r19, r1
    15ea:	a8 c0       	rjmp	.+336    	; 0x173c <udc_process_setup+0x3da>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    15ec:	02 97       	sbiw	r24, 0x02	; 2
    15ee:	39 f4       	brne	.+14     	; 0x15fe <udc_process_setup+0x29c>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    15f0:	62 e0       	ldi	r22, 0x02	; 2
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	82 ec       	ldi	r24, 0xC2	; 194
    15f6:	90 e2       	ldi	r25, 0x20	; 32
    15f8:	d9 d5       	rcall	.+2994   	; 0x21ac <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
    15fa:	01 e0       	ldi	r16, 0x01	; 1
    15fc:	ed c1       	rjmp	.+986    	; 0x19d8 <udc_process_setup+0x676>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
    15fe:	00 e0       	ldi	r16, 0x00	; 0
    1600:	eb c1       	rjmp	.+982    	; 0x19d8 <udc_process_setup+0x676>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1602:	20 91 58 24 	lds	r18, 0x2458
    1606:	30 91 59 24 	lds	r19, 0x2459

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    160a:	83 2f       	mov	r24, r19
    160c:	99 27       	eor	r25, r25
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	91 05       	cpc	r25, r1
    1612:	99 f0       	breq	.+38     	; 0x163a <udc_process_setup+0x2d8>
    1614:	1c f4       	brge	.+6      	; 0x161c <udc_process_setup+0x2ba>
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	39 f0       	breq	.+14     	; 0x1628 <udc_process_setup+0x2c6>
    161a:	7b c0       	rjmp	.+246    	; 0x1712 <udc_process_setup+0x3b0>
    161c:	83 30       	cpi	r24, 0x03	; 3
    161e:	91 05       	cpc	r25, r1
    1620:	d9 f1       	breq	.+118    	; 0x1698 <udc_process_setup+0x336>
    1622:	0f 97       	sbiw	r24, 0x0f	; 15
    1624:	59 f1       	breq	.+86     	; 0x167c <udc_process_setup+0x31a>
    1626:	75 c0       	rjmp	.+234    	; 0x1712 <udc_process_setup+0x3b0>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1628:	80 91 10 20 	lds	r24, 0x2010
    162c:	90 91 11 20 	lds	r25, 0x2011
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1630:	dc 01       	movw	r26, r24
    1632:	6c 91       	ld	r22, X
    1634:	70 e0       	ldi	r23, 0x00	; 0
    1636:	ba d5       	rcall	.+2932   	; 0x21ac <udd_set_setup_payload>
    1638:	5b c0       	rjmp	.+182    	; 0x16f0 <udc_process_setup+0x38e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    163a:	e0 91 10 20 	lds	r30, 0x2010
    163e:	f0 91 11 20 	lds	r31, 0x2011
    1642:	81 89       	ldd	r24, Z+17	; 0x11
    1644:	28 17       	cp	r18, r24
    1646:	08 f0       	brcs	.+2      	; 0x164a <udc_process_setup+0x2e8>
    1648:	66 c0       	rjmp	.+204    	; 0x1716 <udc_process_setup+0x3b4>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    164a:	c9 01       	movw	r24, r18
    164c:	99 27       	eor	r25, r25
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	e0 91 12 20 	lds	r30, 0x2012
    165a:	f0 91 13 20 	lds	r31, 0x2013
    165e:	e8 0f       	add	r30, r24
    1660:	f9 1f       	adc	r31, r25
    1662:	80 81       	ld	r24, Z
    1664:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1666:	fc 01       	movw	r30, r24
    1668:	62 81       	ldd	r22, Z+2	; 0x02
    166a:	73 81       	ldd	r23, Z+3	; 0x03
    166c:	9f d5       	rcall	.+2878   	; 0x21ac <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    166e:	e0 91 5e 24 	lds	r30, 0x245E
    1672:	f0 91 5f 24 	lds	r31, 0x245F
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	81 83       	std	Z+1, r24	; 0x01
    167a:	3a c0       	rjmp	.+116    	; 0x16f0 <udc_process_setup+0x38e>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    167c:	80 91 14 20 	lds	r24, 0x2014
    1680:	90 91 15 20 	lds	r25, 0x2015
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	09 f4       	brne	.+2      	; 0x168a <udc_process_setup+0x328>
    1688:	48 c0       	rjmp	.+144    	; 0x171a <udc_process_setup+0x3b8>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    168a:	dc 01       	movw	r26, r24
    168c:	12 96       	adiw	r26, 0x02	; 2
    168e:	6d 91       	ld	r22, X+
    1690:	7c 91       	ld	r23, X
    1692:	13 97       	sbiw	r26, 0x03	; 3
    1694:	8b d5       	rcall	.+2838   	; 0x21ac <udd_set_setup_payload>
    1696:	2c c0       	rjmp	.+88     	; 0x16f0 <udc_process_setup+0x38e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1698:	33 27       	eor	r19, r19
    169a:	21 30       	cpi	r18, 0x01	; 1
    169c:	31 05       	cpc	r19, r1
    169e:	59 f0       	breq	.+22     	; 0x16b6 <udc_process_setup+0x354>
    16a0:	20 f0       	brcs	.+8      	; 0x16aa <udc_process_setup+0x348>
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	59 f0       	breq	.+22     	; 0x16be <udc_process_setup+0x35c>
    16a8:	3a c0       	rjmp	.+116    	; 0x171e <udc_process_setup+0x3bc>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    16aa:	64 e0       	ldi	r22, 0x04	; 4
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	8e ea       	ldi	r24, 0xAE	; 174
    16b0:	90 e2       	ldi	r25, 0x20	; 32
    16b2:	7c d5       	rcall	.+2808   	; 0x21ac <udd_set_setup_payload>
    16b4:	1d c0       	rjmp	.+58     	; 0x16f0 <udc_process_setup+0x38e>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    16b6:	83 ea       	ldi	r24, 0xA3	; 163
    16b8:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    16ba:	29 e0       	ldi	r18, 0x09	; 9
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <udc_process_setup+0x362>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    16be:	8a e8       	ldi	r24, 0x8A	; 138
    16c0:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    16c2:	28 e1       	ldi	r18, 0x18	; 24
    16c4:	38 2f       	mov	r19, r24
    16c6:	aa e5       	ldi	r26, 0x5A	; 90
    16c8:	b0 e2       	ldi	r27, 0x20	; 32
    16ca:	e8 2f       	mov	r30, r24
    16cc:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    16ce:	81 91       	ld	r24, Z+
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	8d 93       	st	X+, r24
    16d4:	9d 93       	st	X+, r25
    16d6:	8e 2f       	mov	r24, r30
    16d8:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    16da:	82 17       	cp	r24, r18
    16dc:	c0 f3       	brcs	.-16     	; 0x16ce <udc_process_setup+0x36c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    16de:	22 0f       	add	r18, r18
    16e0:	62 e0       	ldi	r22, 0x02	; 2
    16e2:	62 0f       	add	r22, r18
    16e4:	60 93 58 20 	sts	0x2058, r22
		udd_set_setup_payload(
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	88 e5       	ldi	r24, 0x58	; 88
    16ec:	90 e2       	ldi	r25, 0x20	; 32
    16ee:	5e d5       	rcall	.+2748   	; 0x21ac <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    16f0:	80 91 5c 24 	lds	r24, 0x245C
    16f4:	90 91 5d 24 	lds	r25, 0x245D
    16f8:	20 91 60 24 	lds	r18, 0x2460
    16fc:	30 91 61 24 	lds	r19, 0x2461
    1700:	82 17       	cp	r24, r18
    1702:	93 07       	cpc	r25, r19
    1704:	70 f4       	brcc	.+28     	; 0x1722 <udc_process_setup+0x3c0>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1706:	80 93 60 24 	sts	0x2460, r24
    170a:	90 93 61 24 	sts	0x2461, r25
	}
	return true;
    170e:	01 e0       	ldi	r16, 0x01	; 1
    1710:	63 c1       	rjmp	.+710    	; 0x19d8 <udc_process_setup+0x676>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1712:	00 e0       	ldi	r16, 0x00	; 0
    1714:	61 c1       	rjmp	.+706    	; 0x19d8 <udc_process_setup+0x676>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
    1716:	00 e0       	ldi	r16, 0x00	; 0
    1718:	5f c1       	rjmp	.+702    	; 0x19d8 <udc_process_setup+0x676>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
    171a:	00 e0       	ldi	r16, 0x00	; 0
    171c:	5d c1       	rjmp	.+698    	; 0x19d8 <udc_process_setup+0x676>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
    171e:	00 e0       	ldi	r16, 0x00	; 0
    1720:	5b c1       	rjmp	.+694    	; 0x19d8 <udc_process_setup+0x676>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
    1722:	01 e0       	ldi	r16, 0x01	; 1
    1724:	59 c1       	rjmp	.+690    	; 0x19d8 <udc_process_setup+0x676>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	39 f4       	brne	.+14     	; 0x1738 <udc_process_setup+0x3d6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	8e eb       	ldi	r24, 0xBE	; 190
    1730:	90 e2       	ldi	r25, 0x20	; 32
    1732:	3c d5       	rcall	.+2680   	; 0x21ac <udd_set_setup_payload>
	return true;
    1734:	01 e0       	ldi	r16, 0x01	; 1
    1736:	50 c1       	rjmp	.+672    	; 0x19d8 <udc_process_setup+0x676>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
    1738:	00 e0       	ldi	r16, 0x00	; 0
    173a:	4e c1       	rjmp	.+668    	; 0x19d8 <udc_process_setup+0x676>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    173c:	21 30       	cpi	r18, 0x01	; 1
    173e:	09 f0       	breq	.+2      	; 0x1742 <udc_process_setup+0x3e0>
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <udc_process_setup+0x45e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1742:	30 91 57 24 	lds	r19, 0x2457
    1746:	3a 30       	cpi	r19, 0x0A	; 10
    1748:	d9 f5       	brne	.+118    	; 0x17c0 <udc_process_setup+0x45e>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	99 f5       	brne	.+102    	; 0x17b4 <udc_process_setup+0x452>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    174e:	80 91 be 20 	lds	r24, 0x20BE
    1752:	88 23       	and	r24, r24
    1754:	89 f1       	breq	.+98     	; 0x17b8 <udc_process_setup+0x456>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1756:	c0 91 5a 24 	lds	r28, 0x245A
    175a:	d0 91 5b 24 	lds	r29, 0x245B
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    175e:	e0 90 bb 20 	lds	r14, 0x20BB
    1762:	f0 90 bc 20 	lds	r15, 0x20BC
    1766:	d7 01       	movw	r26, r14
    1768:	ed 91       	ld	r30, X+
    176a:	fc 91       	ld	r31, X
    176c:	84 81       	ldd	r24, Z+4	; 0x04
    176e:	c8 17       	cp	r28, r24
    1770:	28 f5       	brcc	.+74     	; 0x17bc <udc_process_setup+0x45a>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	8c 2f       	mov	r24, r28
    1776:	ec dc       	rcall	.-1576   	; 0x1150 <udc_update_iface_desc>
    1778:	08 2f       	mov	r16, r24
    177a:	88 23       	and	r24, r24
    177c:	09 f4       	brne	.+2      	; 0x1780 <udc_process_setup+0x41e>
    177e:	2c c1       	rjmp	.+600    	; 0x19d8 <udc_process_setup+0x676>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1780:	ce 01       	movw	r24, r28
    1782:	99 27       	eor	r25, r25
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	d7 01       	movw	r26, r14
    178a:	12 96       	adiw	r26, 0x02	; 2
    178c:	ed 91       	ld	r30, X+
    178e:	fc 91       	ld	r31, X
    1790:	13 97       	sbiw	r26, 0x03	; 3
    1792:	e8 0f       	add	r30, r24
    1794:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1796:	01 90       	ld	r0, Z+
    1798:	f0 81       	ld	r31, Z
    179a:	e0 2d       	mov	r30, r0
    179c:	06 80       	ldd	r0, Z+6	; 0x06
    179e:	f7 81       	ldd	r31, Z+7	; 0x07
    17a0:	e0 2d       	mov	r30, r0
    17a2:	09 95       	icall
    17a4:	80 93 c0 20 	sts	0x20C0, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    17a8:	61 e0       	ldi	r22, 0x01	; 1
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	80 ec       	ldi	r24, 0xC0	; 192
    17ae:	90 e2       	ldi	r25, 0x20	; 32
    17b0:	fd d4       	rcall	.+2554   	; 0x21ac <udd_set_setup_payload>
    17b2:	12 c1       	rjmp	.+548    	; 0x19d8 <udc_process_setup+0x676>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
    17b4:	00 e0       	ldi	r16, 0x00	; 0
    17b6:	10 c1       	rjmp	.+544    	; 0x19d8 <udc_process_setup+0x676>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    17b8:	00 e0       	ldi	r16, 0x00	; 0
    17ba:	0e c1       	rjmp	.+540    	; 0x19d8 <udc_process_setup+0x676>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    17bc:	00 e0       	ldi	r16, 0x00	; 0
    17be:	0c c1       	rjmp	.+536    	; 0x19d8 <udc_process_setup+0x676>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    17c0:	22 30       	cpi	r18, 0x02	; 2
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <udc_process_setup+0x464>
    17c4:	0b c1       	rjmp	.+534    	; 0x19dc <udc_process_setup+0x67a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    17c6:	20 91 57 24 	lds	r18, 0x2457
    17ca:	21 11       	cpse	r18, r1
    17cc:	00 c1       	rjmp	.+512    	; 0x19ce <udc_process_setup+0x66c>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    17ce:	02 97       	sbiw	r24, 0x02	; 2
    17d0:	79 f4       	brne	.+30     	; 0x17f0 <udc_process_setup+0x48e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    17d2:	80 91 5a 24 	lds	r24, 0x245A
    17d6:	49 d5       	rcall	.+2706   	; 0x226a <udd_ep_is_halted>
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	80 93 b7 20 	sts	0x20B7, r24
    17de:	90 93 b8 20 	sts	0x20B8, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    17e2:	62 e0       	ldi	r22, 0x02	; 2
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	87 eb       	ldi	r24, 0xB7	; 183
    17e8:	90 e2       	ldi	r25, 0x20	; 32
    17ea:	e0 d4       	rcall	.+2496   	; 0x21ac <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
    17ec:	01 e0       	ldi	r16, 0x01	; 1
    17ee:	f4 c0       	rjmp	.+488    	; 0x19d8 <udc_process_setup+0x676>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
    17f0:	00 e0       	ldi	r16, 0x00	; 0
    17f2:	f2 c0       	rjmp	.+484    	; 0x19d8 <udc_process_setup+0x676>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    17f4:	2f 71       	andi	r18, 0x1F	; 31
    17f6:	09 f0       	breq	.+2      	; 0x17fa <udc_process_setup+0x498>
    17f8:	90 c0       	rjmp	.+288    	; 0x191a <udc_process_setup+0x5b8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    17fa:	80 91 57 24 	lds	r24, 0x2457
    17fe:	83 30       	cpi	r24, 0x03	; 3
    1800:	09 f4       	brne	.+2      	; 0x1804 <udc_process_setup+0x4a2>
    1802:	e7 c0       	rjmp	.+462    	; 0x19d2 <udc_process_setup+0x670>
    1804:	18 f4       	brcc	.+6      	; 0x180c <udc_process_setup+0x4aa>
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	b1 f0       	breq	.+44     	; 0x1836 <udc_process_setup+0x4d4>
    180a:	87 c0       	rjmp	.+270    	; 0x191a <udc_process_setup+0x5b8>
    180c:	85 30       	cpi	r24, 0x05	; 5
    180e:	19 f0       	breq	.+6      	; 0x1816 <udc_process_setup+0x4b4>
    1810:	89 30       	cpi	r24, 0x09	; 9
    1812:	61 f1       	breq	.+88     	; 0x186c <udc_process_setup+0x50a>
    1814:	82 c0       	rjmp	.+260    	; 0x191a <udc_process_setup+0x5b8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1816:	80 91 5c 24 	lds	r24, 0x245C
    181a:	90 91 5d 24 	lds	r25, 0x245D
    181e:	89 2b       	or	r24, r25
    1820:	41 f4       	brne	.+16     	; 0x1832 <udc_process_setup+0x4d0>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1822:	82 ea       	ldi	r24, 0xA2	; 162
    1824:	98 e0       	ldi	r25, 0x08	; 8
    1826:	80 93 62 24 	sts	0x2462, r24
    182a:	90 93 63 24 	sts	0x2463, r25
	return true;
    182e:	01 e0       	ldi	r16, 0x01	; 1
    1830:	d3 c0       	rjmp	.+422    	; 0x19d8 <udc_process_setup+0x676>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1832:	00 e0       	ldi	r16, 0x00	; 0
    1834:	d1 c0       	rjmp	.+418    	; 0x19d8 <udc_process_setup+0x676>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1836:	80 91 5c 24 	lds	r24, 0x245C
    183a:	90 91 5d 24 	lds	r25, 0x245D
    183e:	89 2b       	or	r24, r25
    1840:	89 f4       	brne	.+34     	; 0x1864 <udc_process_setup+0x502>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1842:	80 91 58 24 	lds	r24, 0x2458
    1846:	90 91 59 24 	lds	r25, 0x2459
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	69 f4       	brne	.+26     	; 0x1868 <udc_process_setup+0x506>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    184e:	80 91 c2 20 	lds	r24, 0x20C2
    1852:	90 91 c3 20 	lds	r25, 0x20C3
    1856:	8d 7f       	andi	r24, 0xFD	; 253
    1858:	80 93 c2 20 	sts	0x20C2, r24
    185c:	90 93 c3 20 	sts	0x20C3, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    1860:	01 e0       	ldi	r16, 0x01	; 1
    1862:	ba c0       	rjmp	.+372    	; 0x19d8 <udc_process_setup+0x676>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1864:	00 e0       	ldi	r16, 0x00	; 0
    1866:	b8 c0       	rjmp	.+368    	; 0x19d8 <udc_process_setup+0x676>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    1868:	00 e0       	ldi	r16, 0x00	; 0
    186a:	b6 c0       	rjmp	.+364    	; 0x19d8 <udc_process_setup+0x676>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    186c:	80 91 5c 24 	lds	r24, 0x245C
    1870:	90 91 5d 24 	lds	r25, 0x245D
    1874:	89 2b       	or	r24, r25
    1876:	09 f0       	breq	.+2      	; 0x187a <udc_process_setup+0x518>
    1878:	46 c0       	rjmp	.+140    	; 0x1906 <udc_process_setup+0x5a4>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    187a:	95 d4       	rcall	.+2346   	; 0x21a6 <udd_getaddress>
    187c:	88 23       	and	r24, r24
    187e:	09 f4       	brne	.+2      	; 0x1882 <udc_process_setup+0x520>
    1880:	44 c0       	rjmp	.+136    	; 0x190a <udc_process_setup+0x5a8>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1882:	20 91 58 24 	lds	r18, 0x2458
    1886:	30 91 59 24 	lds	r19, 0x2459
    188a:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    188c:	e0 91 10 20 	lds	r30, 0x2010
    1890:	f0 91 11 20 	lds	r31, 0x2011
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1894:	81 89       	ldd	r24, Z+17	; 0x11
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	82 17       	cp	r24, r18
    189a:	93 07       	cpc	r25, r19
    189c:	c0 f1       	brcs	.+112    	; 0x190e <udc_process_setup+0x5ac>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    189e:	0d dd       	rcall	.-1510   	; 0x12ba <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    18a0:	80 91 58 24 	lds	r24, 0x2458
    18a4:	90 91 59 24 	lds	r25, 0x2459
    18a8:	80 93 be 20 	sts	0x20BE, r24
	if (udc_num_configuration == 0) {
    18ac:	88 23       	and	r24, r24
    18ae:	89 f1       	breq	.+98     	; 0x1912 <udc_process_setup+0x5b0>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    18b0:	99 27       	eor	r25, r25
    18b2:	81 50       	subi	r24, 0x01	; 1
    18b4:	90 4c       	sbci	r25, 0xC0	; 192
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	e0 91 12 20 	lds	r30, 0x2012
    18c2:	f0 91 13 20 	lds	r31, 0x2013
    18c6:	e8 0f       	add	r30, r24
    18c8:	f9 1f       	adc	r31, r25
    18ca:	e0 93 bb 20 	sts	0x20BB, r30
    18ce:	f0 93 bc 20 	sts	0x20BC, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18d2:	01 90       	ld	r0, Z+
    18d4:	f0 81       	ld	r31, Z
    18d6:	e0 2d       	mov	r30, r0
    18d8:	84 81       	ldd	r24, Z+4	; 0x04
    18da:	88 23       	and	r24, r24
    18dc:	e1 f0       	breq	.+56     	; 0x1916 <udc_process_setup+0x5b4>
    18de:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	8c 2f       	mov	r24, r28
    18e4:	b1 dc       	rcall	.-1694   	; 0x1248 <udc_iface_enable>
    18e6:	08 2f       	mov	r16, r24
    18e8:	88 23       	and	r24, r24
    18ea:	09 f4       	brne	.+2      	; 0x18ee <udc_process_setup+0x58c>
    18ec:	75 c0       	rjmp	.+234    	; 0x19d8 <udc_process_setup+0x676>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    18ee:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18f0:	e0 91 bb 20 	lds	r30, 0x20BB
    18f4:	f0 91 bc 20 	lds	r31, 0x20BC
    18f8:	01 90       	ld	r0, Z+
    18fa:	f0 81       	ld	r31, Z
    18fc:	e0 2d       	mov	r30, r0
    18fe:	84 81       	ldd	r24, Z+4	; 0x04
    1900:	c8 17       	cp	r28, r24
    1902:	70 f3       	brcs	.-36     	; 0x18e0 <udc_process_setup+0x57e>
    1904:	69 c0       	rjmp	.+210    	; 0x19d8 <udc_process_setup+0x676>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1906:	00 e0       	ldi	r16, 0x00	; 0
    1908:	67 c0       	rjmp	.+206    	; 0x19d8 <udc_process_setup+0x676>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
    190a:	00 e0       	ldi	r16, 0x00	; 0
    190c:	65 c0       	rjmp	.+202    	; 0x19d8 <udc_process_setup+0x676>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    190e:	00 e0       	ldi	r16, 0x00	; 0
    1910:	63 c0       	rjmp	.+198    	; 0x19d8 <udc_process_setup+0x676>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
    1912:	01 e0       	ldi	r16, 0x01	; 1
    1914:	61 c0       	rjmp	.+194    	; 0x19d8 <udc_process_setup+0x676>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    1916:	01 e0       	ldi	r16, 0x01	; 1
    1918:	5f c0       	rjmp	.+190    	; 0x19d8 <udc_process_setup+0x676>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    191a:	21 30       	cpi	r18, 0x01	; 1
    191c:	09 f5       	brne	.+66     	; 0x1960 <udc_process_setup+0x5fe>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    191e:	80 91 57 24 	lds	r24, 0x2457
    1922:	8b 30       	cpi	r24, 0x0B	; 11
    1924:	e9 f4       	brne	.+58     	; 0x1960 <udc_process_setup+0x5fe>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1926:	80 91 5c 24 	lds	r24, 0x245C
    192a:	90 91 5d 24 	lds	r25, 0x245D
    192e:	89 2b       	or	r24, r25
    1930:	99 f4       	brne	.+38     	; 0x1958 <udc_process_setup+0x5f6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1932:	80 91 be 20 	lds	r24, 0x20BE
    1936:	88 23       	and	r24, r24
    1938:	89 f0       	breq	.+34     	; 0x195c <udc_process_setup+0x5fa>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    193a:	c0 91 5a 24 	lds	r28, 0x245A
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    193e:	d0 91 58 24 	lds	r29, 0x2458

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1942:	8c 2f       	mov	r24, r28
    1944:	3f dc       	rcall	.-1922   	; 0x11c4 <udc_iface_disable>
    1946:	08 2f       	mov	r16, r24
    1948:	88 23       	and	r24, r24
    194a:	09 f4       	brne	.+2      	; 0x194e <udc_process_setup+0x5ec>
    194c:	45 c0       	rjmp	.+138    	; 0x19d8 <udc_process_setup+0x676>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    194e:	6d 2f       	mov	r22, r29
    1950:	8c 2f       	mov	r24, r28
    1952:	7a dc       	rcall	.-1804   	; 0x1248 <udc_iface_enable>
    1954:	08 2f       	mov	r16, r24
    1956:	40 c0       	rjmp	.+128    	; 0x19d8 <udc_process_setup+0x676>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
    1958:	00 e0       	ldi	r16, 0x00	; 0
    195a:	3e c0       	rjmp	.+124    	; 0x19d8 <udc_process_setup+0x676>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    195c:	00 e0       	ldi	r16, 0x00	; 0
    195e:	3c c0       	rjmp	.+120    	; 0x19d8 <udc_process_setup+0x676>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	09 f0       	breq	.+2      	; 0x1966 <udc_process_setup+0x604>
    1964:	3b c0       	rjmp	.+118    	; 0x19dc <udc_process_setup+0x67a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1966:	80 91 57 24 	lds	r24, 0x2457
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	19 f0       	breq	.+6      	; 0x1974 <udc_process_setup+0x612>
    196e:	83 30       	cpi	r24, 0x03	; 3
    1970:	b1 f0       	breq	.+44     	; 0x199e <udc_process_setup+0x63c>
    1972:	31 c0       	rjmp	.+98     	; 0x19d6 <udc_process_setup+0x674>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1974:	80 91 5c 24 	lds	r24, 0x245C
    1978:	90 91 5d 24 	lds	r25, 0x245D
    197c:	89 2b       	or	r24, r25
    197e:	59 f4       	brne	.+22     	; 0x1996 <udc_process_setup+0x634>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1980:	80 91 58 24 	lds	r24, 0x2458
    1984:	90 91 59 24 	lds	r25, 0x2459
    1988:	89 2b       	or	r24, r25
    198a:	39 f4       	brne	.+14     	; 0x199a <udc_process_setup+0x638>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    198c:	80 91 5a 24 	lds	r24, 0x245A
    1990:	87 d4       	rcall	.+2318   	; 0x22a0 <udd_ep_clear_halt>
    1992:	08 2f       	mov	r16, r24
    1994:	21 c0       	rjmp	.+66     	; 0x19d8 <udc_process_setup+0x676>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1996:	00 e0       	ldi	r16, 0x00	; 0
    1998:	1f c0       	rjmp	.+62     	; 0x19d8 <udc_process_setup+0x676>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    199a:	00 e0       	ldi	r16, 0x00	; 0
    199c:	1d c0       	rjmp	.+58     	; 0x19d8 <udc_process_setup+0x676>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    199e:	80 91 5c 24 	lds	r24, 0x245C
    19a2:	90 91 5d 24 	lds	r25, 0x245D
    19a6:	89 2b       	or	r24, r25
    19a8:	71 f4       	brne	.+28     	; 0x19c6 <udc_process_setup+0x664>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    19aa:	80 91 58 24 	lds	r24, 0x2458
    19ae:	90 91 59 24 	lds	r25, 0x2459
    19b2:	89 2b       	or	r24, r25
    19b4:	51 f4       	brne	.+20     	; 0x19ca <udc_process_setup+0x668>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    19b6:	ca e5       	ldi	r28, 0x5A	; 90
    19b8:	d4 e2       	ldi	r29, 0x24	; 36
    19ba:	88 81       	ld	r24, Y
    19bc:	22 d5       	rcall	.+2628   	; 0x2402 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    19be:	88 81       	ld	r24, Y
    19c0:	76 d5       	rcall	.+2796   	; 0x24ae <udd_ep_set_halt>
    19c2:	08 2f       	mov	r16, r24
    19c4:	09 c0       	rjmp	.+18     	; 0x19d8 <udc_process_setup+0x676>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    19c6:	00 e0       	ldi	r16, 0x00	; 0
    19c8:	07 c0       	rjmp	.+14     	; 0x19d8 <udc_process_setup+0x676>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    19ca:	00 e0       	ldi	r16, 0x00	; 0
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <udc_process_setup+0x676>
				break;
			}
		}
#endif
	}
	return false;
    19ce:	00 e0       	ldi	r16, 0x00	; 0
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <udc_process_setup+0x676>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    19d2:	00 e0       	ldi	r16, 0x00	; 0
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <udc_process_setup+0x676>
				break;
			}
		}
#endif
	}
	return false;
    19d6:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    19d8:	01 11       	cpse	r16, r1
    19da:	80 c0       	rjmp	.+256    	; 0x1adc <udc_process_setup+0x77a>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    19dc:	80 91 56 24 	lds	r24, 0x2456
    19e0:	8f 71       	andi	r24, 0x1F	; 31
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	c1 f5       	brne	.+112    	; 0x1a56 <udc_process_setup+0x6f4>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    19e6:	80 91 be 20 	lds	r24, 0x20BE
    19ea:	88 23       	and	r24, r24
    19ec:	a1 f1       	breq	.+104    	; 0x1a56 <udc_process_setup+0x6f4>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    19ee:	c0 91 5a 24 	lds	r28, 0x245A
    19f2:	d0 91 5b 24 	lds	r29, 0x245B
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    19f6:	00 91 bb 20 	lds	r16, 0x20BB
    19fa:	10 91 bc 20 	lds	r17, 0x20BC
    19fe:	d8 01       	movw	r26, r16
    1a00:	ed 91       	ld	r30, X+
    1a02:	fc 91       	ld	r31, X
    1a04:	84 81       	ldd	r24, Z+4	; 0x04
    1a06:	c8 17       	cp	r28, r24
    1a08:	30 f5       	brcc	.+76     	; 0x1a56 <udc_process_setup+0x6f4>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	8c 2f       	mov	r24, r28
    1a0e:	a0 db       	rcall	.-2240   	; 0x1150 <udc_update_iface_desc>
    1a10:	88 23       	and	r24, r24
    1a12:	09 f1       	breq	.+66     	; 0x1a56 <udc_process_setup+0x6f4>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a14:	ce 01       	movw	r24, r28
    1a16:	99 27       	eor	r25, r25
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	d8 01       	movw	r26, r16
    1a1e:	12 96       	adiw	r26, 0x02	; 2
    1a20:	ed 91       	ld	r30, X+
    1a22:	fc 91       	ld	r31, X
    1a24:	13 97       	sbiw	r26, 0x03	; 3
    1a26:	e8 0f       	add	r30, r24
    1a28:	f9 1f       	adc	r31, r25
    1a2a:	00 81       	ld	r16, Z
    1a2c:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1a2e:	d8 01       	movw	r26, r16
    1a30:	16 96       	adiw	r26, 0x06	; 6
    1a32:	ed 91       	ld	r30, X+
    1a34:	fc 91       	ld	r31, X
    1a36:	17 97       	sbiw	r26, 0x07	; 7
    1a38:	09 95       	icall
    1a3a:	68 2f       	mov	r22, r24
    1a3c:	8c 2f       	mov	r24, r28
    1a3e:	88 db       	rcall	.-2288   	; 0x1150 <udc_update_iface_desc>
    1a40:	88 23       	and	r24, r24
    1a42:	49 f0       	breq	.+18     	; 0x1a56 <udc_process_setup+0x6f4>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1a44:	d8 01       	movw	r26, r16
    1a46:	14 96       	adiw	r26, 0x04	; 4
    1a48:	ed 91       	ld	r30, X+
    1a4a:	fc 91       	ld	r31, X
    1a4c:	15 97       	sbiw	r26, 0x05	; 5
    1a4e:	09 95       	icall
    1a50:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1a52:	81 11       	cpse	r24, r1
    1a54:	43 c0       	rjmp	.+134    	; 0x1adc <udc_process_setup+0x77a>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1a56:	80 91 56 24 	lds	r24, 0x2456
    1a5a:	8f 71       	andi	r24, 0x1F	; 31
    1a5c:	82 30       	cpi	r24, 0x02	; 2
    1a5e:	d9 f5       	brne	.+118    	; 0x1ad6 <udc_process_setup+0x774>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1a60:	80 91 be 20 	lds	r24, 0x20BE
    1a64:	88 23       	and	r24, r24
    1a66:	89 f1       	breq	.+98     	; 0x1aca <udc_process_setup+0x768>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a68:	e0 91 bb 20 	lds	r30, 0x20BB
    1a6c:	f0 91 bc 20 	lds	r31, 0x20BC
    1a70:	a0 81       	ld	r26, Z
    1a72:	b1 81       	ldd	r27, Z+1	; 0x01
    1a74:	14 96       	adiw	r26, 0x04	; 4
    1a76:	8c 91       	ld	r24, X
    1a78:	88 23       	and	r24, r24
    1a7a:	49 f1       	breq	.+82     	; 0x1ace <udc_process_setup+0x76c>
    1a7c:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a7e:	21 2f       	mov	r18, r17
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	22 0f       	add	r18, r18
    1a84:	33 1f       	adc	r19, r19
    1a86:	02 80       	ldd	r0, Z+2	; 0x02
    1a88:	f3 81       	ldd	r31, Z+3	; 0x03
    1a8a:	e0 2d       	mov	r30, r0
    1a8c:	e2 0f       	add	r30, r18
    1a8e:	f3 1f       	adc	r31, r19
    1a90:	c0 81       	ld	r28, Z
    1a92:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1a94:	ee 81       	ldd	r30, Y+6	; 0x06
    1a96:	ff 81       	ldd	r31, Y+7	; 0x07
    1a98:	09 95       	icall
    1a9a:	68 2f       	mov	r22, r24
    1a9c:	81 2f       	mov	r24, r17
    1a9e:	58 db       	rcall	.-2384   	; 0x1150 <udc_update_iface_desc>
    1aa0:	08 2f       	mov	r16, r24
    1aa2:	88 23       	and	r24, r24
    1aa4:	d9 f0       	breq	.+54     	; 0x1adc <udc_process_setup+0x77a>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1aa6:	ec 81       	ldd	r30, Y+4	; 0x04
    1aa8:	fd 81       	ldd	r31, Y+5	; 0x05
    1aaa:	09 95       	icall
    1aac:	08 2f       	mov	r16, r24
    1aae:	81 11       	cpse	r24, r1
    1ab0:	15 c0       	rjmp	.+42     	; 0x1adc <udc_process_setup+0x77a>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1ab2:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ab4:	e0 91 bb 20 	lds	r30, 0x20BB
    1ab8:	f0 91 bc 20 	lds	r31, 0x20BC
    1abc:	a0 81       	ld	r26, Z
    1abe:	b1 81       	ldd	r27, Z+1	; 0x01
    1ac0:	14 96       	adiw	r26, 0x04	; 4
    1ac2:	8c 91       	ld	r24, X
    1ac4:	18 17       	cp	r17, r24
    1ac6:	d8 f2       	brcs	.-74     	; 0x1a7e <udc_process_setup+0x71c>
    1ac8:	09 c0       	rjmp	.+18     	; 0x1adc <udc_process_setup+0x77a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1aca:	00 e0       	ldi	r16, 0x00	; 0
    1acc:	07 c0       	rjmp	.+14     	; 0x1adc <udc_process_setup+0x77a>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1ace:	00 e0       	ldi	r16, 0x00	; 0
    1ad0:	05 c0       	rjmp	.+10     	; 0x1adc <udc_process_setup+0x77a>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1ad2:	00 e0       	ldi	r16, 0x00	; 0
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <udc_process_setup+0x77a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1ad6:	00 e0       	ldi	r16, 0x00	; 0
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <udc_process_setup+0x77a>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1ada:	01 e0       	ldi	r16, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1adc:	80 2f       	mov	r24, r16
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	ff 90       	pop	r15
    1ae8:	ef 90       	pop	r14
    1aea:	08 95       	ret

00001aec <ccp_write_io>:
    1aec:	1b be       	out	0x3b, r1	; 59
    1aee:	fc 01       	movw	r30, r24
    1af0:	28 ed       	ldi	r18, 0xD8	; 216
    1af2:	24 bf       	out	0x34, r18	; 52
    1af4:	60 83       	st	Z, r22
    1af6:	08 95       	ret

00001af8 <nvm_read_byte>:
    1af8:	40 91 ca 01 	lds	r20, 0x01CA
    1afc:	e6 2f       	mov	r30, r22
    1afe:	f7 2f       	mov	r31, r23
    1b00:	80 93 ca 01 	sts	0x01CA, r24
    1b04:	84 91       	lpm	r24, Z
    1b06:	40 93 ca 01 	sts	0x01CA, r20
    1b0a:	08 95       	ret

00001b0c <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1b0c:	81 11       	cpse	r24, r1
    1b0e:	22 c0       	rjmp	.+68     	; 0x1b54 <udd_sleep_mode+0x48>
    1b10:	90 91 54 22 	lds	r25, 0x2254
    1b14:	99 23       	and	r25, r25
    1b16:	d9 f0       	breq	.+54     	; 0x1b4e <udd_sleep_mode+0x42>
    1b18:	90 91 43 2c 	lds	r25, 0x2C43
    1b1c:	91 11       	cpse	r25, r1
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <udd_sleep_mode+0x16>
    1b20:	ff cf       	rjmp	.-2      	; 0x1b20 <udd_sleep_mode+0x14>
    1b22:	9f b7       	in	r25, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	e3 e4       	ldi	r30, 0x43	; 67
    1b28:	fc e2       	ldi	r31, 0x2C	; 44
    1b2a:	20 81       	ld	r18, Z
    1b2c:	21 50       	subi	r18, 0x01	; 1
    1b2e:	20 83       	st	Z, r18
    1b30:	9f bf       	out	0x3f, r25	; 63
    1b32:	0d c0       	rjmp	.+26     	; 0x1b4e <udd_sleep_mode+0x42>
    1b34:	90 91 43 2c 	lds	r25, 0x2C43
    1b38:	9f 3f       	cpi	r25, 0xFF	; 255
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <udd_sleep_mode+0x32>
    1b3c:	ff cf       	rjmp	.-2      	; 0x1b3c <udd_sleep_mode+0x30>
    1b3e:	9f b7       	in	r25, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	e3 e4       	ldi	r30, 0x43	; 67
    1b44:	fc e2       	ldi	r31, 0x2C	; 44
    1b46:	20 81       	ld	r18, Z
    1b48:	2f 5f       	subi	r18, 0xFF	; 255
    1b4a:	20 83       	st	Z, r18
    1b4c:	9f bf       	out	0x3f, r25	; 63
    1b4e:	80 93 54 22 	sts	0x2254, r24
    1b52:	08 95       	ret
    1b54:	90 91 54 22 	lds	r25, 0x2254
    1b58:	99 23       	and	r25, r25
    1b5a:	61 f3       	breq	.-40     	; 0x1b34 <udd_sleep_mode+0x28>
    1b5c:	f8 cf       	rjmp	.-16     	; 0x1b4e <udd_sleep_mode+0x42>

00001b5e <udd_ctrl_init>:
    1b5e:	0f 93       	push	r16
    1b60:	e8 ec       	ldi	r30, 0xC8	; 200
    1b62:	f4 e0       	ldi	r31, 0x04	; 4
    1b64:	80 81       	ld	r24, Z
    1b66:	8f 7d       	andi	r24, 0xDF	; 223
    1b68:	80 83       	st	Z, r24
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8f 7d       	andi	r24, 0xDF	; 223
    1b6e:	80 83       	st	Z, r24
    1b70:	e8 e1       	ldi	r30, 0x18	; 24
    1b72:	f2 e2       	ldi	r31, 0x22	; 34
    1b74:	02 e0       	ldi	r16, 0x02	; 2
    1b76:	05 93       	las	Z, r16
    1b78:	10 92 1a 22 	sts	0x221A, r1
    1b7c:	10 92 1b 22 	sts	0x221B, r1
    1b80:	00 e2       	ldi	r16, 0x20	; 32
    1b82:	06 93       	lac	Z, r16
    1b84:	00 e4       	ldi	r16, 0x40	; 64
    1b86:	06 93       	lac	Z, r16
    1b88:	e0 e1       	ldi	r30, 0x10	; 16
    1b8a:	f2 e2       	ldi	r31, 0x22	; 34
    1b8c:	00 e2       	ldi	r16, 0x20	; 32
    1b8e:	06 93       	lac	Z, r16
    1b90:	00 e4       	ldi	r16, 0x40	; 64
    1b92:	06 93       	lac	Z, r16
    1b94:	10 92 62 24 	sts	0x2462, r1
    1b98:	10 92 63 24 	sts	0x2463, r1
    1b9c:	10 92 64 24 	sts	0x2464, r1
    1ba0:	10 92 65 24 	sts	0x2465, r1
    1ba4:	10 92 60 24 	sts	0x2460, r1
    1ba8:	10 92 61 24 	sts	0x2461, r1
    1bac:	10 92 ff 21 	sts	0x21FF, r1
    1bb0:	0f 91       	pop	r16
    1bb2:	08 95       	ret

00001bb4 <udd_ctrl_stall_data>:
    1bb4:	0f 93       	push	r16
    1bb6:	85 e0       	ldi	r24, 0x05	; 5
    1bb8:	80 93 ff 21 	sts	0x21FF, r24
    1bbc:	e9 e1       	ldi	r30, 0x19	; 25
    1bbe:	f2 e2       	ldi	r31, 0x22	; 34
    1bc0:	04 e0       	ldi	r16, 0x04	; 4
    1bc2:	05 93       	las	Z, r16
    1bc4:	e1 e1       	ldi	r30, 0x11	; 17
    1bc6:	f2 e2       	ldi	r31, 0x22	; 34
    1bc8:	04 e0       	ldi	r16, 0x04	; 4
    1bca:	05 93       	las	Z, r16
    1bcc:	0f 91       	pop	r16
    1bce:	08 95       	ret

00001bd0 <udd_ctrl_send_zlp_in>:
    1bd0:	0f 93       	push	r16
    1bd2:	83 e0       	ldi	r24, 0x03	; 3
    1bd4:	80 93 ff 21 	sts	0x21FF, r24
    1bd8:	10 92 1a 22 	sts	0x221A, r1
    1bdc:	10 92 1b 22 	sts	0x221B, r1
    1be0:	e8 e1       	ldi	r30, 0x18	; 24
    1be2:	f2 e2       	ldi	r31, 0x22	; 34
    1be4:	02 e0       	ldi	r16, 0x02	; 2
    1be6:	06 93       	lac	Z, r16
    1be8:	0f 91       	pop	r16
    1bea:	08 95       	ret

00001bec <udd_ctrl_endofrequest>:
    1bec:	e0 91 62 24 	lds	r30, 0x2462
    1bf0:	f0 91 63 24 	lds	r31, 0x2463
    1bf4:	30 97       	sbiw	r30, 0x00	; 0
    1bf6:	09 f0       	breq	.+2      	; 0x1bfa <udd_ctrl_endofrequest+0xe>
    1bf8:	09 95       	icall
    1bfa:	08 95       	ret

00001bfc <udd_ctrl_in_sent>:
    1bfc:	0f 93       	push	r16
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	80 91 ff 21 	lds	r24, 0x21FF
    1c06:	83 30       	cpi	r24, 0x03	; 3
    1c08:	19 f4       	brne	.+6      	; 0x1c10 <udd_ctrl_in_sent+0x14>
    1c0a:	f0 df       	rcall	.-32     	; 0x1bec <udd_ctrl_endofrequest>
    1c0c:	a8 df       	rcall	.-176    	; 0x1b5e <udd_ctrl_init>
    1c0e:	60 c0       	rjmp	.+192    	; 0x1cd0 <udd_ctrl_in_sent+0xd4>
    1c10:	80 91 fb 21 	lds	r24, 0x21FB
    1c14:	90 91 fc 21 	lds	r25, 0x21FC
    1c18:	c0 91 60 24 	lds	r28, 0x2460
    1c1c:	d0 91 61 24 	lds	r29, 0x2461
    1c20:	c8 1b       	sub	r28, r24
    1c22:	d9 0b       	sbc	r29, r25
    1c24:	71 f5       	brne	.+92     	; 0x1c82 <udd_ctrl_in_sent+0x86>
    1c26:	20 91 fd 21 	lds	r18, 0x21FD
    1c2a:	30 91 fe 21 	lds	r19, 0x21FE
    1c2e:	82 0f       	add	r24, r18
    1c30:	93 1f       	adc	r25, r19
    1c32:	80 93 fd 21 	sts	0x21FD, r24
    1c36:	90 93 fe 21 	sts	0x21FE, r25
    1c3a:	20 91 5c 24 	lds	r18, 0x245C
    1c3e:	30 91 5d 24 	lds	r19, 0x245D
    1c42:	82 17       	cp	r24, r18
    1c44:	93 07       	cpc	r25, r19
    1c46:	21 f0       	breq	.+8      	; 0x1c50 <udd_ctrl_in_sent+0x54>
    1c48:	80 91 c4 20 	lds	r24, 0x20C4
    1c4c:	88 23       	and	r24, r24
    1c4e:	41 f0       	breq	.+16     	; 0x1c60 <udd_ctrl_in_sent+0x64>
    1c50:	84 e0       	ldi	r24, 0x04	; 4
    1c52:	80 93 ff 21 	sts	0x21FF, r24
    1c56:	e0 e1       	ldi	r30, 0x10	; 16
    1c58:	f2 e2       	ldi	r31, 0x22	; 34
    1c5a:	02 e0       	ldi	r16, 0x02	; 2
    1c5c:	06 93       	lac	Z, r16
    1c5e:	38 c0       	rjmp	.+112    	; 0x1cd0 <udd_ctrl_in_sent+0xd4>
    1c60:	e0 91 64 24 	lds	r30, 0x2464
    1c64:	f0 91 65 24 	lds	r31, 0x2465
    1c68:	30 97       	sbiw	r30, 0x00	; 0
    1c6a:	99 f0       	breq	.+38     	; 0x1c92 <udd_ctrl_in_sent+0x96>
    1c6c:	09 95       	icall
    1c6e:	88 23       	and	r24, r24
    1c70:	81 f0       	breq	.+32     	; 0x1c92 <udd_ctrl_in_sent+0x96>
    1c72:	10 92 fb 21 	sts	0x21FB, r1
    1c76:	10 92 fc 21 	sts	0x21FC, r1
    1c7a:	c0 91 60 24 	lds	r28, 0x2460
    1c7e:	d0 91 61 24 	lds	r29, 0x2461
    1c82:	c0 34       	cpi	r28, 0x40	; 64
    1c84:	d1 05       	cpc	r29, r1
    1c86:	28 f0       	brcs	.+10     	; 0x1c92 <udd_ctrl_in_sent+0x96>
    1c88:	10 92 c4 20 	sts	0x20C4, r1
    1c8c:	c0 e4       	ldi	r28, 0x40	; 64
    1c8e:	d0 e0       	ldi	r29, 0x00	; 0
    1c90:	03 c0       	rjmp	.+6      	; 0x1c98 <udd_ctrl_in_sent+0x9c>
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	80 93 c4 20 	sts	0x20C4, r24
    1c98:	c0 93 1a 22 	sts	0x221A, r28
    1c9c:	d0 93 1b 22 	sts	0x221B, r29
    1ca0:	80 91 fb 21 	lds	r24, 0x21FB
    1ca4:	90 91 fc 21 	lds	r25, 0x21FC
    1ca8:	20 91 5e 24 	lds	r18, 0x245E
    1cac:	30 91 5f 24 	lds	r19, 0x245F
    1cb0:	28 0f       	add	r18, r24
    1cb2:	39 1f       	adc	r19, r25
    1cb4:	20 93 1c 22 	sts	0x221C, r18
    1cb8:	30 93 1d 22 	sts	0x221D, r19
    1cbc:	c8 0f       	add	r28, r24
    1cbe:	d9 1f       	adc	r29, r25
    1cc0:	c0 93 fb 21 	sts	0x21FB, r28
    1cc4:	d0 93 fc 21 	sts	0x21FC, r29
    1cc8:	e8 e1       	ldi	r30, 0x18	; 24
    1cca:	f2 e2       	ldi	r31, 0x22	; 34
    1ccc:	02 e0       	ldi	r16, 0x02	; 2
    1cce:	06 93       	lac	Z, r16
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	0f 91       	pop	r16
    1cd6:	08 95       	ret

00001cd8 <udd_ep_get_size>:
    1cd8:	fc 01       	movw	r30, r24
    1cda:	81 81       	ldd	r24, Z+1	; 0x01
    1cdc:	87 70       	andi	r24, 0x07	; 7
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	31 97       	sbiw	r30, 0x01	; 1
    1ce4:	e7 30       	cpi	r30, 0x07	; 7
    1ce6:	f1 05       	cpc	r31, r1
    1ce8:	18 f4       	brcc	.+6      	; 0x1cf0 <udd_ep_get_size+0x18>
    1cea:	ea 5d       	subi	r30, 0xDA	; 218
    1cec:	fe 4f       	sbci	r31, 0xFE	; 254
    1cee:	bd c5       	rjmp	.+2938   	; 0x286a <__tablejump2__>
    1cf0:	88 e0       	ldi	r24, 0x08	; 8
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	08 95       	ret
    1cf6:	80 e2       	ldi	r24, 0x20	; 32
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	08 95       	ret
    1cfc:	80 e4       	ldi	r24, 0x40	; 64
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	08 95       	ret
    1d02:	80 e8       	ldi	r24, 0x80	; 128
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	08 95       	ret
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	91 e0       	ldi	r25, 0x01	; 1
    1d0c:	08 95       	ret
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	92 e0       	ldi	r25, 0x02	; 2
    1d12:	08 95       	ret
    1d14:	8f ef       	ldi	r24, 0xFF	; 255
    1d16:	93 e0       	ldi	r25, 0x03	; 3
    1d18:	08 95       	ret
    1d1a:	80 e1       	ldi	r24, 0x10	; 16
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	08 95       	ret

00001d20 <udd_ep_get_job>:
    1d20:	28 2f       	mov	r18, r24
    1d22:	2f 70       	andi	r18, 0x0F	; 15
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	22 0f       	add	r18, r18
    1d28:	33 1f       	adc	r19, r19
    1d2a:	99 27       	eor	r25, r25
    1d2c:	87 fd       	sbrc	r24, 7
    1d2e:	90 95       	com	r25
    1d30:	88 27       	eor	r24, r24
    1d32:	99 0f       	add	r25, r25
    1d34:	88 1f       	adc	r24, r24
    1d36:	99 27       	eor	r25, r25
    1d38:	82 0f       	add	r24, r18
    1d3a:	93 1f       	adc	r25, r19
    1d3c:	02 97       	sbiw	r24, 0x02	; 2
    1d3e:	9c 01       	movw	r18, r24
    1d40:	22 0f       	add	r18, r18
    1d42:	33 1f       	adc	r19, r19
    1d44:	22 0f       	add	r18, r18
    1d46:	33 1f       	adc	r19, r19
    1d48:	22 0f       	add	r18, r18
    1d4a:	33 1f       	adc	r19, r19
    1d4c:	82 0f       	add	r24, r18
    1d4e:	93 1f       	adc	r25, r19
    1d50:	8b 57       	subi	r24, 0x7B	; 123
    1d52:	9e 4d       	sbci	r25, 0xDE	; 222
    1d54:	08 95       	ret

00001d56 <udd_ctrl_interrupt_tc_setup>:
    1d56:	0f 93       	push	r16
    1d58:	cf 93       	push	r28
    1d5a:	80 91 cc 04 	lds	r24, 0x04CC
    1d5e:	80 ff       	sbrs	r24, 0
    1d60:	62 c0       	rjmp	.+196    	; 0x1e26 <udd_ctrl_interrupt_tc_setup+0xd0>
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	80 93 cc 04 	sts	0x04CC, r24
    1d68:	e0 e1       	ldi	r30, 0x10	; 16
    1d6a:	f2 e2       	ldi	r31, 0x22	; 34
    1d6c:	00 e8       	ldi	r16, 0x80	; 128
    1d6e:	06 93       	lac	Z, r16
    1d70:	e8 e1       	ldi	r30, 0x18	; 24
    1d72:	f2 e2       	ldi	r31, 0x22	; 34
    1d74:	00 e8       	ldi	r16, 0x80	; 128
    1d76:	06 93       	lac	Z, r16
    1d78:	80 93 ca 04 	sts	0x04CA, r24
    1d7c:	e0 e1       	ldi	r30, 0x10	; 16
    1d7e:	f2 e2       	ldi	r31, 0x22	; 34
    1d80:	00 e1       	ldi	r16, 0x10	; 16
    1d82:	06 93       	lac	Z, r16
    1d84:	80 91 ff 21 	lds	r24, 0x21FF
    1d88:	88 23       	and	r24, r24
    1d8a:	29 f0       	breq	.+10     	; 0x1d96 <udd_ctrl_interrupt_tc_setup+0x40>
    1d8c:	83 50       	subi	r24, 0x03	; 3
    1d8e:	82 30       	cpi	r24, 0x02	; 2
    1d90:	08 f4       	brcc	.+2      	; 0x1d94 <udd_ctrl_interrupt_tc_setup+0x3e>
    1d92:	2c df       	rcall	.-424    	; 0x1bec <udd_ctrl_endofrequest>
    1d94:	e4 de       	rcall	.-568    	; 0x1b5e <udd_ctrl_init>
    1d96:	80 91 12 22 	lds	r24, 0x2212
    1d9a:	90 91 13 22 	lds	r25, 0x2213
    1d9e:	08 97       	sbiw	r24, 0x08	; 8
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <udd_ctrl_interrupt_tc_setup+0x4e>
    1da2:	43 c0       	rjmp	.+134    	; 0x1e2a <udd_ctrl_interrupt_tc_setup+0xd4>
    1da4:	88 e0       	ldi	r24, 0x08	; 8
    1da6:	eb eb       	ldi	r30, 0xBB	; 187
    1da8:	f1 e2       	ldi	r31, 0x21	; 33
    1daa:	a6 e5       	ldi	r26, 0x56	; 86
    1dac:	b4 e2       	ldi	r27, 0x24	; 36
    1dae:	01 90       	ld	r0, Z+
    1db0:	0d 92       	st	X+, r0
    1db2:	8a 95       	dec	r24
    1db4:	e1 f7       	brne	.-8      	; 0x1dae <udd_ctrl_interrupt_tc_setup+0x58>
    1db6:	e8 ec       	ldi	r30, 0xC8	; 200
    1db8:	f4 e0       	ldi	r31, 0x04	; 4
    1dba:	80 81       	ld	r24, Z
    1dbc:	80 62       	ori	r24, 0x20	; 32
    1dbe:	80 83       	st	Z, r24
    1dc0:	80 81       	ld	r24, Z
    1dc2:	80 62       	ori	r24, 0x20	; 32
    1dc4:	80 83       	st	Z, r24
    1dc6:	cd da       	rcall	.-2662   	; 0x1362 <udc_process_setup>
    1dc8:	c8 2f       	mov	r28, r24
    1dca:	81 11       	cpse	r24, r1
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <udd_ctrl_interrupt_tc_setup+0x7e>
    1dce:	f2 de       	rcall	.-540    	; 0x1bb4 <udd_ctrl_stall_data>
    1dd0:	c1 e0       	ldi	r28, 0x01	; 1
    1dd2:	2c c0       	rjmp	.+88     	; 0x1e2c <udd_ctrl_interrupt_tc_setup+0xd6>
    1dd4:	80 91 56 24 	lds	r24, 0x2456
    1dd8:	88 23       	and	r24, r24
    1dda:	6c f4       	brge	.+26     	; 0x1df6 <udd_ctrl_interrupt_tc_setup+0xa0>
    1ddc:	10 92 fd 21 	sts	0x21FD, r1
    1de0:	10 92 fe 21 	sts	0x21FE, r1
    1de4:	10 92 fb 21 	sts	0x21FB, r1
    1de8:	10 92 fc 21 	sts	0x21FC, r1
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	80 93 ff 21 	sts	0x21FF, r24
    1df2:	04 df       	rcall	.-504    	; 0x1bfc <udd_ctrl_in_sent>
    1df4:	1b c0       	rjmp	.+54     	; 0x1e2c <udd_ctrl_interrupt_tc_setup+0xd6>
    1df6:	20 91 5c 24 	lds	r18, 0x245C
    1dfa:	30 91 5d 24 	lds	r19, 0x245D
    1dfe:	23 2b       	or	r18, r19
    1e00:	11 f4       	brne	.+4      	; 0x1e06 <udd_ctrl_interrupt_tc_setup+0xb0>
    1e02:	e6 de       	rcall	.-564    	; 0x1bd0 <udd_ctrl_send_zlp_in>
    1e04:	13 c0       	rjmp	.+38     	; 0x1e2c <udd_ctrl_interrupt_tc_setup+0xd6>
    1e06:	10 92 fd 21 	sts	0x21FD, r1
    1e0a:	10 92 fe 21 	sts	0x21FE, r1
    1e0e:	10 92 fb 21 	sts	0x21FB, r1
    1e12:	10 92 fc 21 	sts	0x21FC, r1
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	80 93 ff 21 	sts	0x21FF, r24
    1e1c:	e0 e1       	ldi	r30, 0x10	; 16
    1e1e:	f2 e2       	ldi	r31, 0x22	; 34
    1e20:	02 e0       	ldi	r16, 0x02	; 2
    1e22:	06 93       	lac	Z, r16
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <udd_ctrl_interrupt_tc_setup+0xd6>
    1e26:	c0 e0       	ldi	r28, 0x00	; 0
    1e28:	01 c0       	rjmp	.+2      	; 0x1e2c <udd_ctrl_interrupt_tc_setup+0xd6>
    1e2a:	c1 e0       	ldi	r28, 0x01	; 1
    1e2c:	8c 2f       	mov	r24, r28
    1e2e:	cf 91       	pop	r28
    1e30:	0f 91       	pop	r16
    1e32:	08 95       	ret

00001e34 <udd_ep_trans_complet>:
    1e34:	bf 92       	push	r11
    1e36:	cf 92       	push	r12
    1e38:	df 92       	push	r13
    1e3a:	ef 92       	push	r14
    1e3c:	ff 92       	push	r15
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	b8 2e       	mov	r11, r24
    1e48:	6b df       	rcall	.-298    	; 0x1d20 <udd_ep_get_job>
    1e4a:	ec 01       	movw	r28, r24
    1e4c:	1b 2d       	mov	r17, r11
    1e4e:	11 1f       	adc	r17, r17
    1e50:	11 27       	eor	r17, r17
    1e52:	11 1f       	adc	r17, r17
    1e54:	8b 2d       	mov	r24, r11
    1e56:	8f 70       	andi	r24, 0x0F	; 15
    1e58:	e8 2e       	mov	r14, r24
    1e5a:	f1 2c       	mov	r15, r1
    1e5c:	ee 0c       	add	r14, r14
    1e5e:	ff 1c       	adc	r15, r15
    1e60:	e1 0e       	add	r14, r17
    1e62:	f1 1c       	adc	r15, r1
    1e64:	c7 01       	movw	r24, r14
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	9c 01       	movw	r18, r24
    1e74:	20 5f       	subi	r18, 0xF0	; 240
    1e76:	3d 4d       	sbci	r19, 0xDD	; 221
    1e78:	79 01       	movw	r14, r18
    1e7a:	c9 01       	movw	r24, r18
    1e7c:	2d df       	rcall	.-422    	; 0x1cd8 <udd_ep_get_size>
    1e7e:	6c 01       	movw	r12, r24
    1e80:	11 23       	and	r17, r17
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <udd_ep_trans_complet+0x52>
    1e84:	59 c0       	rjmp	.+178    	; 0x1f38 <udd_ep_trans_complet+0x104>
    1e86:	d7 01       	movw	r26, r14
    1e88:	16 96       	adiw	r26, 0x06	; 6
    1e8a:	2d 91       	ld	r18, X+
    1e8c:	3c 91       	ld	r19, X
    1e8e:	17 97       	sbiw	r26, 0x07	; 7
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	28 0f       	add	r18, r24
    1e96:	39 1f       	adc	r19, r25
    1e98:	2d 83       	std	Y+5, r18	; 0x05
    1e9a:	3e 83       	std	Y+6, r19	; 0x06
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	28 17       	cp	r18, r24
    1ea2:	39 07       	cpc	r19, r25
    1ea4:	b9 f1       	breq	.+110    	; 0x1f14 <udd_ep_trans_complet+0xe0>
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	e2 1b       	sub	r30, r18
    1eaa:	f3 0b       	sbc	r31, r19
    1eac:	9f 01       	movw	r18, r30
    1eae:	21 15       	cp	r18, r1
    1eb0:	f4 e0       	ldi	r31, 0x04	; 4
    1eb2:	3f 07       	cpc	r19, r31
    1eb4:	38 f0       	brcs	.+14     	; 0x1ec4 <udd_ep_trans_complet+0x90>
    1eb6:	2f ef       	ldi	r18, 0xFF	; 255
    1eb8:	33 e0       	ldi	r19, 0x03	; 3
    1eba:	c9 01       	movw	r24, r18
    1ebc:	b6 01       	movw	r22, r12
    1ebe:	c1 d4       	rcall	.+2434   	; 0x2842 <__udivmodhi4>
    1ec0:	28 1b       	sub	r18, r24
    1ec2:	39 0b       	sbc	r19, r25
    1ec4:	88 81       	ld	r24, Y
    1ec6:	81 ff       	sbrs	r24, 1
    1ec8:	09 c0       	rjmp	.+18     	; 0x1edc <udd_ep_trans_complet+0xa8>
    1eca:	c9 01       	movw	r24, r18
    1ecc:	b6 01       	movw	r22, r12
    1ece:	b9 d4       	rcall	.+2418   	; 0x2842 <__udivmodhi4>
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	89 2b       	or	r24, r25
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <udd_ep_trans_complet+0xa4>
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	94 2f       	mov	r25, r20
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <udd_ep_trans_complet+0xaa>
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	88 81       	ld	r24, Y
    1ee0:	90 fb       	bst	r25, 0
    1ee2:	81 f9       	bld	r24, 1
    1ee4:	88 83       	st	Y, r24
    1ee6:	d7 01       	movw	r26, r14
    1ee8:	16 96       	adiw	r26, 0x06	; 6
    1eea:	1d 92       	st	X+, r1
    1eec:	1c 92       	st	X, r1
    1eee:	17 97       	sbiw	r26, 0x07	; 7
    1ef0:	12 96       	adiw	r26, 0x02	; 2
    1ef2:	2d 93       	st	X+, r18
    1ef4:	3c 93       	st	X, r19
    1ef6:	13 97       	sbiw	r26, 0x03	; 3
    1ef8:	29 81       	ldd	r18, Y+1	; 0x01
    1efa:	3a 81       	ldd	r19, Y+2	; 0x02
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	82 0f       	add	r24, r18
    1f02:	93 1f       	adc	r25, r19
    1f04:	14 96       	adiw	r26, 0x04	; 4
    1f06:	8d 93       	st	X+, r24
    1f08:	9c 93       	st	X, r25
    1f0a:	15 97       	sbiw	r26, 0x05	; 5
    1f0c:	f7 01       	movw	r30, r14
    1f0e:	02 e0       	ldi	r16, 0x02	; 2
    1f10:	06 93       	lac	Z, r16
    1f12:	94 c0       	rjmp	.+296    	; 0x203c <udd_ep_trans_complet+0x208>
    1f14:	88 81       	ld	r24, Y
    1f16:	81 ff       	sbrs	r24, 1
    1f18:	83 c0       	rjmp	.+262    	; 0x2020 <udd_ep_trans_complet+0x1ec>
    1f1a:	8d 7f       	andi	r24, 0xFD	; 253
    1f1c:	88 83       	st	Y, r24
    1f1e:	d7 01       	movw	r26, r14
    1f20:	16 96       	adiw	r26, 0x06	; 6
    1f22:	1d 92       	st	X+, r1
    1f24:	1c 92       	st	X, r1
    1f26:	17 97       	sbiw	r26, 0x07	; 7
    1f28:	12 96       	adiw	r26, 0x02	; 2
    1f2a:	1d 92       	st	X+, r1
    1f2c:	1c 92       	st	X, r1
    1f2e:	13 97       	sbiw	r26, 0x03	; 3
    1f30:	f7 01       	movw	r30, r14
    1f32:	02 e0       	ldi	r16, 0x02	; 2
    1f34:	06 93       	lac	Z, r16
    1f36:	82 c0       	rjmp	.+260    	; 0x203c <udd_ep_trans_complet+0x208>
    1f38:	d7 01       	movw	r26, r14
    1f3a:	12 96       	adiw	r26, 0x02	; 2
    1f3c:	0d 91       	ld	r16, X+
    1f3e:	1c 91       	ld	r17, X
    1f40:	13 97       	sbiw	r26, 0x03	; 3
    1f42:	88 81       	ld	r24, Y
    1f44:	82 ff       	sbrs	r24, 2
    1f46:	13 c0       	rjmp	.+38     	; 0x1f6e <udd_ep_trans_complet+0x13a>
    1f48:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4c:	2d 81       	ldd	r18, Y+5	; 0x05
    1f4e:	3e 81       	ldd	r19, Y+6	; 0x06
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	b6 01       	movw	r22, r12
    1f56:	75 d4       	rcall	.+2282   	; 0x2842 <__udivmodhi4>
    1f58:	b0 e4       	ldi	r27, 0x40	; 64
    1f5a:	bb 9e       	mul	r11, r27
    1f5c:	b0 01       	movw	r22, r0
    1f5e:	11 24       	eor	r1, r1
    1f60:	6b 57       	subi	r22, 0x7B	; 123
    1f62:	7f 4d       	sbci	r23, 0xDF	; 223
    1f64:	ac 01       	movw	r20, r24
    1f66:	cf 01       	movw	r24, r30
    1f68:	82 0f       	add	r24, r18
    1f6a:	93 1f       	adc	r25, r19
    1f6c:	84 d4       	rcall	.+2312   	; 0x2876 <memcpy>
    1f6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f70:	3e 81       	ldd	r19, Y+6	; 0x06
    1f72:	20 0f       	add	r18, r16
    1f74:	31 1f       	adc	r19, r17
    1f76:	2d 83       	std	Y+5, r18	; 0x05
    1f78:	3e 83       	std	Y+6, r19	; 0x06
    1f7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f7e:	e2 17       	cp	r30, r18
    1f80:	f3 07       	cpc	r31, r19
    1f82:	10 f4       	brcc	.+4      	; 0x1f88 <udd_ep_trans_complet+0x154>
    1f84:	ed 83       	std	Y+5, r30	; 0x05
    1f86:	fe 83       	std	Y+6, r31	; 0x06
    1f88:	d7 01       	movw	r26, r14
    1f8a:	16 96       	adiw	r26, 0x06	; 6
    1f8c:	8d 91       	ld	r24, X+
    1f8e:	9c 91       	ld	r25, X
    1f90:	17 97       	sbiw	r26, 0x07	; 7
    1f92:	80 17       	cp	r24, r16
    1f94:	91 07       	cpc	r25, r17
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <udd_ep_trans_complet+0x166>
    1f98:	43 c0       	rjmp	.+134    	; 0x2020 <udd_ep_trans_complet+0x1ec>
    1f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9e:	e8 17       	cp	r30, r24
    1fa0:	f9 07       	cpc	r31, r25
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <udd_ep_trans_complet+0x172>
    1fa4:	3d c0       	rjmp	.+122    	; 0x2020 <udd_ep_trans_complet+0x1ec>
    1fa6:	e8 1b       	sub	r30, r24
    1fa8:	f9 0b       	sbc	r31, r25
    1faa:	e1 15       	cp	r30, r1
    1fac:	b4 e0       	ldi	r27, 0x04	; 4
    1fae:	fb 07       	cpc	r31, r27
    1fb0:	40 f0       	brcs	.+16     	; 0x1fc2 <udd_ep_trans_complet+0x18e>
    1fb2:	ef ef       	ldi	r30, 0xFF	; 255
    1fb4:	f3 e0       	ldi	r31, 0x03	; 3
    1fb6:	cf 01       	movw	r24, r30
    1fb8:	b6 01       	movw	r22, r12
    1fba:	43 d4       	rcall	.+2182   	; 0x2842 <__udivmodhi4>
    1fbc:	e8 1b       	sub	r30, r24
    1fbe:	f9 0b       	sbc	r31, r25
    1fc0:	05 c0       	rjmp	.+10     	; 0x1fcc <udd_ep_trans_complet+0x198>
    1fc2:	cf 01       	movw	r24, r30
    1fc4:	b6 01       	movw	r22, r12
    1fc6:	3d d4       	rcall	.+2170   	; 0x2842 <__udivmodhi4>
    1fc8:	e8 1b       	sub	r30, r24
    1fca:	f9 0b       	sbc	r31, r25
    1fcc:	d7 01       	movw	r26, r14
    1fce:	12 96       	adiw	r26, 0x02	; 2
    1fd0:	1d 92       	st	X+, r1
    1fd2:	1c 92       	st	X, r1
    1fd4:	13 97       	sbiw	r26, 0x03	; 3
    1fd6:	ec 15       	cp	r30, r12
    1fd8:	fd 05       	cpc	r31, r13
    1fda:	78 f4       	brcc	.+30     	; 0x1ffa <udd_ep_trans_complet+0x1c6>
    1fdc:	88 81       	ld	r24, Y
    1fde:	84 60       	ori	r24, 0x04	; 4
    1fe0:	88 83       	st	Y, r24
    1fe2:	b0 e4       	ldi	r27, 0x40	; 64
    1fe4:	bb 9e       	mul	r11, r27
    1fe6:	c0 01       	movw	r24, r0
    1fe8:	11 24       	eor	r1, r1
    1fea:	8b 57       	subi	r24, 0x7B	; 123
    1fec:	9f 4d       	sbci	r25, 0xDF	; 223
    1fee:	f7 01       	movw	r30, r14
    1ff0:	84 83       	std	Z+4, r24	; 0x04
    1ff2:	95 83       	std	Z+5, r25	; 0x05
    1ff4:	c6 82       	std	Z+6, r12	; 0x06
    1ff6:	d7 82       	std	Z+7, r13	; 0x07
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <udd_ep_trans_complet+0x1e4>
    1ffa:	29 81       	ldd	r18, Y+1	; 0x01
    1ffc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	82 0f       	add	r24, r18
    2004:	93 1f       	adc	r25, r19
    2006:	d7 01       	movw	r26, r14
    2008:	14 96       	adiw	r26, 0x04	; 4
    200a:	8d 93       	st	X+, r24
    200c:	9c 93       	st	X, r25
    200e:	15 97       	sbiw	r26, 0x05	; 5
    2010:	16 96       	adiw	r26, 0x06	; 6
    2012:	ed 93       	st	X+, r30
    2014:	fc 93       	st	X, r31
    2016:	17 97       	sbiw	r26, 0x07	; 7
    2018:	f7 01       	movw	r30, r14
    201a:	02 e0       	ldi	r16, 0x02	; 2
    201c:	06 93       	lac	Z, r16
    201e:	0e c0       	rjmp	.+28     	; 0x203c <udd_ep_trans_complet+0x208>
    2020:	88 81       	ld	r24, Y
    2022:	80 ff       	sbrs	r24, 0
    2024:	0b c0       	rjmp	.+22     	; 0x203c <udd_ep_trans_complet+0x208>
    2026:	8e 7f       	andi	r24, 0xFE	; 254
    2028:	88 83       	st	Y, r24
    202a:	ef 81       	ldd	r30, Y+7	; 0x07
    202c:	f8 85       	ldd	r31, Y+8	; 0x08
    202e:	30 97       	sbiw	r30, 0x00	; 0
    2030:	29 f0       	breq	.+10     	; 0x203c <udd_ep_trans_complet+0x208>
    2032:	6d 81       	ldd	r22, Y+5	; 0x05
    2034:	7e 81       	ldd	r23, Y+6	; 0x06
    2036:	4b 2d       	mov	r20, r11
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	09 95       	icall
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	ff 90       	pop	r15
    2046:	ef 90       	pop	r14
    2048:	df 90       	pop	r13
    204a:	cf 90       	pop	r12
    204c:	bf 90       	pop	r11
    204e:	08 95       	ret

00002050 <udd_attach>:
    2050:	cf 93       	push	r28
    2052:	cf b7       	in	r28, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	59 dd       	rcall	.-1358   	; 0x1b0c <udd_sleep_mode>
    205a:	ea ec       	ldi	r30, 0xCA	; 202
    205c:	f4 e0       	ldi	r31, 0x04	; 4
    205e:	80 e4       	ldi	r24, 0x40	; 64
    2060:	80 83       	st	Z, r24
    2062:	80 e2       	ldi	r24, 0x20	; 32
    2064:	80 83       	st	Z, r24
    2066:	e1 ec       	ldi	r30, 0xC1	; 193
    2068:	f4 e0       	ldi	r31, 0x04	; 4
    206a:	80 81       	ld	r24, Z
    206c:	81 60       	ori	r24, 0x01	; 1
    206e:	80 83       	st	Z, r24
    2070:	a9 ec       	ldi	r26, 0xC9	; 201
    2072:	b4 e0       	ldi	r27, 0x04	; 4
    2074:	8c 91       	ld	r24, X
    2076:	82 60       	ori	r24, 0x02	; 2
    2078:	8c 93       	st	X, r24
    207a:	e8 ec       	ldi	r30, 0xC8	; 200
    207c:	f4 e0       	ldi	r31, 0x04	; 4
    207e:	80 81       	ld	r24, Z
    2080:	80 64       	ori	r24, 0x40	; 64
    2082:	80 83       	st	Z, r24
    2084:	8c 91       	ld	r24, X
    2086:	81 60       	ori	r24, 0x01	; 1
    2088:	8c 93       	st	X, r24
    208a:	80 81       	ld	r24, Z
    208c:	80 68       	ori	r24, 0x80	; 128
    208e:	80 83       	st	Z, r24
    2090:	cf bf       	out	0x3f, r28	; 63
    2092:	cf 91       	pop	r28
    2094:	08 95       	ret

00002096 <udd_enable>:
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	c0 e6       	ldi	r28, 0x60	; 96
    209c:	d0 e0       	ldi	r29, 0x00	; 0
    209e:	18 82       	st	Y, r1
    20a0:	80 e3       	ldi	r24, 0x30	; 48
    20a2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <sysclk_enable_usb>
    20a6:	e0 ec       	ldi	r30, 0xC0	; 192
    20a8:	f4 e0       	ldi	r31, 0x04	; 4
    20aa:	80 81       	ld	r24, Z
    20ac:	80 64       	ori	r24, 0x40	; 64
    20ae:	80 83       	st	Z, r24
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	88 83       	st	Y, r24
    20b4:	cf b7       	in	r28, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	fc 01       	movw	r30, r24
    20be:	ee 0f       	add	r30, r30
    20c0:	ff 1f       	adc	r31, r31
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	ef 5e       	subi	r30, 0xEF	; 239
    20cc:	fd 4d       	sbci	r31, 0xDD	; 221
    20ce:	10 82       	st	Z, r1
    20d0:	01 96       	adiw	r24, 0x01	; 1
    20d2:	88 30       	cpi	r24, 0x08	; 8
    20d4:	91 05       	cpc	r25, r1
    20d6:	91 f7       	brne	.-28     	; 0x20bc <udd_enable+0x26>
    20d8:	e5 e8       	ldi	r30, 0x85	; 133
    20da:	f1 e2       	ldi	r31, 0x21	; 33
    20dc:	80 81       	ld	r24, Z
    20de:	8e 7f       	andi	r24, 0xFE	; 254
    20e0:	80 83       	st	Z, r24
    20e2:	ee e8       	ldi	r30, 0x8E	; 142
    20e4:	f1 e2       	ldi	r31, 0x21	; 33
    20e6:	80 81       	ld	r24, Z
    20e8:	8e 7f       	andi	r24, 0xFE	; 254
    20ea:	80 83       	st	Z, r24
    20ec:	e7 e9       	ldi	r30, 0x97	; 151
    20ee:	f1 e2       	ldi	r31, 0x21	; 33
    20f0:	80 81       	ld	r24, Z
    20f2:	8e 7f       	andi	r24, 0xFE	; 254
    20f4:	80 83       	st	Z, r24
    20f6:	e0 ea       	ldi	r30, 0xA0	; 160
    20f8:	f1 e2       	ldi	r31, 0x21	; 33
    20fa:	80 81       	ld	r24, Z
    20fc:	8e 7f       	andi	r24, 0xFE	; 254
    20fe:	80 83       	st	Z, r24
    2100:	e9 ea       	ldi	r30, 0xA9	; 169
    2102:	f1 e2       	ldi	r31, 0x21	; 33
    2104:	80 81       	ld	r24, Z
    2106:	8e 7f       	andi	r24, 0xFE	; 254
    2108:	80 83       	st	Z, r24
    210a:	e2 eb       	ldi	r30, 0xB2	; 178
    210c:	f1 e2       	ldi	r31, 0x21	; 33
    210e:	80 81       	ld	r24, Z
    2110:	8e 7f       	andi	r24, 0xFE	; 254
    2112:	80 83       	st	Z, r24
    2114:	6a e1       	ldi	r22, 0x1A	; 26
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	82 e0       	ldi	r24, 0x02	; 2
    211a:	ee dc       	rcall	.-1572   	; 0x1af8 <nvm_read_byte>
    211c:	8f 3f       	cpi	r24, 0xFF	; 255
    211e:	19 f0       	breq	.+6      	; 0x2126 <udd_enable+0x90>
    2120:	80 93 fa 04 	sts	0x04FA, r24
    2124:	03 c0       	rjmp	.+6      	; 0x212c <udd_enable+0x96>
    2126:	8f e1       	ldi	r24, 0x1F	; 31
    2128:	80 93 fa 04 	sts	0x04FA, r24
    212c:	6b e1       	ldi	r22, 0x1B	; 27
    212e:	70 e0       	ldi	r23, 0x00	; 0
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	e2 dc       	rcall	.-1596   	; 0x1af8 <nvm_read_byte>
    2134:	8f 3f       	cpi	r24, 0xFF	; 255
    2136:	19 f0       	breq	.+6      	; 0x213e <udd_enable+0xa8>
    2138:	80 93 fb 04 	sts	0x04FB, r24
    213c:	03 c0       	rjmp	.+6      	; 0x2144 <udd_enable+0xae>
    213e:	8f e1       	ldi	r24, 0x1F	; 31
    2140:	80 93 fb 04 	sts	0x04FB, r24
    2144:	e0 ec       	ldi	r30, 0xC0	; 192
    2146:	f4 e0       	ldi	r31, 0x04	; 4
    2148:	80 81       	ld	r24, Z
    214a:	83 60       	ori	r24, 0x03	; 3
    214c:	80 83       	st	Z, r24
    214e:	80 81       	ld	r24, Z
    2150:	80 68       	ori	r24, 0x80	; 128
    2152:	80 83       	st	Z, r24
    2154:	80 81       	ld	r24, Z
    2156:	80 61       	ori	r24, 0x10	; 16
    2158:	80 83       	st	Z, r24
    215a:	80 e1       	ldi	r24, 0x10	; 16
    215c:	92 e2       	ldi	r25, 0x22	; 34
    215e:	86 83       	std	Z+6, r24	; 0x06
    2160:	97 83       	std	Z+7, r25	; 0x07
    2162:	80 81       	ld	r24, Z
    2164:	80 62       	ori	r24, 0x20	; 32
    2166:	80 83       	st	Z, r24
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	80 93 c5 04 	sts	0x04C5, r24
    216e:	e8 ec       	ldi	r30, 0xC8	; 200
    2170:	f4 e0       	ldi	r31, 0x04	; 4
    2172:	80 81       	ld	r24, Z
    2174:	82 60       	ori	r24, 0x02	; 2
    2176:	80 83       	st	Z, r24
    2178:	10 92 54 22 	sts	0x2254, r1
    217c:	80 91 47 2c 	lds	r24, 0x2C47
    2180:	8f 3f       	cpi	r24, 0xFF	; 255
    2182:	09 f4       	brne	.+2      	; 0x2186 <udd_enable+0xf0>
    2184:	ff cf       	rjmp	.-2      	; 0x2184 <udd_enable+0xee>
    2186:	8f b7       	in	r24, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	e7 e4       	ldi	r30, 0x47	; 71
    218c:	fc e2       	ldi	r31, 0x2C	; 44
    218e:	90 81       	ld	r25, Z
    2190:	9f 5f       	subi	r25, 0xFF	; 255
    2192:	90 83       	st	Z, r25
    2194:	8f bf       	out	0x3f, r24	; 63
    2196:	5c df       	rcall	.-328    	; 0x2050 <udd_attach>
    2198:	cf bf       	out	0x3f, r28	; 63
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	08 95       	ret

000021a0 <udd_set_address>:
    21a0:	80 93 c3 04 	sts	0x04C3, r24
    21a4:	08 95       	ret

000021a6 <udd_getaddress>:
    21a6:	80 91 c3 04 	lds	r24, 0x04C3
    21aa:	08 95       	ret

000021ac <udd_set_setup_payload>:
    21ac:	80 93 5e 24 	sts	0x245E, r24
    21b0:	90 93 5f 24 	sts	0x245F, r25
    21b4:	60 93 60 24 	sts	0x2460, r22
    21b8:	70 93 61 24 	sts	0x2461, r23
    21bc:	08 95       	ret

000021be <udd_ep_alloc>:
    21be:	e8 2f       	mov	r30, r24
    21c0:	ef 70       	andi	r30, 0x0F	; 15
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	ee 0f       	add	r30, r30
    21c6:	ff 1f       	adc	r31, r31
    21c8:	99 27       	eor	r25, r25
    21ca:	87 fd       	sbrc	r24, 7
    21cc:	90 95       	com	r25
    21ce:	88 27       	eor	r24, r24
    21d0:	99 0f       	add	r25, r25
    21d2:	88 1f       	adc	r24, r24
    21d4:	99 27       	eor	r25, r25
    21d6:	e8 0f       	add	r30, r24
    21d8:	f9 1f       	adc	r31, r25
    21da:	ee 0f       	add	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	ee 0f       	add	r30, r30
    21e0:	ff 1f       	adc	r31, r31
    21e2:	ee 0f       	add	r30, r30
    21e4:	ff 1f       	adc	r31, r31
    21e6:	e0 5f       	subi	r30, 0xF0	; 240
    21e8:	fd 4d       	sbci	r31, 0xDD	; 221
    21ea:	81 81       	ldd	r24, Z+1	; 0x01
    21ec:	80 7c       	andi	r24, 0xC0	; 192
    21ee:	d9 f5       	brne	.+118    	; 0x2266 <udd_ep_alloc+0xa8>
    21f0:	63 70       	andi	r22, 0x03	; 3
    21f2:	61 30       	cpi	r22, 0x01	; 1
    21f4:	29 f0       	breq	.+10     	; 0x2200 <udd_ep_alloc+0x42>
    21f6:	10 f4       	brcc	.+4      	; 0x21fc <udd_ep_alloc+0x3e>
    21f8:	80 e4       	ldi	r24, 0x40	; 64
    21fa:	03 c0       	rjmp	.+6      	; 0x2202 <udd_ep_alloc+0x44>
    21fc:	80 e8       	ldi	r24, 0x80	; 128
    21fe:	01 c0       	rjmp	.+2      	; 0x2202 <udd_ep_alloc+0x44>
    2200:	80 ec       	ldi	r24, 0xC0	; 192
    2202:	40 38       	cpi	r20, 0x80	; 128
    2204:	51 05       	cpc	r21, r1
    2206:	e1 f0       	breq	.+56     	; 0x2240 <udd_ep_alloc+0x82>
    2208:	50 f4       	brcc	.+20     	; 0x221e <udd_ep_alloc+0x60>
    220a:	40 32       	cpi	r20, 0x20	; 32
    220c:	51 05       	cpc	r21, r1
    220e:	a1 f0       	breq	.+40     	; 0x2238 <udd_ep_alloc+0x7a>
    2210:	40 34       	cpi	r20, 0x40	; 64
    2212:	51 05       	cpc	r21, r1
    2214:	99 f0       	breq	.+38     	; 0x223c <udd_ep_alloc+0x7e>
    2216:	40 31       	cpi	r20, 0x10	; 16
    2218:	51 05       	cpc	r21, r1
    221a:	61 f4       	brne	.+24     	; 0x2234 <udd_ep_alloc+0x76>
    221c:	19 c0       	rjmp	.+50     	; 0x2250 <udd_ep_alloc+0x92>
    221e:	41 15       	cp	r20, r1
    2220:	92 e0       	ldi	r25, 0x02	; 2
    2222:	59 07       	cpc	r21, r25
    2224:	89 f0       	breq	.+34     	; 0x2248 <udd_ep_alloc+0x8a>
    2226:	4f 3f       	cpi	r20, 0xFF	; 255
    2228:	93 e0       	ldi	r25, 0x03	; 3
    222a:	59 07       	cpc	r21, r25
    222c:	79 f0       	breq	.+30     	; 0x224c <udd_ep_alloc+0x8e>
    222e:	41 15       	cp	r20, r1
    2230:	51 40       	sbci	r21, 0x01	; 1
    2232:	41 f0       	breq	.+16     	; 0x2244 <udd_ep_alloc+0x86>
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	0d c0       	rjmp	.+26     	; 0x2252 <udd_ep_alloc+0x94>
    2238:	22 e0       	ldi	r18, 0x02	; 2
    223a:	0b c0       	rjmp	.+22     	; 0x2252 <udd_ep_alloc+0x94>
    223c:	23 e0       	ldi	r18, 0x03	; 3
    223e:	09 c0       	rjmp	.+18     	; 0x2252 <udd_ep_alloc+0x94>
    2240:	24 e0       	ldi	r18, 0x04	; 4
    2242:	07 c0       	rjmp	.+14     	; 0x2252 <udd_ep_alloc+0x94>
    2244:	25 e0       	ldi	r18, 0x05	; 5
    2246:	05 c0       	rjmp	.+10     	; 0x2252 <udd_ep_alloc+0x94>
    2248:	26 e0       	ldi	r18, 0x06	; 6
    224a:	03 c0       	rjmp	.+6      	; 0x2252 <udd_ep_alloc+0x94>
    224c:	27 e0       	ldi	r18, 0x07	; 7
    224e:	01 c0       	rjmp	.+2      	; 0x2252 <udd_ep_alloc+0x94>
    2250:	21 e0       	ldi	r18, 0x01	; 1
    2252:	11 82       	std	Z+1, r1	; 0x01
    2254:	96 e0       	ldi	r25, 0x06	; 6
    2256:	90 83       	st	Z, r25
    2258:	82 2b       	or	r24, r18
    225a:	81 83       	std	Z+1, r24	; 0x01
    225c:	81 81       	ldd	r24, Z+1	; 0x01
    225e:	80 62       	ori	r24, 0x20	; 32
    2260:	81 83       	std	Z+1, r24	; 0x01
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	08 95       	ret
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	08 95       	ret

0000226a <udd_ep_is_halted>:
    226a:	e8 2f       	mov	r30, r24
    226c:	ef 70       	andi	r30, 0x0F	; 15
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	ee 0f       	add	r30, r30
    2272:	ff 1f       	adc	r31, r31
    2274:	99 27       	eor	r25, r25
    2276:	87 fd       	sbrc	r24, 7
    2278:	90 95       	com	r25
    227a:	88 27       	eor	r24, r24
    227c:	99 0f       	add	r25, r25
    227e:	88 1f       	adc	r24, r24
    2280:	99 27       	eor	r25, r25
    2282:	e8 0f       	add	r30, r24
    2284:	f9 1f       	adc	r31, r25
    2286:	ee 0f       	add	r30, r30
    2288:	ff 1f       	adc	r31, r31
    228a:	ee 0f       	add	r30, r30
    228c:	ff 1f       	adc	r31, r31
    228e:	ee 0f       	add	r30, r30
    2290:	ff 1f       	adc	r31, r31
    2292:	e0 5f       	subi	r30, 0xF0	; 240
    2294:	fd 4d       	sbci	r31, 0xDD	; 221
    2296:	81 81       	ldd	r24, Z+1	; 0x01
    2298:	82 fb       	bst	r24, 2
    229a:	88 27       	eor	r24, r24
    229c:	80 f9       	bld	r24, 0
    229e:	08 95       	ret

000022a0 <udd_ep_clear_halt>:
    22a0:	e8 2f       	mov	r30, r24
    22a2:	ef 70       	andi	r30, 0x0F	; 15
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	ee 0f       	add	r30, r30
    22a8:	ff 1f       	adc	r31, r31
    22aa:	28 2f       	mov	r18, r24
    22ac:	33 27       	eor	r19, r19
    22ae:	27 fd       	sbrc	r18, 7
    22b0:	30 95       	com	r19
    22b2:	22 27       	eor	r18, r18
    22b4:	33 0f       	add	r19, r19
    22b6:	22 1f       	adc	r18, r18
    22b8:	33 27       	eor	r19, r19
    22ba:	e2 0f       	add	r30, r18
    22bc:	f3 1f       	adc	r31, r19
    22be:	ee 0f       	add	r30, r30
    22c0:	ff 1f       	adc	r31, r31
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	ee 0f       	add	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	e0 5f       	subi	r30, 0xF0	; 240
    22cc:	fd 4d       	sbci	r31, 0xDD	; 221
    22ce:	91 81       	ldd	r25, Z+1	; 0x01
    22d0:	92 ff       	sbrs	r25, 2
    22d2:	0e c0       	rjmp	.+28     	; 0x22f0 <udd_ep_clear_halt+0x50>
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	9b 7f       	andi	r25, 0xFB	; 251
    22d8:	91 83       	std	Z+1, r25	; 0x01
    22da:	22 dd       	rcall	.-1468   	; 0x1d20 <udd_ep_get_job>
    22dc:	fc 01       	movw	r30, r24
    22de:	80 81       	ld	r24, Z
    22e0:	80 ff       	sbrs	r24, 0
    22e2:	06 c0       	rjmp	.+12     	; 0x22f0 <udd_ep_clear_halt+0x50>
    22e4:	8e 7f       	andi	r24, 0xFE	; 254
    22e6:	80 83       	st	Z, r24
    22e8:	07 80       	ldd	r0, Z+7	; 0x07
    22ea:	f0 85       	ldd	r31, Z+8	; 0x08
    22ec:	e0 2d       	mov	r30, r0
    22ee:	09 95       	icall
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	08 95       	ret

000022f4 <udd_ep_run>:
    22f4:	7f 92       	push	r7
    22f6:	8f 92       	push	r8
    22f8:	9f 92       	push	r9
    22fa:	af 92       	push	r10
    22fc:	bf 92       	push	r11
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	98 2e       	mov	r9, r24
    2310:	86 2e       	mov	r8, r22
    2312:	5a 01       	movw	r10, r20
    2314:	69 01       	movw	r12, r18
    2316:	04 dd       	rcall	.-1528   	; 0x1d20 <udd_ep_get_job>
    2318:	7c 01       	movw	r14, r24
    231a:	79 2c       	mov	r7, r9
    231c:	77 1c       	adc	r7, r7
    231e:	77 24       	eor	r7, r7
    2320:	77 1c       	adc	r7, r7
    2322:	c9 2d       	mov	r28, r9
    2324:	cf 70       	andi	r28, 0x0F	; 15
    2326:	d0 e0       	ldi	r29, 0x00	; 0
    2328:	cc 0f       	add	r28, r28
    232a:	dd 1f       	adc	r29, r29
    232c:	c7 0d       	add	r28, r7
    232e:	d1 1d       	adc	r29, r1
    2330:	cc 0f       	add	r28, r28
    2332:	dd 1f       	adc	r29, r29
    2334:	cc 0f       	add	r28, r28
    2336:	dd 1f       	adc	r29, r29
    2338:	cc 0f       	add	r28, r28
    233a:	dd 1f       	adc	r29, r29
    233c:	c0 5f       	subi	r28, 0xF0	; 240
    233e:	dd 4d       	sbci	r29, 0xDD	; 221
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	80 7c       	andi	r24, 0xC0	; 192
    2344:	09 f4       	brne	.+2      	; 0x2348 <udd_ep_run+0x54>
    2346:	4b c0       	rjmp	.+150    	; 0x23de <udd_ep_run+0xea>
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	80 7c       	andi	r24, 0xC0	; 192
    234c:	80 3c       	cpi	r24, 0xC0	; 192
    234e:	19 f0       	breq	.+6      	; 0x2356 <udd_ep_run+0x62>
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	82 fd       	sbrc	r24, 2
    2354:	46 c0       	rjmp	.+140    	; 0x23e2 <udd_ep_run+0xee>
    2356:	8f b7       	in	r24, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	f7 01       	movw	r30, r14
    235c:	90 81       	ld	r25, Z
    235e:	90 ff       	sbrs	r25, 0
    2360:	03 c0       	rjmp	.+6      	; 0x2368 <udd_ep_run+0x74>
    2362:	8f bf       	out	0x3f, r24	; 63
    2364:	71 2c       	mov	r7, r1
    2366:	3e c0       	rjmp	.+124    	; 0x23e4 <udd_ep_run+0xf0>
    2368:	f7 01       	movw	r30, r14
    236a:	90 81       	ld	r25, Z
    236c:	91 60       	ori	r25, 0x01	; 1
    236e:	90 83       	st	Z, r25
    2370:	8f bf       	out	0x3f, r24	; 63
    2372:	f7 01       	movw	r30, r14
    2374:	a1 82       	std	Z+1, r10	; 0x01
    2376:	b2 82       	std	Z+2, r11	; 0x02
    2378:	c3 82       	std	Z+3, r12	; 0x03
    237a:	d4 82       	std	Z+4, r13	; 0x04
    237c:	15 82       	std	Z+5, r1	; 0x05
    237e:	16 82       	std	Z+6, r1	; 0x06
    2380:	07 83       	std	Z+7, r16	; 0x07
    2382:	10 87       	std	Z+8, r17	; 0x08
    2384:	81 10       	cpse	r8, r1
    2386:	06 c0       	rjmp	.+12     	; 0x2394 <udd_ep_run+0xa0>
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	c1 14       	cp	r12, r1
    238c:	d1 04       	cpc	r13, r1
    238e:	19 f0       	breq	.+6      	; 0x2396 <udd_ep_run+0xa2>
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	01 c0       	rjmp	.+2      	; 0x2396 <udd_ep_run+0xa2>
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	f7 01       	movw	r30, r14
    2398:	80 81       	ld	r24, Z
    239a:	90 fb       	bst	r25, 0
    239c:	81 f9       	bld	r24, 1
    239e:	8b 7f       	andi	r24, 0xFB	; 251
    23a0:	80 83       	st	Z, r24
    23a2:	77 20       	and	r7, r7
    23a4:	19 f0       	breq	.+6      	; 0x23ac <udd_ep_run+0xb8>
    23a6:	1e 82       	std	Y+6, r1	; 0x06
    23a8:	1f 82       	std	Y+7, r1	; 0x07
    23aa:	14 c0       	rjmp	.+40     	; 0x23d4 <udd_ep_run+0xe0>
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	80 7c       	andi	r24, 0xC0	; 192
    23b0:	80 3c       	cpi	r24, 0xC0	; 192
    23b2:	61 f4       	brne	.+24     	; 0x23cc <udd_ep_run+0xd8>
    23b4:	ce 01       	movw	r24, r28
    23b6:	90 dc       	rcall	.-1760   	; 0x1cd8 <udd_ep_get_size>
    23b8:	bc 01       	movw	r22, r24
    23ba:	c6 01       	movw	r24, r12
    23bc:	42 d2       	rcall	.+1156   	; 0x2842 <__udivmodhi4>
    23be:	89 2b       	or	r24, r25
    23c0:	29 f0       	breq	.+10     	; 0x23cc <udd_ep_run+0xd8>
    23c2:	f7 01       	movw	r30, r14
    23c4:	80 81       	ld	r24, Z
    23c6:	8e 7f       	andi	r24, 0xFE	; 254
    23c8:	80 83       	st	Z, r24
    23ca:	0c c0       	rjmp	.+24     	; 0x23e4 <udd_ep_run+0xf0>
    23cc:	1a 82       	std	Y+2, r1	; 0x02
    23ce:	1b 82       	std	Y+3, r1	; 0x03
    23d0:	1e 82       	std	Y+6, r1	; 0x06
    23d2:	1f 82       	std	Y+7, r1	; 0x07
    23d4:	89 2d       	mov	r24, r9
    23d6:	2e dd       	rcall	.-1444   	; 0x1e34 <udd_ep_trans_complet>
    23d8:	77 24       	eor	r7, r7
    23da:	73 94       	inc	r7
    23dc:	03 c0       	rjmp	.+6      	; 0x23e4 <udd_ep_run+0xf0>
    23de:	71 2c       	mov	r7, r1
    23e0:	01 c0       	rjmp	.+2      	; 0x23e4 <udd_ep_run+0xf0>
    23e2:	71 2c       	mov	r7, r1
    23e4:	87 2d       	mov	r24, r7
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	df 90       	pop	r13
    23f4:	cf 90       	pop	r12
    23f6:	bf 90       	pop	r11
    23f8:	af 90       	pop	r10
    23fa:	9f 90       	pop	r9
    23fc:	8f 90       	pop	r8
    23fe:	7f 90       	pop	r7
    2400:	08 95       	ret

00002402 <udd_ep_abort>:
    2402:	ff 92       	push	r15
    2404:	0f 93       	push	r16
    2406:	1f 93       	push	r17
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	18 2f       	mov	r17, r24
    240e:	f8 2e       	mov	r15, r24
    2410:	ff 1c       	adc	r15, r15
    2412:	ff 24       	eor	r15, r15
    2414:	ff 1c       	adc	r15, r15
    2416:	c8 2f       	mov	r28, r24
    2418:	cf 70       	andi	r28, 0x0F	; 15
    241a:	d0 e0       	ldi	r29, 0x00	; 0
    241c:	cc 0f       	add	r28, r28
    241e:	dd 1f       	adc	r29, r29
    2420:	cf 0d       	add	r28, r15
    2422:	d1 1d       	adc	r29, r1
    2424:	cc 0f       	add	r28, r28
    2426:	dd 1f       	adc	r29, r29
    2428:	cc 0f       	add	r28, r28
    242a:	dd 1f       	adc	r29, r29
    242c:	cc 0f       	add	r28, r28
    242e:	dd 1f       	adc	r29, r29
    2430:	c0 5f       	subi	r28, 0xF0	; 240
    2432:	dd 4d       	sbci	r29, 0xDD	; 221
    2434:	75 dc       	rcall	.-1814   	; 0x1d20 <udd_ep_get_job>
    2436:	dc 01       	movw	r26, r24
    2438:	fe 01       	movw	r30, r28
    243a:	02 e0       	ldi	r16, 0x02	; 2
    243c:	05 93       	las	Z, r16
    243e:	8c 91       	ld	r24, X
    2440:	80 ff       	sbrs	r24, 0
    2442:	12 c0       	rjmp	.+36     	; 0x2468 <udd_ep_abort+0x66>
    2444:	8e 7f       	andi	r24, 0xFE	; 254
    2446:	8c 93       	st	X, r24
    2448:	17 96       	adiw	r26, 0x07	; 7
    244a:	ed 91       	ld	r30, X+
    244c:	fc 91       	ld	r31, X
    244e:	18 97       	sbiw	r26, 0x08	; 8
    2450:	30 97       	sbiw	r30, 0x00	; 0
    2452:	51 f0       	breq	.+20     	; 0x2468 <udd_ep_abort+0x66>
    2454:	ff 20       	and	r15, r15
    2456:	19 f0       	breq	.+6      	; 0x245e <udd_ep_abort+0x5c>
    2458:	6e 81       	ldd	r22, Y+6	; 0x06
    245a:	7f 81       	ldd	r23, Y+7	; 0x07
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <udd_ep_abort+0x60>
    245e:	6a 81       	ldd	r22, Y+2	; 0x02
    2460:	7b 81       	ldd	r23, Y+3	; 0x03
    2462:	41 2f       	mov	r20, r17
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	09 95       	icall
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	ff 90       	pop	r15
    2472:	08 95       	ret

00002474 <udd_ep_free>:
    2474:	cf 93       	push	r28
    2476:	c8 2f       	mov	r28, r24
    2478:	c4 df       	rcall	.-120    	; 0x2402 <udd_ep_abort>
    247a:	ec 2f       	mov	r30, r28
    247c:	ef 70       	andi	r30, 0x0F	; 15
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	ee 0f       	add	r30, r30
    2482:	ff 1f       	adc	r31, r31
    2484:	8c 2f       	mov	r24, r28
    2486:	99 27       	eor	r25, r25
    2488:	87 fd       	sbrc	r24, 7
    248a:	90 95       	com	r25
    248c:	88 27       	eor	r24, r24
    248e:	99 0f       	add	r25, r25
    2490:	88 1f       	adc	r24, r24
    2492:	99 27       	eor	r25, r25
    2494:	e8 0f       	add	r30, r24
    2496:	f9 1f       	adc	r31, r25
    2498:	ee 0f       	add	r30, r30
    249a:	ff 1f       	adc	r31, r31
    249c:	ee 0f       	add	r30, r30
    249e:	ff 1f       	adc	r31, r31
    24a0:	ee 0f       	add	r30, r30
    24a2:	ff 1f       	adc	r31, r31
    24a4:	e0 5f       	subi	r30, 0xF0	; 240
    24a6:	fd 4d       	sbci	r31, 0xDD	; 221
    24a8:	11 82       	std	Z+1, r1	; 0x01
    24aa:	cf 91       	pop	r28
    24ac:	08 95       	ret

000024ae <udd_ep_set_halt>:
    24ae:	0f 93       	push	r16
    24b0:	e8 2f       	mov	r30, r24
    24b2:	ef 70       	andi	r30, 0x0F	; 15
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	28 2f       	mov	r18, r24
    24bc:	33 27       	eor	r19, r19
    24be:	27 fd       	sbrc	r18, 7
    24c0:	30 95       	com	r19
    24c2:	22 27       	eor	r18, r18
    24c4:	33 0f       	add	r19, r19
    24c6:	22 1f       	adc	r18, r18
    24c8:	33 27       	eor	r19, r19
    24ca:	e2 0f       	add	r30, r18
    24cc:	f3 1f       	adc	r31, r19
    24ce:	ee 0f       	add	r30, r30
    24d0:	ff 1f       	adc	r31, r31
    24d2:	ee 0f       	add	r30, r30
    24d4:	ff 1f       	adc	r31, r31
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	e0 5f       	subi	r30, 0xF0	; 240
    24dc:	fd 4d       	sbci	r31, 0xDD	; 221
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	94 60       	ori	r25, 0x04	; 4
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	01 e0       	ldi	r16, 0x01	; 1
    24e6:	06 93       	lac	Z, r16
    24e8:	8c df       	rcall	.-232    	; 0x2402 <udd_ep_abort>
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	0f 91       	pop	r16
    24ee:	08 95       	ret

000024f0 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    24f0:	1f 92       	push	r1
    24f2:	0f 92       	push	r0
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	0f 92       	push	r0
    24f8:	11 24       	eor	r1, r1
    24fa:	0f 93       	push	r16
    24fc:	2f 93       	push	r18
    24fe:	3f 93       	push	r19
    2500:	4f 93       	push	r20
    2502:	5f 93       	push	r21
    2504:	6f 93       	push	r22
    2506:	7f 93       	push	r23
    2508:	8f 93       	push	r24
    250a:	9f 93       	push	r25
    250c:	af 93       	push	r26
    250e:	bf 93       	push	r27
    2510:	ef 93       	push	r30
    2512:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2514:	80 91 cb 04 	lds	r24, 0x04CB
    2518:	88 23       	and	r24, r24
    251a:	44 f4       	brge	.+16     	; 0x252c <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    251c:	80 e8       	ldi	r24, 0x80	; 128
    251e:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    2522:	0e 94 82 09 	call	0x1304	; 0x1304 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2526:	0e 94 88 01 	call	0x310	; 0x310 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    252a:	90 c0       	rjmp	.+288    	; 0x264c <__vector_125+0x15c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    252c:	80 91 cb 04 	lds	r24, 0x04CB
    2530:	82 ff       	sbrs	r24, 2
    2532:	20 c0       	rjmp	.+64     	; 0x2574 <__vector_125+0x84>
		udd_ack_underflow_event();
    2534:	84 e0       	ldi	r24, 0x04	; 4
    2536:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    253a:	80 91 18 22 	lds	r24, 0x2218
    253e:	86 ff       	sbrs	r24, 6
    2540:	85 c0       	rjmp	.+266    	; 0x264c <__vector_125+0x15c>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2542:	80 91 cc 04 	lds	r24, 0x04CC
    2546:	81 fd       	sbrc	r24, 1
    2548:	81 c0       	rjmp	.+258    	; 0x264c <__vector_125+0x15c>
    254a:	05 dc       	rcall	.-2038   	; 0x1d56 <udd_ctrl_interrupt_tc_setup>
    254c:	81 11       	cpse	r24, r1
    254e:	7e c0       	rjmp	.+252    	; 0x264c <__vector_125+0x15c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2550:	80 91 ff 21 	lds	r24, 0x21FF
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	11 f4       	brne	.+4      	; 0x255c <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2558:	3b db       	rcall	.-2442   	; 0x1bd0 <udd_ctrl_send_zlp_in>
    255a:	78 c0       	rjmp	.+240    	; 0x264c <__vector_125+0x15c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    255c:	84 30       	cpi	r24, 0x04	; 4
    255e:	09 f0       	breq	.+2      	; 0x2562 <__vector_125+0x72>
    2560:	75 c0       	rjmp	.+234    	; 0x264c <__vector_125+0x15c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2562:	e9 e1       	ldi	r30, 0x19	; 25
    2564:	f2 e2       	ldi	r31, 0x22	; 34
    2566:	04 e0       	ldi	r16, 0x04	; 4
    2568:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    256a:	e1 e1       	ldi	r30, 0x11	; 17
    256c:	f2 e2       	ldi	r31, 0x22	; 34
    256e:	04 e0       	ldi	r16, 0x04	; 4
    2570:	05 93       	las	Z, r16
    2572:	6c c0       	rjmp	.+216    	; 0x264c <__vector_125+0x15c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2574:	80 91 cb 04 	lds	r24, 0x04CB
    2578:	81 ff       	sbrs	r24, 1
    257a:	63 c0       	rjmp	.+198    	; 0x2642 <__vector_125+0x152>
		udd_ack_overflow_event();
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    2582:	80 91 10 22 	lds	r24, 0x2210
    2586:	86 ff       	sbrs	r24, 6
    2588:	61 c0       	rjmp	.+194    	; 0x264c <__vector_125+0x15c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    258a:	80 91 cc 04 	lds	r24, 0x04CC
    258e:	81 fd       	sbrc	r24, 1
    2590:	5d c0       	rjmp	.+186    	; 0x264c <__vector_125+0x15c>
    2592:	e1 db       	rcall	.-2110   	; 0x1d56 <udd_ctrl_interrupt_tc_setup>
    2594:	81 11       	cpse	r24, r1
    2596:	5a c0       	rjmp	.+180    	; 0x264c <__vector_125+0x15c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2598:	80 91 ff 21 	lds	r24, 0x21FF
    259c:	82 30       	cpi	r24, 0x02	; 2
    259e:	41 f4       	brne	.+16     	; 0x25b0 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    25a0:	84 e0       	ldi	r24, 0x04	; 4
    25a2:	80 93 ff 21 	sts	0x21FF, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    25a6:	e0 e1       	ldi	r30, 0x10	; 16
    25a8:	f2 e2       	ldi	r31, 0x22	; 34
    25aa:	02 e0       	ldi	r16, 0x02	; 2
    25ac:	06 93       	lac	Z, r16
    25ae:	4e c0       	rjmp	.+156    	; 0x264c <__vector_125+0x15c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    25b0:	83 30       	cpi	r24, 0x03	; 3
    25b2:	09 f0       	breq	.+2      	; 0x25b6 <__vector_125+0xc6>
    25b4:	4b c0       	rjmp	.+150    	; 0x264c <__vector_125+0x15c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    25b6:	e9 e1       	ldi	r30, 0x19	; 25
    25b8:	f2 e2       	ldi	r31, 0x22	; 34
    25ba:	04 e0       	ldi	r16, 0x04	; 4
    25bc:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    25be:	e1 e1       	ldi	r30, 0x11	; 17
    25c0:	f2 e2       	ldi	r31, 0x22	; 34
    25c2:	04 e0       	ldi	r16, 0x04	; 4
    25c4:	05 93       	las	Z, r16
    25c6:	42 c0       	rjmp	.+132    	; 0x264c <__vector_125+0x15c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    25c8:	80 e1       	ldi	r24, 0x10	; 16
    25ca:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	18 df       	rcall	.-464    	; 0x2402 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    25d2:	81 e8       	ldi	r24, 0x81	; 129
    25d4:	16 df       	rcall	.-468    	; 0x2402 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    25d6:	82 e0       	ldi	r24, 0x02	; 2
    25d8:	14 df       	rcall	.-472    	; 0x2402 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    25da:	82 e8       	ldi	r24, 0x82	; 130
    25dc:	12 df       	rcall	.-476    	; 0x2402 <udd_ep_abort>
		}
#endif
		udc_reset();
    25de:	0e 94 5d 09 	call	0x12ba	; 0x12ba <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    25e2:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    25e6:	e1 e1       	ldi	r30, 0x11	; 17
    25e8:	f2 e2       	ldi	r31, 0x22	; 34
    25ea:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    25ec:	96 e0       	ldi	r25, 0x06	; 6
    25ee:	90 93 10 22 	sts	0x2210, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    25f2:	83 e4       	ldi	r24, 0x43	; 67
    25f4:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    25f6:	e9 e1       	ldi	r30, 0x19	; 25
    25f8:	f2 e2       	ldi	r31, 0x22	; 34
    25fa:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    25fc:	90 93 18 22 	sts	0x2218, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2600:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2602:	8b eb       	ldi	r24, 0xBB	; 187
    2604:	91 e2       	ldi	r25, 0x21	; 33
    2606:	80 93 14 22 	sts	0x2214, r24
    260a:	90 93 15 22 	sts	0x2215, r25
		// Reset endpoint control management
		udd_ctrl_init();
    260e:	a7 da       	rcall	.-2738   	; 0x1b5e <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2610:	1d c0       	rjmp	.+58     	; 0x264c <__vector_125+0x15c>
	}

	if (udd_is_suspend_event()) {
    2612:	80 91 cb 04 	lds	r24, 0x04CB
    2616:	86 ff       	sbrs	r24, 6
    2618:	08 c0       	rjmp	.+16     	; 0x262a <__vector_125+0x13a>
		udd_ack_suspend_event();
    261a:	80 e4       	ldi	r24, 0x40	; 64
    261c:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	74 da       	rcall	.-2840   	; 0x1b0c <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2624:	0e 94 86 01 	call	0x30c	; 0x30c <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2628:	11 c0       	rjmp	.+34     	; 0x264c <__vector_125+0x15c>
	}

	if (udd_is_resume_event()) {
    262a:	80 91 cb 04 	lds	r24, 0x04CB
    262e:	85 ff       	sbrs	r24, 5
    2630:	0d c0       	rjmp	.+26     	; 0x264c <__vector_125+0x15c>
		udd_ack_resume_event();
    2632:	80 e2       	ldi	r24, 0x20	; 32
    2634:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	68 da       	rcall	.-2864   	; 0x1b0c <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    263c:	0e 94 87 01 	call	0x30e	; 0x30e <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2640:	05 c0       	rjmp	.+10     	; 0x264c <__vector_125+0x15c>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2642:	80 91 cb 04 	lds	r24, 0x04CB
    2646:	84 fd       	sbrc	r24, 4
    2648:	bf cf       	rjmp	.-130    	; 0x25c8 <__vector_125+0xd8>
    264a:	e3 cf       	rjmp	.-58     	; 0x2612 <__vector_125+0x122>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    264c:	ff 91       	pop	r31
    264e:	ef 91       	pop	r30
    2650:	bf 91       	pop	r27
    2652:	af 91       	pop	r26
    2654:	9f 91       	pop	r25
    2656:	8f 91       	pop	r24
    2658:	7f 91       	pop	r23
    265a:	6f 91       	pop	r22
    265c:	5f 91       	pop	r21
    265e:	4f 91       	pop	r20
    2660:	3f 91       	pop	r19
    2662:	2f 91       	pop	r18
    2664:	0f 91       	pop	r16
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	0f 90       	pop	r0
    266c:	1f 90       	pop	r1
    266e:	18 95       	reti

00002670 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2670:	1f 92       	push	r1
    2672:	0f 92       	push	r0
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	0f 92       	push	r0
    2678:	11 24       	eor	r1, r1
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	2f 93       	push	r18
    2680:	3f 93       	push	r19
    2682:	4f 93       	push	r20
    2684:	5f 93       	push	r21
    2686:	6f 93       	push	r22
    2688:	7f 93       	push	r23
    268a:	8f 93       	push	r24
    268c:	9f 93       	push	r25
    268e:	af 93       	push	r26
    2690:	bf 93       	push	r27
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	ef 93       	push	r30
    2698:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    269a:	80 91 cc 04 	lds	r24, 0x04CC
    269e:	81 fd       	sbrc	r24, 1
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    26a2:	59 db       	rcall	.-2382   	; 0x1d56 <udd_ctrl_interrupt_tc_setup>
    26a4:	81 11       	cpse	r24, r1
    26a6:	b8 c0       	rjmp	.+368    	; 0x2818 <__vector_126+0x1a8>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    26a8:	82 e0       	ldi	r24, 0x02	; 2
    26aa:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    26ae:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    26b2:	81 95       	neg	r24
    26b4:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    26b6:	e0 e1       	ldi	r30, 0x10	; 16
    26b8:	f2 e2       	ldi	r31, 0x22	; 34
    26ba:	e8 1b       	sub	r30, r24
    26bc:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    26be:	20 81       	ld	r18, Z
    26c0:	31 81       	ldd	r19, Z+1	; 0x01
    26c2:	20 51       	subi	r18, 0x10	; 16
    26c4:	32 42       	sbci	r19, 0x22	; 34
    26c6:	36 95       	lsr	r19
    26c8:	27 95       	ror	r18
    26ca:	36 95       	lsr	r19
    26cc:	27 95       	ror	r18
    26ce:	36 95       	lsr	r19
    26d0:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    26d2:	82 2f       	mov	r24, r18
    26d4:	86 95       	lsr	r24
    26d6:	20 ff       	sbrs	r18, 0
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <__vector_126+0x6e>
    26da:	90 e8       	ldi	r25, 0x80	; 128
    26dc:	01 c0       	rjmp	.+2      	; 0x26e0 <__vector_126+0x70>
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    26e2:	e8 2f       	mov	r30, r24
    26e4:	ef 70       	andi	r30, 0x0F	; 15
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	ee 0f       	add	r30, r30
    26ea:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    26ec:	28 2f       	mov	r18, r24
    26ee:	33 27       	eor	r19, r19
    26f0:	27 fd       	sbrc	r18, 7
    26f2:	30 95       	com	r19
    26f4:	22 27       	eor	r18, r18
    26f6:	33 0f       	add	r19, r19
    26f8:	22 1f       	adc	r18, r18
    26fa:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    26fc:	e2 0f       	add	r30, r18
    26fe:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	ee 0f       	add	r30, r30
    2706:	ff 1f       	adc	r31, r31
    2708:	ee 0f       	add	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	e0 5f       	subi	r30, 0xF0	; 240
    270e:	fd 4d       	sbci	r31, 0xDD	; 221
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2710:	90 81       	ld	r25, Z
    2712:	95 ff       	sbrs	r25, 5
    2714:	81 c0       	rjmp	.+258    	; 0x2818 <__vector_126+0x1a8>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2716:	00 e2       	ldi	r16, 0x20	; 32
    2718:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    271a:	81 11       	cpse	r24, r1
    271c:	78 c0       	rjmp	.+240    	; 0x280e <__vector_126+0x19e>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    271e:	80 91 ff 21 	lds	r24, 0x21FF
    2722:	84 30       	cpi	r24, 0x04	; 4
    2724:	19 f4       	brne	.+6      	; 0x272c <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2726:	62 da       	rcall	.-2876   	; 0x1bec <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2728:	1a da       	rcall	.-3020   	; 0x1b5e <udd_ctrl_init>
    272a:	76 c0       	rjmp	.+236    	; 0x2818 <__vector_126+0x1a8>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    272c:	c0 91 12 22 	lds	r28, 0x2212
    2730:	d0 91 13 22 	lds	r29, 0x2213

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2734:	80 91 60 24 	lds	r24, 0x2460
    2738:	90 91 61 24 	lds	r25, 0x2461
    273c:	00 91 fb 21 	lds	r16, 0x21FB
    2740:	10 91 fc 21 	lds	r17, 0x21FC
    2744:	98 01       	movw	r18, r16
    2746:	2c 0f       	add	r18, r28
    2748:	3d 1f       	adc	r19, r29
    274a:	82 17       	cp	r24, r18
    274c:	93 07       	cpc	r25, r19
    274e:	18 f4       	brcc	.+6      	; 0x2756 <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2750:	ec 01       	movw	r28, r24
    2752:	c0 1b       	sub	r28, r16
    2754:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2756:	80 91 5e 24 	lds	r24, 0x245E
    275a:	90 91 5f 24 	lds	r25, 0x245F
    275e:	ae 01       	movw	r20, r28
    2760:	6b eb       	ldi	r22, 0xBB	; 187
    2762:	71 e2       	ldi	r23, 0x21	; 33
    2764:	80 0f       	add	r24, r16
    2766:	91 1f       	adc	r25, r17
    2768:	86 d0       	rcall	.+268    	; 0x2876 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    276a:	0c 0f       	add	r16, r28
    276c:	1d 1f       	adc	r17, r29
    276e:	00 93 fb 21 	sts	0x21FB, r16
    2772:	10 93 fc 21 	sts	0x21FC, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2776:	c0 34       	cpi	r28, 0x40	; 64
    2778:	d1 05       	cpc	r29, r1
    277a:	69 f4       	brne	.+26     	; 0x2796 <__vector_126+0x126>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    277c:	80 91 fd 21 	lds	r24, 0x21FD
    2780:	90 91 fe 21 	lds	r25, 0x21FE
    2784:	80 0f       	add	r24, r16
    2786:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2788:	20 91 5c 24 	lds	r18, 0x245C
    278c:	30 91 5d 24 	lds	r19, 0x245D
    2790:	82 17       	cp	r24, r18
    2792:	93 07       	cpc	r25, r19
    2794:	88 f0       	brcs	.+34     	; 0x27b8 <__vector_126+0x148>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2796:	00 93 60 24 	sts	0x2460, r16
    279a:	10 93 61 24 	sts	0x2461, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    279e:	e0 91 64 24 	lds	r30, 0x2464
    27a2:	f0 91 65 24 	lds	r31, 0x2465
    27a6:	30 97       	sbiw	r30, 0x00	; 0
    27a8:	29 f0       	breq	.+10     	; 0x27b4 <__vector_126+0x144>
			if (!udd_g_ctrlreq.over_under_run()) {
    27aa:	09 95       	icall
    27ac:	81 11       	cpse	r24, r1
    27ae:	02 c0       	rjmp	.+4      	; 0x27b4 <__vector_126+0x144>
				// Stall ZLP
				udd_ctrl_stall_data();
    27b0:	01 da       	rcall	.-3070   	; 0x1bb4 <udd_ctrl_stall_data>
    27b2:	32 c0       	rjmp	.+100    	; 0x2818 <__vector_126+0x1a8>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    27b4:	0d da       	rcall	.-3046   	; 0x1bd0 <udd_ctrl_send_zlp_in>
    27b6:	30 c0       	rjmp	.+96     	; 0x2818 <__vector_126+0x1a8>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    27b8:	80 91 60 24 	lds	r24, 0x2460
    27bc:	90 91 61 24 	lds	r25, 0x2461
    27c0:	08 17       	cp	r16, r24
    27c2:	19 07       	cpc	r17, r25
    27c4:	f9 f4       	brne	.+62     	; 0x2804 <__vector_126+0x194>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    27c6:	e0 91 64 24 	lds	r30, 0x2464
    27ca:	f0 91 65 24 	lds	r31, 0x2465
    27ce:	30 97       	sbiw	r30, 0x00	; 0
    27d0:	11 f4       	brne	.+4      	; 0x27d6 <__vector_126+0x166>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    27d2:	f0 d9       	rcall	.-3104   	; 0x1bb4 <udd_ctrl_stall_data>
    27d4:	21 c0       	rjmp	.+66     	; 0x2818 <__vector_126+0x1a8>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    27d6:	09 95       	icall
    27d8:	81 11       	cpse	r24, r1
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <__vector_126+0x170>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    27dc:	eb d9       	rcall	.-3114   	; 0x1bb4 <udd_ctrl_stall_data>
    27de:	1c c0       	rjmp	.+56     	; 0x2818 <__vector_126+0x1a8>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    27e0:	20 91 fd 21 	lds	r18, 0x21FD
    27e4:	30 91 fe 21 	lds	r19, 0x21FE
    27e8:	80 91 fb 21 	lds	r24, 0x21FB
    27ec:	90 91 fc 21 	lds	r25, 0x21FC
    27f0:	82 0f       	add	r24, r18
    27f2:	93 1f       	adc	r25, r19
    27f4:	80 93 fd 21 	sts	0x21FD, r24
    27f8:	90 93 fe 21 	sts	0x21FE, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    27fc:	10 92 fb 21 	sts	0x21FB, r1
    2800:	10 92 fc 21 	sts	0x21FC, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2804:	e0 e1       	ldi	r30, 0x10	; 16
    2806:	f2 e2       	ldi	r31, 0x22	; 34
    2808:	02 e0       	ldi	r16, 0x02	; 2
    280a:	06 93       	lac	Z, r16
    280c:	05 c0       	rjmp	.+10     	; 0x2818 <__vector_126+0x1a8>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    280e:	80 38       	cpi	r24, 0x80	; 128
    2810:	11 f4       	brne	.+4      	; 0x2816 <__vector_126+0x1a6>
		udd_ctrl_in_sent();
    2812:	f4 d9       	rcall	.-3096   	; 0x1bfc <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2814:	01 c0       	rjmp	.+2      	; 0x2818 <__vector_126+0x1a8>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2816:	0e db       	rcall	.-2532   	; 0x1e34 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2818:	ff 91       	pop	r31
    281a:	ef 91       	pop	r30
    281c:	df 91       	pop	r29
    281e:	cf 91       	pop	r28
    2820:	bf 91       	pop	r27
    2822:	af 91       	pop	r26
    2824:	9f 91       	pop	r25
    2826:	8f 91       	pop	r24
    2828:	7f 91       	pop	r23
    282a:	6f 91       	pop	r22
    282c:	5f 91       	pop	r21
    282e:	4f 91       	pop	r20
    2830:	3f 91       	pop	r19
    2832:	2f 91       	pop	r18
    2834:	1f 91       	pop	r17
    2836:	0f 91       	pop	r16
    2838:	0f 90       	pop	r0
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	0f 90       	pop	r0
    283e:	1f 90       	pop	r1
    2840:	18 95       	reti

00002842 <__udivmodhi4>:
    2842:	aa 1b       	sub	r26, r26
    2844:	bb 1b       	sub	r27, r27
    2846:	51 e1       	ldi	r21, 0x11	; 17
    2848:	07 c0       	rjmp	.+14     	; 0x2858 <__udivmodhi4_ep>

0000284a <__udivmodhi4_loop>:
    284a:	aa 1f       	adc	r26, r26
    284c:	bb 1f       	adc	r27, r27
    284e:	a6 17       	cp	r26, r22
    2850:	b7 07       	cpc	r27, r23
    2852:	10 f0       	brcs	.+4      	; 0x2858 <__udivmodhi4_ep>
    2854:	a6 1b       	sub	r26, r22
    2856:	b7 0b       	sbc	r27, r23

00002858 <__udivmodhi4_ep>:
    2858:	88 1f       	adc	r24, r24
    285a:	99 1f       	adc	r25, r25
    285c:	5a 95       	dec	r21
    285e:	a9 f7       	brne	.-22     	; 0x284a <__udivmodhi4_loop>
    2860:	80 95       	com	r24
    2862:	90 95       	com	r25
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	08 95       	ret

0000286a <__tablejump2__>:
    286a:	ee 0f       	add	r30, r30
    286c:	ff 1f       	adc	r31, r31

0000286e <__tablejump__>:
    286e:	05 90       	lpm	r0, Z+
    2870:	f4 91       	lpm	r31, Z
    2872:	e0 2d       	mov	r30, r0
    2874:	09 94       	ijmp

00002876 <memcpy>:
    2876:	fb 01       	movw	r30, r22
    2878:	dc 01       	movw	r26, r24
    287a:	02 c0       	rjmp	.+4      	; 0x2880 <memcpy+0xa>
    287c:	01 90       	ld	r0, Z+
    287e:	0d 92       	st	X+, r0
    2880:	41 50       	subi	r20, 0x01	; 1
    2882:	50 40       	sbci	r21, 0x00	; 0
    2884:	d8 f7       	brcc	.-10     	; 0x287c <memcpy+0x6>
    2886:	08 95       	ret

00002888 <_exit>:
    2888:	f8 94       	cli

0000288a <__stop_program>:
    288a:	ff cf       	rjmp	.-2      	; 0x288a <__stop_program>
